load initial-states
load delta

  *** parameters:
  *** consistency level

mod CASSANDRA-ANALYSIS is
  inc INITIAL-STATES .
  inc DELTA .
  inc GAMMA .

  eq LIMIT = 1.0e+1000000 .

  eq replicaFactor = 3 .


  op initConfig : -> Config .
  eq initConfig = run(initState,LIMIT) .

---
  eq initState = init(10,10,0,3,3,3,3,1,1,0,uniform,one,one) . 


  --- Init parameters 
  eq nbOfRoTxns = 5 .  
  eq nbOfWoTxns = 5 .  
  eq nbOfRwTxns = 0 .       --- must be 0
  eq nbOfOpsPerRoTxn = 1 .  --- must be 1
  eq nbOfOpsPerWoTxn = 1 .  --- must be 1
  eq nbOfOpsPerRwTxn = 0 .  --- must be 0
  eq nbOfCls = 4 .
  eq nbOfServs  = 4 .  
  eq nbOfKeys = 4 .  
  eq nbOfRepls = 3 .
  eq kad = zipf .
  eq readLevel = all .
  eq writeLevel = one .

  eq delay = sampleLogNormal(0.0,1.0) .
  ---eq delay = genRandom(0.0, 1.0) .


  --- Metrics
  var LOG : Log .
  vars TID RID M : Address .
  vars GT GT' T N : Float .
  vars RS WS : Set{KeyVersion} .
  vars VT VT' : VectorTime .
  var FLAG : Bool .
  var C : Config .

  op totalRunTime : Log -> Float .
  op trt : Log Float -> Float .


  eq totalRunTime(LOG) = trt(LOG,0.0) .
  ---(
  eq trt((TID |-> 
      < RID |-> GT ; (RID |-> GT',VT) ; true ; RS ; WS >,LOG),T) = 
       if GT' > T
         then trt(LOG,GT')
         else trt(LOG,T)
       fi .
  eq trt((TID |-> 
      < VT ; VT' ; false ; RS ; WS >,LOG),T) = 
       trt(LOG,T) .
  eq trt(empty,T) = T .
  )
  *** NEW: false reads count
  eq trt((TID |->
      < RID |-> GT ; (RID |-> GT',VT) ; FLAG ; RS ; WS >,LOG),T) =
       if GT' > T
         then trt(LOG,GT')
         else trt(LOG,T)
       fi .
  eq trt(empty,T) = T .


  --- Throughput
  op throughput : Log -> Float .
  ---
  eq throughput(LOG) = committedNumber(LOG) 
                     / totalRunTime(LOG) .
  
  ---(
  *** NEW
  eq throughput(LOG) = totalNumber(LOG) 
                     / totalRunTime(LOG) .
  )
  op committedNumber : Log -> Float .
  op $committedNumber : Log Float -> Float .

  eq committedNumber(LOG) = $committedNumber(LOG,0.0) .
  eq $committedNumber((TID |-> 
      < VT ; VT' ; true ; RS ; WS >,LOG),N) 
      = $committedNumber(LOG,N + 1.0) .
  eq $committedNumber((TID |-> 
      < VT ; VT' ; false ; RS ; WS >,LOG),N) 
      = $committedNumber(LOG,N) .
  eq $committedNumber(empty,N) = N .


  --- Avg latency
  op avgLatency : Log -> Float .
  eq avgLatency(LOG) = totalLatency(LOG) 
                     / committedNumber(LOG) .

  op totalLatency : Log -> Float .
  op $totalLatency : Log Float -> Float .
  
  eq totalLatency(LOG) = $totalLatency(LOG,0.0) .
  eq $totalLatency((TID |-> 
      < RID |-> GT ; (RID |-> GT',VT) ; true ; RS ; WS >,LOG),T) 
      = $totalLatency(LOG,T + GT' - GT) .
  eq $totalLatency((TID |-> 
      < VT ; VT' ; false ; RS ; WS >,LOG),T) 
      = $totalLatency(LOG,T) .
  eq $totalLatency(empty,T) = T .

  --- readAvgLatency : Log -> Float .
  op readAvgLatency : Log -> Float .
  --- includes "error" reads
  eq readAvgLatency(LOG) = readTotalLatency(LOG)
                         / readNumber(LOG) .

  op readTotalLatency : Log -> Float .
  op $readTotalLatency : Log Float -> Float .

  eq readTotalLatency(LOG) = $readTotalLatency(LOG,0.0) .
  eq $readTotalLatency((TID |-> 
      < RID |-> GT ; (RID |-> GT',VT) ; FLAG ; RS ; empty >,LOG),T) 
      = $readTotalLatency(LOG,T + GT' - GT) .
  eq $readTotalLatency((TID |-> 
      < RID |-> GT ; (RID |-> GT',VT) ; FLAG ; RS ; WS >,LOG),T)
      = $readTotalLatency(LOG,T) [owise] .
  eq $readTotalLatency(empty,T) = T .

  op readNumber : Log -> Float .
  op $readNumber : Log Float -> Float .
  eq readNumber(LOG) = $readNumber(LOG,0.0) .
  eq $readNumber((TID |-> < VT ; VT' ; FLAG ; RS ; empty >,LOG),N) 
     = $readNumber(LOG,N + 1.0) .
  eq $readNumber((TID |-> < VT ; VT' ; FLAG ; RS ; WS >,LOG),N) 
     = $readNumber(LOG,N) [owise] .
  eq $readNumber(empty,N) = N .  

  --- Commit ratio
  op cmtRatio : Log -> Float .
  eq cmtRatio(LOG) = committedNumber(LOG) 
                   / totalNumber(LOG) .

  op totalNumber : Log -> Float .
  op $totalNumber : Log Float -> Float .
  eq totalNumber(LOG) = $totalNumber(LOG,0.0) .
  eq $totalNumber((TID |-> < VT ; VT' ; FLAG ; RS ; WS >,LOG),N) 
     = $totalNumber(LOG,N + 1.0) .
  eq $totalNumber(empty,N) = N .  


  --- PVESTA interfaces
  eq val(0,< M : Monitor | log: LOG > C) = throughput(LOG) .
  eq val(1,< M : Monitor | log: LOG > C) = avgLatency(LOG) .
  eq val(2,< M : Monitor | log: LOG > C) = cmtRatio(LOG) .
  eq val(3,< M : Monitor | log: LOG > C) = readAvgLatency(LOG) .  
  eq val(4,< M : Monitor | log: LOG > C) = delta(LOG) .  
  eq val(5,< M : Monitor | log: LOG > C) = gamma(LOG) .  

---(
  eq initState = 
{0.0,start to 1 . 1} {0.0,start to 1 . 2} 
{0.0 |
nil} 
< 1 : Server | respFromRepl: empty,reqConsLv: emptyReqConsLv,datastore: ([k1,0,
    0.0], [k2,0,0.0], [k3,0,0.0]) > 
< 2 : Server | respFromRepl: empty,reqConsLv: emptyReqConsLv,datastore: ([k1,0,
    0.0], [k2,0,0.0], [k3,0,0.0]) > 
< 3 : Server | respFromRepl: empty,reqConsLv: emptyReqConsLv,datastore: ([k1,0,
    0.0], [k2,0,0.0], [k3,0,0.0]) > 
< 0 . 1 : Table | table: [replicatingSites(k1, 3 ;; 2 ;; 1) ;;
    replicatingSites(k2, 3 ;; 2 ;; 1) ;; replicatingSites(k3, 2 ;; 3 ;; 1)] > 
< 0 . 2 : Monitor | log: empty > 
< 1 . 1 : Client | requestQueue: 
< 1 . 1 : Txn | operations: read(k1),readSet: empty,writeSet: empty,version:
    0.0,consLv: 1 >,executing: null,committed: null,coord: 2 > 
< 1 . 2 : Client | requestQueue: 
< 2 . 1 : Txn | operations: write(k1, 964),readSet: empty,writeSet: empty,
    version: 0.0,consLv: 1 >,executing: null,committed: null,coord: 2 > .
)
endm

set clear rules off .

rew initConfig .

rew delta( 
(1 . 1 |-> < 1 . 1 |-> 0.0 ; 1 . 1 |->
    3.590160054294758 ; true ; empty ; < k1,0.0 > >, 1 . 2 |-> < 1 . 1 |->
    3.590160054294758 ; 1 . 1 |-> 7.1678706007127175 ; true ; empty ; < k1,
    3.590160054294758 > >, 1 . 3 |-> < 1 . 1 |-> 7.1678706007127175 ; 1 . 1 |->
    9.3942881538785876 ; true ; empty ; < k2,7.1678706007127175 > >, 1 . 4 |->
    < 1 . 1 |-> 9.3942881538785876 ; 1 . 1 |-> 2.5125440802118344e+1 ; true ; <
    k1,3.590160054294758 > ; empty >, 1 . 5 |-> < 1 . 1 |->
    2.5125440802118344e+1 ; 1 . 1 |-> 2.9679741754601327e+1 ; true ; empty ; <
    k2,2.5125440802118344e+1 > >, 1 . 6 |-> < 1 . 1 |-> 2.9679741754601327e+1 ;
    1 . 1 |-> 3.4339768791134183e+1 ; true ; < k2,2.5125440802118344e+1 > ;
    empty >, 1 . 7 |-> < 1 . 1 |-> 3.4339768791134183e+1 ; 1 . 1 |->
    3.6063423157980949e+1 ; true ; < k2,2.5125440802118344e+1 > ; empty >, 1 .
    8 |-> < 1 . 1 |-> 3.6063423157980949e+1 ; 1 . 1 |-> 4.0933902325241e+1 ;
    true ; < k2,2.5125440802118344e+1 > ; empty >, 2 . 1 |-> < 1 . 2 |-> 0.0 ;
    1 . 2 |-> 2.8935887405853129 ; true ; empty ; < k1,0.0 > >, 2 . 2 |-> < 1 .
    2 |-> 2.8935887405853129 ; 1 . 2 |-> 3.6952359944899818e+1 ; true ; empty ;
    < k1,2.8935887405853129 > >, 2 . 3 |-> < 1 . 2 |-> 3.6952359944899818e+1 ;
    1 . 2 |-> 3.915180996305245e+1 ; true ; empty ; < k2,3.6952359944899818e+1
    > >, 2 . 4 |-> < 1 . 2 |-> 3.915180996305245e+1 ; 1 . 2 |->
    4.1328937856127993e+1 ; true ; < k2,3.6952359944899818e+1 > ; empty >, 2 .
    5 |-> < 1 . 2 |-> 4.1328937856127993e+1 ; 1 . 2 |-> 7.2387001568425475e+1 ;
    true ; empty ; < k3,4.1328937856127993e+1 > >, 2 . 6 |-> < 1 . 2 |->
    7.2387001568425475e+1 ; 1 . 2 |-> 7.3725652235072403e+1 ; true ; < k2,
    3.6952359944899818e+1 > ; empty >, 2 . 7 |-> < 1 . 2 |->
    7.3725652235072403e+1 ; 1 . 2 |-> 7.6460981990424401e+1 ; true ; empty ; <
    k3,7.3725652235072403e+1 > >, 3 . 1 |-> < 1 . 3 |-> 0.0 ; 1 . 3 |->
    2.4104274543911536e+1 ; true ; < k2,7.1678706007127175 > ; empty >, 3 . 2
    |-> < 1 . 3 |-> 2.4104274543911536e+1 ; 1 . 3 |-> 2.6670756626415368e+1 ;
    true ; empty ; < k1,2.4104274543911536e+1 > >, 3 . 3 |-> < 1 . 3 |->
    2.6670756626415368e+1 ; 1 . 3 |-> 2.9149713364157613e+1 ; true ; < k2,
    7.1678706007127175 > ; empty >, 3 . 4 |-> < 1 . 3 |-> 2.9149713364157613e+1
    ; 1 . 3 |-> 4.1990623549283292e+1 ; true ; < k1,2.4104274543911536e+1 > ;
    empty >, 3 . 5 |-> < 1 . 3 |-> 4.1990623549283292e+1 ; 1 . 3 |->
    4.4992981091436256e+1 ; true ; < k2,3.6952359944899818e+1 > ; empty >)
	
) .

rew gamma(

(1 . 1 |-> < 1 . 1 |-> 0.0 ; 1 . 1 |->
    3.590160054294758 ; true ; empty ; < k1,0.0 > >, 1 . 2 |-> < 1 . 1 |->
    3.590160054294758 ; 1 . 1 |-> 7.1678706007127175 ; true ; empty ; < k1,
    3.590160054294758 > >, 1 . 3 |-> < 1 . 1 |-> 7.1678706007127175 ; 1 . 1 |->
    9.3942881538785876 ; true ; empty ; < k2,7.1678706007127175 > >, 1 . 4 |->
    < 1 . 1 |-> 9.3942881538785876 ; 1 . 1 |-> 2.5125440802118344e+1 ; true ; <
    k1,3.590160054294758 > ; empty >, 1 . 5 |-> < 1 . 1 |->
    2.5125440802118344e+1 ; 1 . 1 |-> 2.9679741754601327e+1 ; true ; empty ; <
    k2,2.5125440802118344e+1 > >, 1 . 6 |-> < 1 . 1 |-> 2.9679741754601327e+1 ;
    1 . 1 |-> 3.4339768791134183e+1 ; true ; < k2,2.5125440802118344e+1 > ;
    empty >, 1 . 7 |-> < 1 . 1 |-> 3.4339768791134183e+1 ; 1 . 1 |->
    3.6063423157980949e+1 ; true ; < k2,2.5125440802118344e+1 > ; empty >, 1 .
    8 |-> < 1 . 1 |-> 3.6063423157980949e+1 ; 1 . 1 |-> 4.0933902325241e+1 ;
    true ; < k2,2.5125440802118344e+1 > ; empty >, 2 . 1 |-> < 1 . 2 |-> 0.0 ;
    1 . 2 |-> 2.8935887405853129 ; true ; empty ; < k1,0.0 > >, 2 . 2 |-> < 1 .
    2 |-> 2.8935887405853129 ; 1 . 2 |-> 3.6952359944899818e+1 ; true ; empty ;
    < k1,2.8935887405853129 > >, 2 . 3 |-> < 1 . 2 |-> 3.6952359944899818e+1 ;
    1 . 2 |-> 3.915180996305245e+1 ; true ; empty ; < k2,3.6952359944899818e+1
    > >, 2 . 4 |-> < 1 . 2 |-> 3.915180996305245e+1 ; 1 . 2 |->
    4.1328937856127993e+1 ; true ; < k2,3.6952359944899818e+1 > ; empty >, 2 .
    5 |-> < 1 . 2 |-> 4.1328937856127993e+1 ; 1 . 2 |-> 7.2387001568425475e+1 ;
    true ; empty ; < k3,4.1328937856127993e+1 > >, 2 . 6 |-> < 1 . 2 |->
    7.2387001568425475e+1 ; 1 . 2 |-> 7.3725652235072403e+1 ; true ; < k2,
    3.6952359944899818e+1 > ; empty >, 2 . 7 |-> < 1 . 2 |->
    7.3725652235072403e+1 ; 1 . 2 |-> 7.6460981990424401e+1 ; true ; empty ; <
    k3,7.3725652235072403e+1 > >, 3 . 1 |-> < 1 . 3 |-> 0.0 ; 1 . 3 |->
    2.4104274543911536e+1 ; true ; < k2,7.1678706007127175 > ; empty >, 3 . 2
    |-> < 1 . 3 |-> 2.4104274543911536e+1 ; 1 . 3 |-> 2.6670756626415368e+1 ;
    true ; empty ; < k1,2.4104274543911536e+1 > >, 3 . 3 |-> < 1 . 3 |->
    2.6670756626415368e+1 ; 1 . 3 |-> 2.9149713364157613e+1 ; true ; < k2,
    7.1678706007127175 > ; empty >, 3 . 4 |-> < 1 . 3 |-> 2.9149713364157613e+1
    ; 1 . 3 |-> 4.1990623549283292e+1 ; true ; < k1,2.4104274543911536e+1 > ;
    empty >, 3 . 5 |-> < 1 . 3 |-> 4.1990623549283292e+1 ; 1 . 3 |->
    4.4992981091436256e+1 ; true ; < k2,3.6952359944899818e+1 > ; empty >)

) .
