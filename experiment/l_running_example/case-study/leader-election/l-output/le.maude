    --- This version is for Festschrift Martin Wirsing

load manet

(omod LE-PARAMETERS is
    including MANET-PARAMETERS .

    op ackTime : -> Time .
    eq ackTime = INF .

endom)

(omod LE-SORTS is
    including LE-PARAMETERS . 
    including AODV-SORTS . 

    sort CompIndex .
    sort MaxAck .
    subsort RreqID < CompIndex MaxAck .


endom)

(omod LE-AUX is
    including LE-SORTS .
    protecting AODV-AUX .

    eq pr1(null) = 0 .
    eq pr2(null) = 0 . 

    --- 1st is higher than 2nd
    op higher : CompIndex CompIndex -> Bool .

    vars O O' : Oid .
    vars N N' : Nat .

    eq higher(O ~ N, O' ~ N') = 
       if N > N' 
         then true
         else if N == N'
                then if O > O'
                       then true
                       else false
                     fi
                else false
              fi
       fi .
                      
endom)


(tomod LE-NODE-DEFINITION is
    protecting LE-AUX .
    protecting MANET-NODE-DEFINITION .

    class LENode | leader : Nat,               --- leader
                   parent : Nat,               --- neighbor from whom it receives 1st election msg
---                   neighbors : NeighborSet,    --- direct neighbors
                   value : Nat,                --- metric of leadership. equal to id in this version
                   max : MaxAck,               --- current max ack (id,value). initially set to (id,id) 
                   number : Nat,               --- similar to sequence number
                   src : CompIndex,            --- uniquely identify a diffusing computation
---                   timer : Time,               --- for a heartbeat msg. start a new l.e. upon expire
                   acks : NeighborSet,         --- neighbors haven't replied ack
                   eflag : Bool,               --- whether in an election: "false" means initial value, 
                                               --- or already has a leader 
                   pflag : Bool .              --- whether replied to parent
    subclass LENode < Node .

    
    class SLENode .
    subclass SLENode < StaNode LENode .

    class RWPLENode .
    subclass RWPLENode < RWPNode LENode .

endtom)

(tomod LE-MESSAGE-DEFINITIONS is
    protecting MANET-MESSAGE-DEFINITIONS .
    protecting LE-NODE-DEFINITION .

    msg lebootstrap_ : Oid -> Msg .
     
    op e : CompIndex -> MsgCont [ctor] .
    op a : MaxAck -> MsgCont [ctor] .
    op l : MaxAck -> MsgCont [ctor] .
---    op p :
---    op r :

endtom)

*** L
load ../events

(tomod EVENT-MAP is 
  inc EVENTS + LE-MESSAGE-DEFINITIONS .
  
*** subsort Nat < Time .   *** discrete time
*** subsort Float < Time .  *** dense time
  
  *** user-specified interesting events 
  op leader : Oid -> Event [ctor] .

  var O : Oid .
  vars M M' : MaxAck .
  
  *** rule-specific mapping
  eq eventMap = ['acks-is-empty-1, leader(pr1(M))] ;;
                ['on-receiving-unicast-error-ns, leader(pr1(M))] ;;
                ['on-receiving-leader-1-ns,leader(pr1(M))] ;;
                ['on-receiving-leader-3-s-1,leader(pr1(M'))] ;;
                ['on-receiving-leader-4-s-1,leader(pr1(M'))] [nonexec] .
endtom)

*** L
(tomod LE is inc EVENT-MAP .
    protecting LE-MESSAGE-DEFINITIONS .

    vars S1 S2 S3 S4 : NeighborSet .
    vars I I' : CompIndex .
    vars M M' : MaxAck .
    vars N N' V : Nat .
    var B : Bool .
    vars O O' O'' SIP : Oid . 
    var TI : TimeInf .  
    var T  : Time .
    var MSG : Msg .

    eq mte(lebootstrap O) = 0 .
    eq delta(lebootstrap O,T) = lebootstrap O .

    eq mte(< O : LENode | >) = INF .


    *************************************
    *** Bootstrapping Leader Election ***
    *************************************

    rl [init-leader-election] :
       < O : LENode | eflag : false, pflag : true, 
                      neighbors : S1, number : N >
       (lebootstrap O)
     =>
       < O : LENode | acks : S1, src : O ~ N, number : N + 1, 
                      eflag : true, pflag : false, parent : O > 
       (gpcast e(O ~ N) from O to S1) . 
    

    *****************************
    *** On receiving election ***
    *****************************
    --- s  : source node
    --- ns : non-source node

    --- If O is not in the election process
   crl [on-receiving-election-1-ns] :
       < O : LENode | eflag : false, pflag : true, 
                      neighbors : S1 >
       (e(I) from SIP to O)
     =>
       < O : LENode | src : I, eflag : true, pflag : false, 
                      parent : SIP, neighbors : S2, acks : S3 >
       (if S3 == empty 
          then none 
          else (gpcast e(I) from O to S3) 
        fi)
     if S2 := insert(SIP,S1) /\ S3 := delete(SIP,S2) .


    --- If O is already in an election process
   crl [on-receiving-election-2-s-and-ns] :
       < O : LENode | eflag : true, src : I, neighbors : S1 >
       (e(I') from SIP to O)
     =>
       (if higher(I',I)
          then < O : LENode | src : I', parent : SIP, acks : S3,
                              neighbors : S2, pflag : false >
               (if S3 == empty 
                  then none 
                  else (gpcast e(I) from O to S3) 
                fi)
          else < O : LENode | neighbors : S2 >    
               (msg a(null) from O to SIP)        
        fi)                                       
     if S2 := insert(SIP,S1) /\ S3 := delete(SIP,S2) .    

    --- If I' == I, it also covers the case when the source receives its "e"
    --- If I' < I, SIP is not O's parent, so "pflag" won't change. O only replies "a"
    --- O does not need to tell SIP that I is higher, because later "l" will reach SIP


    ************************
    *** On receiving ack ***
    ************************

   crl [on-receiving-ack-1-s-and-ns] :
       < O : LENode | eflag : true, pflag : false, 
                      neighbors : S1, acks : S2, max : M >
       (a(M') from SIP to O)
     =>
       (if pr2(M') > pr2(M)
         then < O : LENode | neighbors : S3, acks : S4, max : M' >
         else < O : LENode | neighbors : S3, acks : S4 >
       fi)
     if S3 := insert(SIP,S1) /\ S4 := delete(SIP,S2) .

    --- There is an INTERESTING case where the parent did not receive "a"
    --- and considered SIP as disconnected, removing SIP from acks
    --- BUT now it receives "a". 
    --- We handle this by updating neighbors. Note that we can NOT do
    --- S4 := delete(SIP,S3)


    ---(
    rl [acks-is-empty] :
       < O : LENode | eflag : true, pflag : false,
                      parent : O', acks : empty, max : M > 
     =>
       if O == O'
         then < O : LENode | leader : pr1(M), eflag : false,
                             pflag : true >
              (broadcast l(M) from O)
         else < O : LENode | pflag : true >
              (msg a(M) from O to O')
       fi .
    )

*** L
    rl [acks-is-empty-1] :
       < log : Monitor | events : TES:TimedEvents, clock : T:Time >
       < O : LENode | eflag : true, pflag : false,
                      parent : O, acks : empty, max : M > 
    =>
       < log : Monitor | events : TES:TimedEvents ; (leader(pr1(M)) @ T:Time), clock : T:Time >
       < O : LENode | leader : pr1(M), eflag : false,
                      pflag : true >
       (broadcast l(M) from O) .


   crl [acks-is-empty-2] :
       < O : LENode | eflag : true, pflag : false,
                      parent : O', acks : empty, max : M > 
     =>
       < O : LENode | pflag : true >
       (msg a(M) from O to O')
       if O =/= O' .
       

    ---
    rl [on-receiving-ack-2-s-and-ns] :
       < O : LENode | eflag : false, neighbors : S1 >
       (a(M) from SIP to O)
     =>
       < O : LENode | neighbors : insert(SIP,S1) > .
    

    **************************
    *** On receiving error ***
    **************************

    --- Multicast Error
    rl [on-receiving-multicast-error-s-and-ns] :
       < O : LENode | eflag : true, neighbors : S1, acks : S2 >
       (mserror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1), 
                      acks : delete(O',S2) > .


    --- In this version there is no case where 
    --- a node not in a computation will receives "merror"
    --- YES, there is!!!
    ---
    rl [on-receiving-multicast-error-s-and-ns] :
       < O : LENode | eflag : false, neighbors : S1 >
       (mrerror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .


    --- Unicast Error
    --- When a node reports ack, if disconnected, it will receives a "serror".
    --- If it is a child, it then announces itself or max downstream node as the leader;
    --- If it is the source, it ignores the "serror".

    --- This case was NOT specified in the protocol!!!
    ---
    rl [on-receiving-unicast-error-s] :
       < O : LENode | eflag : true, pflag : false, 
                      parent : O, neighbors : S1 >
       (serror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .
    
*** L
   crl [on-receiving-unicast-error-ns] :
       < log : Monitor | events : TES:TimedEvents, clock : T:Time >
       < O : LENode | eflag : true, pflag : true, parent : O', 
                      max : M, neighbors : S1 >
       (serror(O') to O)
     =>
       < log : Monitor | events : TES:TimedEvents ; (leader(pr1(M)) @ T:Time), clock : T:Time >
       < O : LENode | parent : O, leader : pr1(M), eflag : false, 
                      neighbors : delete(O',S1) >    
       (broadcast l(M) from O) 
     if O' =/= O .


    --- Unspecified!!!
    rl [on-receiving-unicast-error-unspecified] :
       < O : LENode | eflag : true, pflag : false, 
                      parent : O, neighbors : S1 >
       (serror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .


    --- When a node is waiting for ack, if disconneted, it will receives a "rerror".
    rl [on-receiving-unicast-error-s-and-ns] :
       < O : LENode | eflag : true, neighbors : S1, 
                      acks : S2 >
       (rerror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1), 
                      acks : delete(O',S2) > .


    --- When a node O receives a smaller "l" from another node O', 
    --- it will unicast its leader to O' [on-receiving-leader-4-s]
    --- If unicast fails, both O and O' will receive an "error"      
    rl [on-receiving-leader-unicast-error-sender] :
       < O : LENode | eflag : false, neighbors : S1 >
       (serror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .


    rl [on-receiving-leader-unicast-error-receiver] :
       < O : LENode | eflag : false, neighbors : S1 >
       (rerror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .


    *******************************
    *** On receiving leader msg ***
    *******************************

*** L
    --- Has not received "l"
    rl [on-receiving-leader-1-ns] :
       < log : Monitor | events : TES:TimedEvents, clock : T:Time >
       < O : LENode | eflag : true, pflag : true, 
                      neighbors : S1 >
       (l(M) from SIP to O)
     =>
       < log : Monitor | events : TES:TimedEvents ; (leader(pr1(M)) @ T:Time), clock : T:Time >
       < O : LENode | leader : pr1(M), max : M, eflag : false, 
                      neighbors : insert(SIP,S1) >
       (broadcast l(M) from O) .


    --- This case was NOT specified in the protocol!!!
    ---
    rl [on-receiving-leader-2-s] :
       < O : LENode | eflag : true, pflag : false, neighbors : S1 >
       (l(M) from SIP to O)
     =>
       < O : LENode | neighbors : insert(SIP,S1) > .
    

    --- rl [on-receiving-leader-2-ns] ???

    ---(
    rl [on-receiving-leader-3-s] :
       < O : LENode | eflag : false, max : M,
                      neighbors : (SIP,S1) >
       (l(M') from SIP to O)
     =>
       if pr2(M') > pr2(M)
         then < O : LENode | leader : pr1(M'), max : M' >
              (broadcast l(M') from O)
         else if pr2(M') < pr2(M)
                then < O : LENode | >
                     (broadcast l(M) from O)
                else < O : LENode | >
              fi
       fi .
       )

*** L
   crl [on-receiving-leader-3-s-1] :
       < log : Monitor | events : TES:TimedEvents, clock : T:Time >
       < O : LENode | eflag : false, max : M,
                      neighbors : (SIP,S1) >
       (l(M') from SIP to O)
     =>
       < log : Monitor | events : TES:TimedEvents ; (leader(pr1(M')) @ T:Time), clock : T:Time >
       < O : LENode | leader : pr1(M'), max : M' >
       (broadcast l(M') from O)
       if pr2(M') > pr2(M) .


   crl [on-receiving-leader-3-s-2] :
       < O : LENode | eflag : false, max : M,
                      neighbors : (SIP,S1) >
       (l(M') from SIP to O)
     =>
       < O : LENode | >
       (broadcast l(M) from O)
       if pr2(M') < pr2(M) . 


   crl [on-receiving-leader-3-s-3] :
       < O : LENode | eflag : false, max : M,
                      neighbors : (SIP,S1) >
       (l(M') from SIP to O)
     =>
       < O : LENode | >
       if pr2(M') == pr2(M) .

   ---(
   crl [on-receiving-leader-4-s] :
       < O : LENode | eflag : false, max : M,
                      neighbors : S1 >
       (l(M') from SIP to O)
     =>
       (if pr2(M') > pr2(M)
         then < O : LENode | leader : pr1(M'), max : M',
                             neighbors : insert(SIP,S1) >
              (broadcast l(M') from O)
         else if pr2(M') < pr2(M)
                then < O : LENode | neighbors : insert(SIP,S1) >
                     (msg l(M) from O to SIP) 
                else < O : LENode | neighbors : insert(SIP,S1) >
              fi
        fi)
     if not SIP in S1 .
     )

*** L
   crl [on-receiving-leader-4-s-1] :
       < log : Monitor | events : TES:TimedEvents, clock : T:Time >
       < O : LENode | eflag : false, max : M,
                      neighbors : S1 >
       (l(M') from SIP to O)
     =>
       < log : Monitor | events : TES:TimedEvents ; (leader(pr1(M')) @ T:Time), clock : T:Time >
       < O : LENode | leader : pr1(M'), max : M',
                      neighbors : insert(SIP,S1) >
       (broadcast l(M') from O)
       if pr2(M') > pr2(M) .

   crl [on-receiving-leader-4-s-2] :
       < O : LENode | eflag : false, max : M,
                      neighbors : S1 >
       (l(M') from SIP to O)
     =>
       < O : LENode | neighbors : insert(SIP,S1) >
       (msg l(M) from O to SIP) 
       if pr2(M') < pr2(M) .

   crl [on-receiving-leader-4-s-3] :
       < O : LENode | eflag : false, max : M,
                      neighbors : S1 >
       (l(M') from SIP to O)
     =>
       < O : LENode | neighbors : insert(SIP,S1) >
       if pr2(M') == pr2(M) .

endtom)

