    --- This version is for Festschrift Martin Wirsing


load aodv052014.rtmaude

(omod LE-PARAMETERS is
    including MANET-PARAMETERS .

    op ackTime : -> Time .
    eq ackTime = INF .

endom)

(omod LE-SORTS is
    including LE-PARAMETERS . 
    including AODV-SORTS . 

    sort CompIndex .
    sort MaxAck .
    subsort RreqID < CompIndex MaxAck .


endom)

(omod LE-AUX is
    including LE-SORTS .
    protecting AODV-AUX .

    eq pr1(null) = 0 .
    eq pr2(null) = 0 . 

    --- 1st is higher than 2nd
    op higher : CompIndex CompIndex -> Bool .

    vars O O' : Oid .
    vars N N' : Nat .

    eq higher(O ~ N, O' ~ N') = 
       if N > N' 
         then true
         else if N == N'
                then if O > O'
                       then true
                       else false
                     fi
                else false
              fi
       fi .
                      
endom)


(tomod LE-NODE-DEFINITION is
    protecting LE-AUX .
    protecting MANET-NODE-DEFINITION .

    class LENode | leader : Nat,               --- leader
                   parent : Nat,               --- neighbor from whom it receives 1st election msg
---                   neighbors : NeighborSet,    --- direct neighbors
                   value : Nat,                --- metric of leadership. equal to id in this version
                   max : MaxAck,               --- current max ack (id,value). initially set to (id,id) 
                   number : Nat,               --- similar to sequence number
                   src : CompIndex,            --- uniquely identify a diffusing computation
---                   timer : Time,               --- for a heartbeat msg. start a new l.e. upon expire
                   acks : NeighborSet,         --- neighbors haven't replied ack
                   eflag : Bool,               --- whether in an election: "false" means initial value, 
                                               --- or already has a leader 
                   pflag : Bool .              --- whether replied to parent
    subclass LENode < Node .

    
    class SLENode .
    subclass SLENode < StaNode LENode .

    class RWPLENode .
    subclass RWPLENode < RWPNode LENode .

endtom)

(tomod LE-MESSAGE-DEFINITIONS is
    protecting MANET-MESSAGE-DEFINITIONS .
    protecting LE-NODE-DEFINITION .

    msg lebootstrap_ : Oid -> Msg .
     
    op e : CompIndex -> MsgCont [ctor] .
    op a : MaxAck -> MsgCont [ctor] .
    op l : MaxAck -> MsgCont [ctor] .
---    op p :
---    op r :

endtom)

(tomod LE is
    protecting LE-MESSAGE-DEFINITIONS .

    vars S1 S2 S3 S4 : NeighborSet .
    vars I I' : CompIndex .
    vars M M' : MaxAck .
    vars N N' V : Nat .
    var B : Bool .
    vars O O' O'' SIP : Oid . 
    var TI : TimeInf .  
    var T  : Time .
    var MSG : Msg .

    eq mte(lebootstrap O) = 0 .
    eq delta(lebootstrap O,T) = lebootstrap O .

    eq mte(< O : LENode | >) = INF .


    *************************************
    *** Bootstrapping Leader Election ***
    *************************************

    rl [init-leader-election] :
       < O : LENode | eflag : false, pflag : true, 
                      neighbors : S1, number : N >
       (lebootstrap O)
     =>
       < O : LENode | acks : S1, src : O ~ N, number : N + 1, 
                      eflag : true, pflag : false, parent : O > 
       (gpcast e(O ~ N) from O to S1) . 
    

    *****************************
    *** On receiving election ***
    *****************************
    --- s  : source node
    --- ns : non-source node

    --- If O is not in the election process
   crl [on-receiving-election-1-ns] :
       < O : LENode | eflag : false, pflag : true, 
                      neighbors : S1 >
       (e(I) from SIP to O)
     =>
       < O : LENode | src : I, eflag : true, pflag : false, 
                      parent : SIP, neighbors : S2, acks : S3 >
       (if S3 == empty 
          then none 
          else (gpcast e(I) from O to S3) 
        fi)
     if S2 := insert(SIP,S1) /\ S3 := delete(SIP,S2) .


    --- If O is already in an election process
   crl [on-receiving-election-2-s-and-ns] :
       < O : LENode | eflag : true, src : I, neighbors : S1 >
       (e(I') from SIP to O)
     =>
       (if higher(I',I)
          then < O : LENode | src : I', parent : SIP, acks : S3,
                              neighbors : S2, pflag : false >
               (if S3 == empty 
                  then none 
                  else (gpcast e(I) from O to S3) 
                fi)
          else < O : LENode | neighbors : S2 >    
               (msg a(null) from O to SIP)        
        fi)                                       
     if S2 := insert(SIP,S1) /\ S3 := delete(SIP,S2) .    

    --- If I' == I, it also covers the case when the source receives its "e"
    --- If I' < I, SIP is not O's parent, so "pflag" won't change. O only replies "a"
    --- O does not need to tell SIP that I is higher, because later "l" will reach SIP


    ************************
    *** On receiving ack ***
    ************************

   crl [on-receiving-ack-1-s-and-ns] :
       < O : LENode | eflag : true, pflag : false, 
                      neighbors : S1, acks : S2, max : M >
       (a(M') from SIP to O)
     =>
       (if pr2(M') > pr2(M)
         then < O : LENode | neighbors : S3, acks : S4, max : M' >
         else < O : LENode | neighbors : S3, acks : S4 >
       fi)
     if S3 := insert(SIP,S1) /\ S4 := delete(SIP,S2) .

    --- There is an INTERESTING case where the parent did not receive "a"
    --- and considered SIP as disconnected, removing SIP from acks
    --- BUT now it receives "a". 
    --- We handle this by updating neighbors. Note that we can NOT do
    --- S4 := delete(SIP,S3)


    ---
    rl [acks-is-empty] :
       < O : LENode | eflag : true, pflag : false,
                      parent : O', acks : empty, max : M > 
     =>
       if O == O'
         then < O : LENode | leader : pr1(M), eflag : false,
                             pflag : true >
              (broadcast l(M) from O)
         else < O : LENode | pflag : true >
              (msg a(M) from O to O')
       fi .
    


    ---
    rl [on-receiving-ack-2-s-and-ns] :
       < O : LENode | eflag : false, neighbors : S1 >
       (a(M) from SIP to O)
     =>
       < O : LENode | neighbors : insert(SIP,S1) > .
    

    **************************
    *** On receiving error ***
    **************************

    --- Multicast Error
    rl [on-receiving-multicast-error-s-and-ns] :
       < O : LENode | eflag : true, neighbors : S1, acks : S2 >
       (mserror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1), 
                      acks : delete(O',S2) > .


    --- In this version there is no case where 
    --- a node not in a computation will receives "merror"
    --- YES, there is!!!
    ---
    rl [on-receiving-multicast-error-s-and-ns] :
       < O : LENode | eflag : false, neighbors : S1 >
       (mrerror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .


    --- Unicast Error
    --- When a node reports ack, if disconnected, it will receives a "serror".
    --- If it is a child, it then announces itself or max downstream node as the leader;
    --- If it is the source, it ignores the "serror".

    --- This case was NOT specified in the protocol!!!
    ---
    rl [on-receiving-unicast-error-s] :
       < O : LENode | eflag : true, pflag : false, 
                      parent : O, neighbors : S1 >
       (serror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .
    

   crl [on-receiving-unicast-error-ns] :
       < O : LENode | eflag : true, pflag : true, parent : O', 
                      max : M, neighbors : S1 >
       (serror(O') to O)
     =>
       < O : LENode | parent : O, leader : pr1(M), eflag : false, 
                      neighbors : delete(O',S1) >    
       (broadcast l(M) from O) 
     if O' =/= O .


    --- Unspecified!!!
    rl [on-receiving-unicast-error-unspecified] :
       < O : LENode | eflag : true, pflag : false, 
                      parent : O, neighbors : S1 >
       (serror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .


    --- When a node is waiting for ack, if disconneted, it will receives a "rerror".
    rl [on-receiving-unicast-error-s-and-ns] :
       < O : LENode | eflag : true, neighbors : S1, 
                      acks : S2 >
       (rerror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1), 
                      acks : delete(O',S2) > .


    --- When a node O receives a smaller "l" from another node O', 
    --- it will unicast its leader to O' [on-receiving-leader-4-s]
    --- If unicast fails, both O and O' will receive an "error"      
    rl [on-receiving-leader-unicast-error-sender] :
       < O : LENode | eflag : false, neighbors : S1 >
       (serror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .


    rl [on-receiving-leader-unicast-error-receiver] :
       < O : LENode | eflag : false, neighbors : S1 >
       (rerror(O') to O)
     =>
       < O : LENode | neighbors : delete(O',S1) > .


    *******************************
    *** On receiving leader msg ***
    *******************************

    --- Has not received "l"
    rl [on-receiving-leader-1-ns] :
       < O : LENode | eflag : true, pflag : true, 
                      neighbors : S1 >
       (l(M) from SIP to O)
     =>
       < O : LENode | leader : pr1(M), max : M, eflag : false, 
                      neighbors : insert(SIP,S1) >
       (broadcast l(M) from O) .


    --- This case was NOT specified in the protocol!!!
    ---
    rl [on-receiving-leader-2-s] :
       < O : LENode | eflag : true, pflag : false, neighbors : S1 >
       (l(M) from SIP to O)
     =>
       < O : LENode | neighbors : insert(SIP,S1) > .
    

    --- rl [on-receiving-leader-2-ns] ???


    rl [on-receiving-leader-3-s] :
       < O : LENode | eflag : false, max : M,
                      neighbors : (SIP,S1) >
       (l(M') from SIP to O)
     =>
       if pr2(M') > pr2(M)
         then < O : LENode | leader : pr1(M'), max : M' >
              (broadcast l(M') from O)
         else if pr2(M') < pr2(M)
                then < O : LENode | >
                     (broadcast l(M) from O)
                else < O : LENode | >
              fi
       fi .
              

   crl [on-receiving-leader-4-s] :
       < O : LENode | eflag : false, max : M,
                      neighbors : S1 >
       (l(M') from SIP to O)
     =>
       (if pr2(M') > pr2(M)
         then < O : LENode | leader : pr1(M'), max : M',
                             neighbors : insert(SIP,S1) >
              (broadcast l(M') from O)
         else if pr2(M') < pr2(M)
                then < O : LENode | neighbors : insert(SIP,S1) >
                     (msg l(M) from O to SIP) 
                else < O : LENode | neighbors : insert(SIP,S1) >
              fi
        fi)
     if not SIP in S1 .


endtom)

(tomod LE-ANALYSIS is
    protecting LE .
    protecting MANET-ANALYSIS .

    ---
    eq roundTime = 10 .
  

    var SYS : Configuration .
    vars O1 O2 O3 MO LD : Oid .
    vars NBS1 NBS2 NBS3 : NeighborSet . 

    ---
    op desiredState : Oid Oid Oid Configuration -> Bool [frozen (4)] .

    --- In our experiments, we only consider scenarios where the topology keeps 
    --- being one connected component during the whole election process. 
    --- Thus the predicate can be simply defined as the following, which says that
    --- all three nodes share the same leader which is the most-valued one.
   ceq desiredState(O1,O2,O3,< O1 : LENode | leader : MO > 
                             < O2 : LENode | leader : MO >
                             < O3 : LENode | leader : MO > SYS) 
     = true if MO == max(O1,max(O2,O3)) .
    
    eq desiredState(O1,O2,O3,SYS) = false [owise] .

    op desired-state-phase : Oid Oid Oid -> Prop [ctor] .
    eq { SYS } |= desired-state-phase(O1,O2,O3) = desiredState(O1,O2,O3,SYS) .


    var MSG : Msg .
    op consumed : Configuration -> Bool [frozen (1)] .
    eq consumed(MSG SYS) = false .
    eq consumed(SYS) = true [owise] .
    op consumedProp : -> Prop [ctor] .
    eq {SYS} |= consumedProp = consumed(SYS) .


    ---(
    eq SendDelay = 1 .
    eq RecDelay = 0 . 

    eq initConfig = < 1 : LENode | currentLocation : 45 . 45, 
                                   radius : 10,    
                                   leader : 0, parent : 0,              
                                   neighbors : (2,3), value : 1,               
                                   max : 1 ~ 1, number : 1,               
                                   src : null, timer : 0,               
                                   acks : empty, eflag : false,            
                                   pflag : true > 
                    < 2 : LENode | currentLocation : 50 . 50,  
                                   radius : 10,  
                                   leader : 0, parent : 0,              
                                   neighbors : (1,3,5), value : 2,               
                                   max : 2 ~ 2, number : 1,               
                                   src : null, timer : 0,               
                                   acks : empty, eflag : false,            
                                   pflag : true > 
                    < 3 : LENode | currentLocation : 50 . 40,  
                                   radius : 10,  
                                   leader : 0, parent : 0,              
                                   neighbors : (1,2,4), value : 3,               
                                   max : 3 ~ 3, number : 1,               
                                   src : null, timer : 0,               
                                   acks : empty, eflag : false,            
                                   pflag : true > 
                    < 4 : LENode | currentLocation : 60 . 40,  
                                   radius : 10,  
                                   leader : 0, parent : 0,              
                                   neighbors : (3,5), value : 4,               
                                   max : 4 ~ 4, number : 1,               
                                   src : null, timer : 0,               
                                   acks : empty, eflag : false,            
                                   pflag : true > 
                    < 5 : LENode | currentLocation : 60 . 50, 
                                   radius : 10,   
                                   leader : 0, parent : 0,              
                                   neighbors : (2,4), value : 5,               
                                   max : 5 ~ 5, number : 1,               
                                   src : null, timer : 0,               
                                   acks : empty, eflag : false,            
                                   pflag : true > 
                    (lebootstrap 1) . 
    )
    

    ---(
    eq SendDelay = 1 .
    eq RecDelay = 0 . 

    eq initConfig = < 2 : LENode | currentLocation : 50 . 50,  
                                   radius : 10,
                                   leader : 0, parent : 0,              
                                   neighbors : (3,4), value : 2,               
                                   max : 2 ~ 2, number : 1,               
                                   src : null, timer : 0,               
                                   acks : empty, eflag : false,            
                                   pflag : true > 
                    < 3 : LENode | currentLocation : 50 . 40,      
                                   radius : 10,  
                                   leader : 0, parent : 0,              
                                   neighbors : (2,4), value : 3,               
                                   max : 3 ~ 3, number : 1,               
                                   src : null, timer : 0,               
                                   acks : empty, eflag : false,            
                                   pflag : true > 
                    < 4 : LENode | currentLocation : 56 . 45,  
                                   radius : 10,
                                   leader : 0, parent : 0,              
                                   neighbors : (2,3), value : 4,               
                                   max : 4 ~ 4, number : 1,               
                                   src : null, timer : 0,               
                                   acks : empty, eflag : false,            
                                   pflag : true > 
                    (lebootstrap 2) .
    )


    --- Static Unidirectional
    ---(
    eq SendDelay = 1 .
    eq RecDelay = 0 . 

    eq initConfig = < 1 : SLENode | currentLocation : 50 . 60,
                                    radius : 10, neighbors : (2,3),

                                    leader : 0, parent : 0, value : 1, 
                                    max : 1 ~ 1, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    < 2 : SLENode | currentLocation : 60 . 60, 
                                    radius : 30, neighbors : (1,3),

                                    leader : 0, parent : 0, value : 2,                             
                                    max : 2 ~ 2, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    < 3 : SLENode | currentLocation : 50 . 40,  
                                    radius : 20, neighbors : (1,2),

                                    leader : 0, parent : 0, value : 3,               
                                    max : 3 ~ 3, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    (lebootstrap 1) . 
     )


    --- Static Bidirectional
    ---(
    eq SendDelay = 1 .
    eq RecDelay = 0 . 

    eq initConfig = < 1 : SLENode | currentLocation : 50 . 60,
                                    radius : 10, neighbors : (2,3),

                                    leader : 0, parent : 0, value : 1, 
                                    max : 1 ~ 1, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    < 2 : SLENode | currentLocation : 60 . 60, 
                                    radius : 20, neighbors : (1,3),

                                    leader : 0, parent : 0, value : 2,                             
                                    max : 2 ~ 2, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    < 3 : SLENode | currentLocation : 50 . 50,  
                                    radius : 20, neighbors : (1,2),

                                    leader : 0, parent : 0, value : 3,               
                                    max : 3 ~ 3, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    (lebootstrap 1) . 
     )


    --- Mobile Bidirectional
    --- speedRange : (5,10)
    ---(
    eq SendDelay = 1 .
    eq RecDelay = 0 . 
    eq pauseTime = 0 .

    eq initConfig = < 1 : SLENode | currentLocation : 50 . 50,
                                    radius : 10, neighbors : (2,3),

                                    leader : 0, parent : 0, value : 1, 
                                    max : 1 ~ 1, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    < 2 : SLENode | currentLocation : 60 . 50, 
                                    radius : 10, neighbors : (1,3),

                                    leader : 0, parent : 0, value : 2,                             
                                    max : 2 ~ 2, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    < 3 : RWPLENode | currentLocation : 50 . 55,  
                                      radius : 10, neighbors : (1,2),

                                      speed           : 0,
                                      direction       : 0,
                                      destination     : 0 . 0,
                                      speedRange      : (5,10),
                                      destRange       : (60 . 55),
                                      timer           : pauseTime,
                                      status          : pausing,

                                      leader : 0, parent : 0, value : 3,               
                                      max : 3 ~ 3, number : 1, src : null, timer : 0,               
                                      acks : empty, eflag : false, pflag : true > 
                    (lebootstrap 1) . 
     )


    --- speedRange : (10)
    ---
    eq SendDelay = 1 .
    eq RecDelay = 0 . 
    eq pauseTime = 0 .

    eq initConfig = < 1 : SLENode | currentLocation : 50 . 50,
                                    radius : 10, neighbors : (2,3),

                                    leader : 0, parent : 0, value : 1, 
                                    max : 1 ~ 1, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    < 2 : SLENode | currentLocation : 60 . 50, 
                                    radius : 10, neighbors : (1,3),

                                    leader : 0, parent : 0, value : 2,                             
                                    max : 2 ~ 2, number : 1, src : null, timer : 0,               
                                    acks : empty, eflag : false, pflag : true > 
                    < 3 : RWPLENode | currentLocation : 50 . 55,  
                                      radius : 10, neighbors : (1,2),

                                      speed           : 0,
                                      direction       : 0,
                                      destination     : 0 . 0,
                                      speedRange      : (10),
                                      destRange       : (60 . 55),
                                      timer           : pauseTime,
                                      status          : pausing,

                                      leader : 0, parent : 0, value : 3,               
                                      max : 3 ~ 3, number : 1, src : null, timer : 0,               
                                      acks : empty, eflag : false, pflag : true > 
                    (lebootstrap 1) . 
    

endtom) 


---(set tick def delta .)
(set tick max .)

---(tsearch {initConfig} =>! {C:Configuration} with no time limit .)
---(tsearch {initConfig} =>* {C:Configuration} in time <= roundTime .) 

---(tsearch {initConfig} =>* {C:Configuration} 
   --- such that desiredState(1,2,3,C:Configuration) in time <= roundTime .)

---(tsearch {initConfig} =>* {C:Configuration} 
   --- such that enable(C:Configuration) == true in time <= roundTime .)

---(mc {initConfig} |=t <> (desired-state-phase(1,2,3)) with no time limit .)
(mc {initConfig} |=t <> (desired-state-phase(1,2,3)) in time <= roundTime .)

---(mc {initConfig} |=t <> (desired-state-phase(4,2,3)) in time <= roundTime .)

---(mc {initConfig} |=t <>[] (consumedProp) in time <= roundTime .)
