set show advisories off .

***remove: load ../real-time-maude

***add:
load events-query

(tomod L-QUERY is
  inc DELAY .
***add:
  inc EVENTS-QUERY .

***add:
  eq mte(< log : Monitor | >) = INF . 
  eq delta(< log : Monitor | >, T:Time) = < log : Monitor | > .
  

  vars O O' TB : Oid .  vars QS QS' : Queries .
  var OS : Oids .  var R : Map{Key,Oids} .
  var K : Key .
  var DB : Map{Key,Data} .  vars V V' : Value .
  var P : Payload .  vars DAT DAT' : Data .  
  vars TS TS' : Timestamp .  var ID : Id .
  var RS : Map{Id,Data} .  
  var Q : Query .
  vars CLS SS : Map{Id,Oids} .
  
***monitor
  rl [delegate] : 
     < log : Monitor | events : ES:Events >
     (to O : startQuery)
     < O : Client | queries : (query(ID,K) :: QS), servers : (O' ; OS) >
   =>
     < log : Monitor | events : (ES:Events ; proxy(O')) >
     < O : Client | queries : QS, servers : (O' ; OS) >  
	 dly((to O' from O : query(ID,K)),md) .
	 

  rl [propagate] :
     (to O from O' : query(ID,K))
     < O : Server | executing : QS, waiting : SS,
	                replicas : R, clients : CLS >   
   =>
     < O : Server | executing : (QS :: query(ID,K)), waiting : insert(ID,R[K],SS), 
	                replicas : R, clients : insert(ID,O',CLS) >
     (propagate read(ID,K) to R[K] from O) .  
 
 
  op propagate_to_from_ : Query Oids Oid -> Configuration .
  eq propagate Q to (O ; OS) from O'
   = (propagate Q to OS from O') 
     dly((to O from O' : Q),md) .
  eq propagate Q to empty from O' = none . 

***monitor
  rl [reply] :
     < log : Monitor | events : ES:Events >
     (to O from O' : read(ID,K)) 
     < O : Server | database : DB >
  => 
     < log : Monitor | events : (ES:Events ; replicaValue(ID,DB[K])) >
     < O : Server | database : DB > 
     dly(to O' from O : reply(ID,DB[K]),md) .  
 

  rl [update] :
     (to O from O' : reply(ID,DAT')) 
     < O : Server | waiting : (SS, ID |-> (O' ; OS)), results : RS >
  => 
     < O : Server | waiting : (SS, ID |-> OS), results : latest(ID,DAT',RS) > .
	 

  op latest : Id Data Map{Id,Data} -> Map{Id,Data} .
  eq latest(ID,DAT',(RS, ID |-> DAT)) 
   = RS, ID |-> fresher(DAT,DAT') .
  eq latest(ID,DAT',RS) = insert(ID,DAT',RS) [owise] .
  
  op fresher : Data Data -> Data .
  eq fresher(< V,TS >,null) = < V,TS > .
  eq fresher(null,< V,TS >) = < V,TS > .
  eq fresher(< V,TS >,< V',TS' >) = if TS >= TS' then < V,TS > else < V',TS' > fi .   
	 
***monitor
  rl [ack] :
     < log : Monitor | events : ES:Events >
     < O : Server | executing : (QS :: query(ID,K) :: QS'), waiting : (SS, ID |-> empty), 
	                clients : (CLS, ID |-> O'), results : (RS, ID |-> DAT) >
  => 
     < log : Monitor | events : (ES:Events ; returnedValue(ID,DAT)) >
     < O : Server | executing : (QS :: QS'), waiting : SS,
	                clients : CLS, results : RS > 
     dly(to O' : startQuery,md) .
	 
  rl [finish] :
     (to O : startQuery)
     < O : Client | queries : ept >
   =>
     < O : Client | queries : ept > .

endtom)
