*** L-added starts here
load events-query

*** name change
*** add inc EVENTS-QUERY .
mod L-QUERY is inc EVENTS-QUERY .
  inc OBJS .
  
  vars O O' TB : Oid .  vars QS QS' : Queries .
  var OS : Oids .  var R : Map{Key,Oids} .
  vars AS AS' : Attributes .  var K : Key .
  var DB : Map{Key,Data} .  vars V V' : Value .
  var P : Payload .  vars DAT DAT' : Data .  
  vars TS TS' : Timestamp .  var ID : Id .
  var RS : Map{Id,Data} .  
  var Q : Query .
  vars CLS SS : Map{Id,Oids} .
 

  
*** Monitor 
  rl [delegate] : 
     < log : Monitor | events: ES:Events >  
     (to O : startQuery)
     < O : Client | queries: (query(ID,K) :: QS), servers: (O' ; OS), AS >
   =>
     < log : Monitor | events: (ES:Events ; startQuery(ID) ; proxy(O')) >
     < O : Client | queries: QS, servers: (O' ; OS), AS >  
	 (to O' from O : query(ID,K)) .
	 

  rl [propagate] :
     (to O from O' : query(ID,K))
     < O : Server | executing: QS, waiting: SS,
	                replicas: R, clients: CLS, AS >   
   =>
     < O : Server | executing: (QS :: query(ID,K)), waiting: insert(ID,R[K],SS), 
	                replicas: R, clients: insert(ID,O',CLS), AS >
     (propagate read(ID,K) to R[K] from O) .  
 
 
  op propagate_to_from_ : Query Oids Oid -> Msgs .
  eq propagate Q to (O ; OS) from O' = (propagate Q to OS from O') (to O from O' : Q) .
  eq propagate Q to empty from O' = null . 
  

  rl [reply] :
     (to O from O' : read(ID,K)) 
     < O : Server | database: DB, AS >
  => 
     < O : Server | database: DB, AS > 
     (to O' from O : reply(ID,DB[K])) .  

*** Monitor 
  rl [update] :
     < log : Monitor | events: ES:Events >
     (to O from O' : reply(ID,DAT')) 
     < O : Server | waiting: (SS, ID |-> (O' ; OS)), results: RS, AS >
  => 
     < log : Monitor | events: (ES:Events ; replicaValue(ID,DAT')) >
     < O : Server | waiting: (SS, ID |-> OS), results: latest(ID,DAT',RS), AS > .
	 

  op latest : Id Data Map{Id,Data} -> Map{Id,Data} .
  eq latest(ID,DAT',(RS, ID |-> DAT)) 
   = RS, ID |-> fresher(DAT,DAT') .
  eq latest(ID,DAT',RS) = insert(ID,DAT',RS) [owise] .
  
  op fresher : Data Data -> Data .
  eq fresher(< V,TS >,null) = < V,TS > .
  eq fresher(null,< V,TS >) = < V,TS > .
  eq fresher(< V,TS >,< V',TS' >) = if TS >= TS' then < V,TS > else < V',TS' > fi .   
	 
   
  rl [return] :
     < O : Server | executing: (QS :: query(ID,K) :: QS'), waiting: (SS, ID |-> empty), 
	                clients: (CLS, ID |-> O'), results: (RS, ID |-> DAT), AS >
  => 
     < O : Server | executing: (QS :: QS'), waiting: SS,
	                clients: CLS, results: RS, AS > 
     (to O' from O : reply(ID,DAT)) .
   	 
*** Monitor 	 
  rl [finish] :
     < log : Monitor | events: ES:Events >
     (to O from O' : reply(ID,DAT))
     < O : Client | results: RS, AS  >
  =>
     < log : Monitor | events: (ES:Events ; (returnedValue(ID,DAT) ; finishQuery(ID))) >
     < O : Client | results: insert(ID,DAT,RS), AS >
     (to O : startQuery) .	 
		 

  rl [silient] :
     (to O : startQuery)
     < O : Client | queries: ept, AS  >
  =>
     < O : Client | queries: ept, AS > .	 
endm