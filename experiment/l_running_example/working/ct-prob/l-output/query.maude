load ../apmaude
load ../sampling-lib

mod SORTS is
  inc SCHEDULER .
  pr NAT .
  
  sorts Query Queries Key Value Timestamp Data Oids Id .
  subsort Data < Content .
  subsort Nat < Timestamp .
  subsort Nat < Value .
  subsort Query < Queries < Content .
  subsort Address < Oids .
  subsort Nat < Id .

  op <_`,_> : Value Timestamp -> Data [ctor] .
  op null : -> Data .
  
  op query : Id Key -> Query .
  op read : Id Key -> Query .
  
  op ept : -> Queries .
  op _::_ : Queries Queries -> Queries [assoc id: ept] .

  op empty : -> Oids .
  op _;_ : Oids Oids -> Oids [assoc comm id: empty] .  
  
  op reply : Id Data -> Content .
  
  ops md sd : -> Float .
endm
view Key from TRIV to SORTS is sort Elt to Key . endv
view Data from TRIV to SORTS is sort Elt to Data . endv
view Oids from TRIV to SORTS is sort Elt to Oids . endv
view Id from TRIV to SORTS is sort Elt to Id . endv

mod OBJS is
  inc SORTS .
  pr MAP{Key,Data} .
  pr MAP{Key,Oids} .
  pr MAP{Id,Data} .
  pr MAP{Id,Oids} .
***
  pr MAP{Address,Float} .
  
  ops Client Server : -> ActorType .
  
  op queries:_ : Queries -> Attribute .
  op waiting:_ : Map{Id,Oids}  -> Attribute .
  op replicas:_ : Map{Key,Oids} -> Attribute .  
  op results:_ : Map{Id,Data} -> Attribute .
  op database:_ : Map{Key,Data} -> Attribute .
  
***  
  op servers:_ : Map{Address,Float} -> Attribute .
  
  op clients:_ : Map{Id,Oids} -> Attribute .
   
  op executing:_ : Queries -> Attribute . 
  
  op startQuery : -> Content .
endm


mod QUERY is
  inc OBJS .
  inc SAMPLING-LIB .
  ---(
  vars O O' O'' : Address .  vars QS QS' : Queries .
  var OS : Oids .  var R : Map{Key,Oids} .
  vars AS AS' : AttributeSet .  var K : Key .
  var DB : Map{Key,Data} .  vars V V' : Value .
  var P : Content .  vars DAT DAT' : Data .  
  vars TS TS' : Timestamp .  var ID : Id .
  var RS : Map{Id,Data} .  
  var Q : Query .
  vars CLS SS : Map{Id,Oids} .
  var LOAD : Map{Address,Float} .
  vars COUNT RAND F1 F2 F3 : Float .
  var GT : Float .
  var AC : ActorConfig .
    
  
  rl [delegate] : 
     {GT, to O : startQuery}
     < O : Client | queries: (query(ID,K) :: QS), servers: LOAD, AS >
   =>
     < O : Client | queries: QS, servers: incr(localBalancedServer(LOAD),LOAD), AS >  
	 [md, to localBalancedServer(LOAD) from O : query(ID,K)] .
	 
  op incr : Address Map{Address,Float} -> Map{Address,Float} .
  eq incr(O,(LOAD, O |-> COUNT)) = LOAD, O |-> (COUNT + 1.0) .
  
  op localBalancedServer : Map{Address,Float} -> Address .
  op localBalancedServer : Map{Address,Float} Float Float -> Address .
  eq localBalancedServer(LOAD) = localBalancedServer(LOAD,rand,totalLoads(LOAD)) . 
  eq localBalancedServer((O |-> F1, O' |-> F2, O'' |-> F3),RAND,COUNT)
   = if RAND < F1 / COUNT
       then O
	   else if RAND < F1 / COUNT + F2 / COUNT
	          then O'
			  else O''
			fi
	 fi .
  
  op totalLoads : Map{Address,Float} -> Float .
  eq totalLoads((LOAD, O |-> COUNT)) = totalLoads(LOAD) + COUNT .
  eq totalLoads(empty) = 0.0 .
  	 

  rl [propagate] :
     {GT, to O from O' : query(ID,K)}
     < O : Server | executing: QS, waiting: SS,
	                replicas: R, clients: CLS, AS >   
   =>
     < O : Server | executing: (QS :: query(ID,K)), waiting: insert(ID,R[K],SS), 
	                replicas: R, clients: insert(ID,O',CLS), AS >
     (propagate read(ID,K) to R[K] from O) .  
 
 
  op propagate_to_from_ : Query Oids Address -> Config .
  eq propagate Q to (O ; OS) from O' = (propagate Q to OS from O') 
     [md, (to O from O' : Q)] .
  eq propagate Q to empty from O' = null . 
  

  rl [reply] :
     {GT, to O from O' : read(ID,K)}
     < O : Server | database: DB, AS >
  => 
     < O : Server | database: DB, AS > 
     [md, to O' from O : reply(ID,DB[K])] .  
 

  rl [update] :
     {GT, to O from O' : reply(ID,DAT')}
     < O : Server | waiting: (SS, ID |-> (O' ; OS)), results: RS, AS >
  => 
     < O : Server | waiting: (SS, ID |-> OS), results: latest(ID,DAT',RS), AS > .
	 

  op latest : Id Data Map{Id,Data} -> Map{Id,Data} .
  eq latest(ID,DAT',(RS, ID |-> DAT)) 
   = RS, ID |-> fresher(DAT,DAT') .
  eq latest(ID,DAT',RS) = insert(ID,DAT',RS) [owise] .
  
  op fresher : Data Data -> Data .
  eq fresher(< V,TS >,null) = < V,TS > .
  eq fresher(null,< V,TS >) = < V,TS > .
  eq fresher(< V,TS >,< V',TS' >) = if TS >= TS' then < V,TS > else < V',TS' > fi .   
	 

  rl [ack] :
     < O : Server | executing: (QS :: query(ID,K) :: QS'), waiting: (SS, ID |-> empty), 
	                clients: (CLS, ID |-> O'), results: (RS, ID |-> DAT), AS >
  => 
     < O : Server | executing: (QS :: QS'), waiting: SS,
	                clients: CLS, results: RS, AS > 
     [md, to O' : startQuery] .

  *** do NOT forget AC
  eq eagerEnabled(AC < O : Server | executing: (QS :: query(ID,K) :: QS'), waiting: (SS, ID |-> empty), 
	                                clients: (CLS, ID |-> O'), results: (RS, ID |-> DAT), AS >) 
   = true .


  rl [finish] :
     {GT, to O : startQuery}
     < O : Client | queries: ept, AS >
   =>
     < O : Client | queries: ept, AS > .
  )
endm
