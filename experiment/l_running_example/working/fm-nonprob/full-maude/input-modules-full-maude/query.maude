(omod SORTS is
  pr NAT .

  sort Payload .
  op startQuery : -> Payload .
  
  sorts Query Queries Key Value Timestamp Data Oids Id .
  subsort Data < Payload .
  subsort Nat < Timestamp .
  subsort Nat < Value .
  subsort Query < Queries < Payload .
  subsort Oid < Oids .
  subsort Nat < Id .

  op <_`,_> : Value Timestamp -> Data [ctor] .
  op null : -> Data .
  
  op query : Id Key -> Query .
  op read : Id Key -> Query .
  
  op ept : -> Queries .
  op _::_ : Queries Queries -> Queries [assoc id: ept] .

  op empty : -> Oids .
  op _;_ : Oids Oids -> Oids [assoc comm id: empty] .  
  
  op reply : Id Data -> Payload .
endom)
(view Key from TRIV to SORTS is sort Elt to Key . endv)
(view Data from TRIV to SORTS is sort Elt to Data . endv)
(view Oids from TRIV to SORTS is sort Elt to Oids . endv)
(view Id from TRIV to SORTS is sort Elt to Id . endv)


(omod OBJS is
  inc SORTS .
  pr MAP{Key,Data} .
  pr MAP{Key,Oids} .
  pr MAP{Id,Data} .
  pr MAP{Id,Oids} .

  class Client | queries : Queries,
                 servers : Oids,
				 results : Map{Id,Data} .

  class Server | waiting : Map{Id,Oids},
                 replicas : Map{Key,Oids},
                 results : Map{Id,Data},
                 database : Map{Key,Data},
                 clients : Map{Id,Oids},
                 executing : Queries .

  msg to_from_:_ : Oid Oid Payload -> Msg .
  msg to_:_      : Oid Payload     -> Msg .
endom)

(omod QUERY is
  inc OBJS .
  
  vars O O' TB : Oid .  vars QS QS' : Queries .
  var OS : Oids .  var R : Map{Key,Oids} .
  var K : Key .
  var DB : Map{Key,Data} .  vars V V' : Value .
  var P : Payload .  vars DAT DAT' : Data .  
  vars TS TS' : Timestamp .  var ID : Id .
  var RS : Map{Id,Data} .  
  var Q : Query .
  vars CLS SS : Map{Id,Oids} .
  

  rl [delegate] : 
     (to O : startQuery)
     < O : Client | queries : (query(ID,K) :: QS), servers : (O' ; OS) >
   =>
     < O : Client | queries : QS, servers : (O' ; OS) >  
	 (to O' from O : query(ID,K)) .
	 

  rl [propagate] :
     (to O from O' : query(ID,K))
     < O : Server | executing : QS, waiting : SS,
	                replicas : R, clients : CLS >   
   =>
     < O : Server | executing : (QS :: query(ID,K)), waiting : insert(ID,R[K],SS), 
	                replicas : R, clients : insert(ID,O',CLS) >
     (propagate read(ID,K) to R[K] from O) .  
 
 
  op propagate_to_from_ : Query Oids Oid -> Configuration .
  eq propagate Q to (O ; OS) from O'
   = (propagate Q to OS from O') 
     (to O from O' : Q) .
  eq propagate Q to empty from O' = none . 


  rl [reply] :
     (to O from O' : read(ID,K)) 
     < O : Server | database : DB >
  => 
     < O : Server | database : DB > 
     to O' from O : reply(ID,DB[K]) .  
 

  rl [update] :
     (to O from O' : reply(ID,DAT')) 
     < O : Server | waiting : (SS, ID |-> (O' ; OS)), results : RS >
  => 
     < O : Server | waiting : (SS, ID |-> OS), results : latest(ID,DAT',RS) > .
	 

  op latest : Id Data Map{Id,Data} -> Map{Id,Data} .
  eq latest(ID,DAT',(RS, ID |-> DAT)) 
   = RS, ID |-> fresher(DAT,DAT') .
  eq latest(ID,DAT',RS) = insert(ID,DAT',RS) [owise] .
  
  op fresher : Data Data -> Data .
  eq fresher(< V,TS >,null) = < V,TS > .
  eq fresher(null,< V,TS >) = < V,TS > .
  eq fresher(< V,TS >,< V',TS' >) = if TS >= TS' then < V,TS > else < V',TS' > fi .   
	 

  rl [return] :
     < O : Server | executing : (QS :: query(ID,K) :: QS'), waiting : (SS, ID |-> empty), 
	                clients : (CLS, ID |-> O'), results : (RS, ID |-> DAT) >
  => 
     < O : Server | executing : (QS :: QS'), waiting : SS,
	                clients : CLS, results : RS > 
     (to O' from O : reply(ID,DAT)) .
	 
	 
  rl [finish] :
     (to O from O' : reply(ID,DAT))
     < O : Client | results : RS >
   =>
     < O : Client | results : insert(ID,DAT,RS) >
	 (to O : startQuery) .
	 
  rl [silient] :
     (to O : startQuery)
     < O : Client | queries : ept >
  =>
     < O : Client | queries : ept > .	

endom)
