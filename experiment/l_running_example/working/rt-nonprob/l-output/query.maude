(omod SORTS is
  pr NAT .

  sort Payload .
  op startQuery : -> Payload .
  
  sorts Query Queries Key Value Timestamp Data Oids Id .
  subsort Data < Payload .
  subsort Nat < Timestamp .
  subsort Nat < Value .
  subsort Query < Queries < Payload .
  subsort Oid < Oids .
  subsort Nat < Id .

  op <_`,_> : Value Timestamp -> Data [ctor] .
  op null : -> Data .
  
  op query : Id Key -> Query .
  op read : Id Key -> Query .
  
  op ept : -> Queries .
  op _::_ : Queries Queries -> Queries [assoc id: ept] .

  op empty : -> Oids .
  op _;_ : Oids Oids -> Oids [assoc comm id: empty] .  
  
  op reply : Id Data -> Payload .
endom)
(view Key from TRIV to SORTS is sort Elt to Key . endv)
(view Data from TRIV to SORTS is sort Elt to Data . endv)
(view Oids from TRIV to SORTS is sort Elt to Oids . endv)
(view Id from TRIV to SORTS is sort Elt to Id . endv)


(omod OBJS is
  inc SORTS .
  pr MAP{Key,Data} .
  pr MAP{Key,Oids} .
  pr MAP{Id,Data} .
  pr MAP{Id,Oids} .

  class Client | queries : Queries,
                 servers : Oids,
				 results : Map{Id,Data} .

  class Server | waiting : Map{Id,Oids},
                 replicas : Map{Key,Oids},
                 results : Map{Id,Data},
                 database : Map{Key,Data},
                 clients : Map{Id,Oids},
                 executing : Queries .

  msg to_from_:_ : Oid Oid Payload -> Msg .
  msg to_:_      : Oid Payload     -> Msg .
endom)

(tomod DELAY is
  pr NAT-TIME-DOMAIN-WITH-INF .
  inc OBJS .

  op md : -> Nat .

  vars O O' : Oid .
  vars C REST : Configuration .
  var TI : TimeInf .  
  vars T T'  : Time .
  var MSG : Msg .
  var MC : Payload .

  *** dly
  op dly : Msg TimeInf -> Msg [ctor right id: 0] .


  *** mte
  op mte : Configuration -> TimeInf [frozen(1)] .

  eq mte(none) = INF .
  eq mte(NEC:NEConfiguration NEC':NEConfiguration) 
   = min(mte(NEC:NEConfiguration), mte(NEC':NEConfiguration)) .
  eq mte(< O : Client | >) = INF . 
  eq mte(< O : Server | >) = INF . 
  ---eq mte(REST) = INF [owise] .
  eq mte(dly(MSG,TI)) = TI .


  *** delta
  op delta : Configuration Time -> Configuration [frozen (1)] .

  eq delta(none, T) = none . 
  eq delta(NEC:NEConfiguration NEC':NEConfiguration, T) = 
       delta(NEC:NEConfiguration, T) delta(NEC':NEConfiguration, T) . 
  ---eq delta(REST, T) = REST [owise] .
  eq delta(< O : Client | >, T) = < O : Client | > .
  eq delta(< O : Server | >, T) = < O : Server | > .
  eq delta(dly(MSG,TI),T) = dly(MSG, TI monus T) .


  *** tick rule
 crl [tick] : 
     {C} 
   => 
     {delta(C,T)} in time T 
     if T <= mte(C) [nonexec] .
endtom)

*** tool removes QUERY