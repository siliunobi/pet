load protocol

mod INIT-STATE is
  inc TOKEN-RING-MUTEX .
  
  op init : Nat -> Config .
  eq init(3) = { 0.0 | nil } < 0 : Monitor | delays: empty,
                                               nodes: (1 ;; 2 ;; 3) >
            [0.0, start to 0]      
            < 1 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (1 ; 2), accessGranted: false >
            < 2 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (2 ; 3), accessGranted: false >
            < 3 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (1 ; 3), accessGranted: false > .
						 
  eq init(7) = { 0.0 | nil } < 0 : Monitor | delays: empty,
                                               nodes: (1 ;; 2 ;; 3 ;; 4 ;; 5 ;; 6 ;; 7) >
            [0.0, start to 0]      
            < 1 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (1 ; 2 ; 3), accessGranted: false >
            < 2 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (2 ; 4 ; 6), accessGranted: false >
            < 3 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (3 ; 5 ; 6), accessGranted: false > 
            < 4 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (1 ; 4 ; 5), accessGranted: false >
            < 5 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (2 ; 5 ; 7), accessGranted: false >
            < 6 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (1 ; 6 ; 7), accessGranted: false > 
            < 7 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (3 ; 4 ; 7), accessGranted: false > .
						 
  eq init(13) = { 0.0 | nil } < 0 : Monitor | delays: empty,
                                               nodes: (1 ;; 2 ;; 3 ;; 4 ;; 5 ;; 6 ;; 7 ;; 8 ;; 9 ;; 10 ;; 11 ;; 12 ;; 13) >
            [0.0, start to 0]      
            < 1 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (1 ; 2 ; 3 ; 4), accessGranted: false >
            < 2 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (2 ; 5 ; 8 ; 11), accessGranted: false >
            < 3 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (3 ; 6 ; 8 ; 13), accessGranted: false > 
            < 4 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (4 ; 6 ; 10 ; 11), accessGranted: false >
            < 5 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (1 ; 5 ; 6 ; 7), accessGranted: false >
            < 6 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (2 ; 6 ; 9 ; 12), accessGranted: false > 
            < 7 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (2 ; 7 ; 10 ; 13), accessGranted: false > 
            < 8 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (1 ; 8 ; 9 ; 10), accessGranted: false >
            < 9 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (3 ; 7 ; 9 ; 11), accessGranted: false >
            < 10 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (3 ; 5 ; 10 ; 12), accessGranted: false > 
            < 11 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (1 ; 11 ; 12 ; 13), accessGranted: false >
            < 12 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (4 ; 7 ; 8 ; 12), accessGranted: false >
            < 13 : Node | state: outsideCS, queue: emptyAddrList,
	                     votingSet: (4 ; 5 ; 9 ; 13), accessGranted: false > .
endm

mod TEST is
  inc INIT-STATE + APMAUDE .
  
  eq LIMIT = Infinity .
	
  op initConfig : -> Config .
  eq initConfig = run(initState,LIMIT) .
  eq initState = init(3) .

  *** Metric
  vars O O' M : Address .
  var OS : AddressSet .
  var C : Config .
  var AS : AttributeSet .
  vars WT WT' : WaitTimes .
  vars T T' : Float .

  op deadlock : Config -> Float .
  eq deadlock(< O : Node | state: waitForCS(O' ; OS), AS > C) = 1.0 .
  eq deadlock(C) = 0.0 [owise] .
  
  ***
  op avgWait : Config -> Float .
 ceq avgWait(< M : Monitor | delays: WT, AS > C)
   = totalWaitTime(WT') / totalWaitNodes(WT') 
     if WT' := noDeadLocked(WT,C) .
	 
  op noDeadLocked : WaitTimes Config -> WaitTimes .
  eq noDeadLocked((WT ; < O,T >),(< O : Node | state: waitForCS(O' ; OS), AS > C))
   = noDeadLocked(WT,(< O : Node | state: waitForCS(O' ; OS), AS > C)) .
  eq noDeadLocked((WT ; < O,T >),C) = noDeadLocked(WT,C) ; < O,T > [owise] .
  eq noDeadLocked(empty,C) = empty .
  
  
  op totalWaitTime : WaitTimes -> Float .
  eq totalWaitTime(WT ; < O,T >) = T + totalWaitTime(WT) .
  eq totalWaitTime(empty) = 0.0 .
  
  op totalWaitNodes : WaitTimes -> Float .
  eq totalWaitNodes(WT ; < O,T >) = 1.0 + totalWaitNodes(WT) .
  eq totalWaitNodes(empty) = 0.0 .
  
 
  --- PVESTA interfaces
  eq val(0,C) = deadlock(C) .
  eq val(1,C) = avgWait(C) .
endm

---set clear rules off .
---rew initConfig . 