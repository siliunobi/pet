load aux

  *** Events
  *** reservation and deletion msg creation:
  --- 1. CRTR done
  --- 2. CRTD to do
  *** arrival of reservation msg:
  --- 3. FWD done 
  --- 4. CMP done
  --- 5. TRN done
  --- 6. UPT done
  --- 7. BWD done
  --- 8. FIN done
  *** arrival of deletion msg:
  --- 9. RMV to do
  --- 10. DST to do
  *** drop at any arrival of reservation or deletion msg:
  --- 11. DRP done
  *** attack events:
  --- 12. ATK to do
  --- 13. CLT to do
  *** time progress
  --- 14. TCK done in apmaude.maude
  *** reversation expiration 
  --- 15. RST done

mod N-TUBE is
  inc NODE + MSG + PARAMETERS + AUX .

  vars O O' O'' TB IN E M SRC : Address .
  vars T MINBW MAXBW MAXT CAP CAP' AVAIL IDEAL IDBW EXPT RESBW RESBW' FL FL1 FL2 FL3 EXP SINK : Float .
  vars REST REST' : AttributeSet .
  vars SQN SQN' INDEX INDEX' PTR PTR' FIRST FIRST' LAST LAST' : Nat .
  var PP : PathPool .
  vars P P' P'' SEG AL AL' : AddrList .
  var RID : ReservationId .
  vars ACCBW ACCBW' : AccBW .
  vars RM RM' : ReservationMap .
  vars ES INS : Interfaces .
  var CS : Contents .
  var VM : VersionMap .
  var SL : ScheduleList .
  var CONF : Config .
  vars RS RS' : Map{ReservationId,Snapshots} .
  var SS : Snapshots .
  var SCH : Scheduler .
  var AC : ActorConfig .
  var A : Actor .
  vars T1 GT : Float .
  var M1 : Msg .
  var VRL : VerRecordList .
  vars N N' : Nat .
  vars LS LS' : Links .
  vars L INL EL : Link .
  var CONT : Content .
  var RR : RsvRecord .
  var RES : Reservation .
  var VR : VerRecord .

  --- trigger to create reservations
  rl [trigger] :
     < TB : Table | paths: PP, REST >
     {T, start to TB}
  =>
     < TB : Table | paths: PP, REST >
     crtr(PP,resPerSrc) .  --- #paths/reservations chosen
	 
********* could be NOT ALL, but SOME
  ---(
  --- generate reservations for ALL paths
  op crtr : PathPool Nat -> Config .
  eq crtr((O ; AL) ;; PP) 
   = crtr(PP) [0.0, crtr((O ; AL),AL,minBW,maxBW,maxT,O), 0] .  --- assuming a segment starts from 2nd node in a (generated) path
  eq crtr(ept) = null .
  )
  
  sorts Pair Pairs .
  subsort Pair < Pairs .
  op <_;_> : Address Nat -> Pair .
  op ept : -> Pairs .
  op _;_ : Pairs Pairs -> Pairs [ctor assoc comm id: ept] .
  
  sort PathList .
  subsort AddrList < PathList .
  op eptPathList : -> PathList .
  op _;;;_ : PathList PathList -> PathList [ctor assoc id: eptPathList] .
  
  var PAIRS : Pairs .
  vars PL PL' : PathList .
  
  op pathPoolToList : PathPool -> PathList .
  eq pathPoolToList((O ; AL) ;; PP) = (O ; AL) ;;; pathPoolToList(PP) .
  eq pathPoolToList(ept) = eptPathList .
  
  op size : PathList -> Nat .
  eq size(AL ;;; PL) = s size(PL) .
  eq size(eptPathList) = 0 .
  
  op notExist : Address Pairs -> Bool .
  eq notExist(O,(PAIRS ; < O ; N >)) = false .
  eq notExist(O,PAIRS) = true [owise] .
  
  op nth : PathList Nat -> AddrList .
 ceq nth((AL ;;; PL),s N) = nth(PL,N) if N >= 1 .
  eq nth((AL ;;; PL),1) = AL .
  
  
  op crtr : PathPool Nat -> Config .
  op crtr : PathList Nat Pairs -> Config .
  op $crtr : PathList Nat Pairs AddrList -> Config .
  
  eq crtr(PP,N) = crtr(pathPoolToList(PP),N,ept) .
  eq crtr(PL,N,PAIRS) = $crtr(PL,N,PAIRS,nth(PL,sampleUniWithInt(size(PL)) + 1)) .
 ceq $crtr((PL ;;; (O ; AL) ;;; PL'),N,(PAIRS ; < O ; N' >),(O ; AL))
   = $crtr((PL ;;; PL'),N,(PAIRS ; < O ; s N' >),
     (if (PL ;;; PL') == eptPathList then empty 
	    else nth((PL ;;; PL'),sampleUniWithInt(size(PL ;;; PL')) + 1) fi))
     [0.0, crtr((O ; AL),AL,minBW,maxBW,maxT,O), 0]
     if N' < N . 
 ceq $crtr((PL ;;; (O ; AL) ;;; PL'),N,PAIRS,(O ; AL))
   = $crtr((PL ;;; PL'),N,(PAIRS ; < O ; 1 >),
     (if (PL ;;; PL') == eptPathList then empty 
	    else nth((PL ;;; PL'),sampleUniWithInt(size(PL ;;; PL')) + 1) fi))
     [0.0, crtr((O ; AL),AL,minBW,maxBW,maxT,O), 0]
     if notExist(O,PAIRS) . 
 ceq $crtr((PL ;;; (O ; AL) ;;; PL'),N,(PAIRS ; < O ; N' >),(O ; AL))
   = $crtr((PL ;;; PL'),N,(PAIRS ; < O ; s N' >),
     (if (PL ;;; PL') == eptPathList then empty 
	    else nth((PL ;;; PL'),sampleUniWithInt(size(PL ;;; PL')) + 1) fi))
     if N' >= N . 	 	 
  eq $crtr(eptPathList,N,PAIRS,AL) = null .
  
  
   

  --- 1. CRTR
  --- randomly cut off a segment of the path
  rl [crtr] :
     < M : Monitor | snapshots: RS, REST' >
     < O : Node | sqn: SQN, reservationMap: RM, REST >
     {T, crtr(P,SEG,MINBW,MAXBW,MAXT,O)}
  => 
     < M : Monitor | snapshots: insert(r(O,SQN),< T undefined dest(P) >,RS), REST' >
     < O : Node | sqn: (SQN + 2), 
	              reservationMap: insert(r(O,SQN),[P,0,first(SEG,P),last(SEG,P),
                                  (SQN + 1) |-> < MINBW, MAXBW, undefined, MAXT, undefined >],RM), REST >
     [mDelay, reserve(r(O,SQN),(SQN + 1),1,first(SEG,P),last(SEG,P),P,MINBW,MAXBW,MAXT,ept) 
              from O to next(O,P), drop?] 
	 [rnDelay, renew(r(O,SQN),P,SEG,MINBW,MAXBW,MAXT,O), drop?] .  --- renew a reservation	  
		
			  
  ---(
  --- 15. RST 
  ---genReset(MAXT,r(O,SQN),s SQN,P)       
  --- removal UPON expired
  op genReset : Float ReservationId Nat Path -> Config .
  eq genReset(MAXT,RID,INDEX,([IN,O,E] P))
   = genReset(MAXT,RID,INDEX,P) [MAXT, reset(RID,INDEX) to O, 0] .
  eq genReset(MAXT,RID,INDEX,ept) = null .    
  )
  
  --- first node of a segment
  op first : AddrList AddrList -> Nat .
  eq first(P,(P' ; P ; P'')) = length(P') . 
 
  op length : AddrList -> Nat .
  eq length(O ; P) = length(P) + 1 .
  eq length(empty) = 0 .
   
  op next : Address AddrList -> Address .
  eq next(O,(P ; O ; O' ; P')) = O' . 
  eq next(O,P) = null [owise] .  --- O is the last node, or there's only one node on a path
  
  --- last node of a segment
  op last : AddrList AddrList -> Nat .
 ceq last(P,(P' ; P ; P'')) = N if (s N) := length(P') + length(P) .
  

  ---
  --- RENEW
  rl [renew] :
     < O : Node | sqn: SQN, reservationMap: (RID |-> [P,PTR,FIRST,LAST,VM],RM), REST >
     {T, renew(RID,P,SEG,MINBW,MAXBW,MAXT,O)}
  => 
     < O : Node | sqn: s SQN, 
	              reservationMap: (RID |-> [P,PTR,FIRST,LAST,insert(SQN,< MINBW,MAXBW,undefined,MAXT,undefined >,VM)],RM), REST >	  
     [mDelay, reserve(RID,SQN,1,first(SEG,P),last(SEG,P),P,MINBW,MAXBW,MAXT,ept) 
              from O to next(O,P), drop?]
	 [rnDelay, renew(RID,P,SEG,MINBW,MAXBW,MAXT,O), drop?] .  --- repeatly renew a reservation	    
  
  

  ---(	  
  --- 2. CRTD
  crl < O : Node |  >
      {T, crtd(O)}
	=>
	  < O : Node | >
	  [mDelay, delete(RID,INDEX)] --- randomly pick one of the indexes 
  )


  --- 3. FWD
  --- the node receiving the reservation is before the first
  --- if the node is the source, see rule [crtr]
 crl [fwd] :
     < O : Node | reservationMap: RM, REST >
     {T, reserve(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O' to O}
   =>
     < O : Node | reservationMap: insert(RID,[P,PTR,FIRST,LAST,
                                  INDEX |-> < MINBW, MAXBW, undefined, MAXT, undefined >],RM), REST > 
     [mDelay, reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O to next(O,P), drop?]
     if onWay(PTR,FIRST) .


  op atSrc : Nat -> Bool .
  eq atSrc(0) = true .
  eq atSrc(PTR) = false [owise] .	 
	 
  op onWay : Nat Nat -> Bool .
 ceq onWay(PTR,FIRST) = true if PTR > 0 /\ PTR < FIRST .
  eq onWay(PTR,FIRST) = false [owise] .

  op atSrt : Nat Nat -> Bool .
  eq atSrt(FIRST,FIRST) = true .
  eq atSrt(PTR,FIRST) = false [owise] .
  
  op onPth : Nat Nat Nat -> Bool .
 ceq onPth(PTR,FIRST,LAST) = true if PTR > FIRST /\ PTR < LAST .
  eq onPth(PTR,FIRST,LAST) = false [owise] .

  op atEnd : Nat Nat -> Bool .
  eq atEnd(LAST,LAST) = true .
  eq atEnd(PTR,LAST) = false [owise] .
  
  op ing : Address AddrList Links -> Link .
  eq ing(O,(AL ; O' ; O ; AL'),(< O' O N CAP > ;; LS))
   = < O' O N CAP > .
   
  op eg : Address AddrList Links Float -> Link .
  eq eg(O,(AL ; O ; O' ; AL'),(< O O' N CAP > ;; LS),SINK)
   = < O O' N CAP > .  
  eq eg(O,(AL ; O),LS,SINK)
   = < O null 0 SINK > . 

  op cap : Link -> Float .
  eq cap(< O O' N CAP >) = CAP .

  op prev : Address AddrList -> Address .
  eq prev(O,(P ; O' ; O ; P')) = O' . 
  eq prev(O,P) = null [owise] .  --- O is the first node  
  
  op dest : AddrList -> Address .
  eq dest(P ; O) = O .
 
  --- first node's position
  op first : Content -> Nat .
  eq first(reserve(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW)) = FIRST .
  
  --- current position
  op ptr : Content -> Nat .
  eq ptr(reserve(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW)) = PTR .
  
  --- return reservation ID from a reservation msg
  op rid : Content -> ReservationId .
  eq rid(reserve(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW)) = RID .
  
  op src : Content -> Address .
  eq src(reserve(RID,INDEX,PTR,FIRST,LAST,(O ; P),MINBW,MAXBW,MAXT,ACCBW)) = O .

  op src : AddrList -> Address .
  eq src(O ; P) = O .
  
  op res : ReservationMap ReservationId -> Reservation .
  eq res((RID |-> RR,RM),RID) = RID |-> RR .
  ---eq res(RM,RID) = empty [owise] .
  
  --- 4. CMP
  --- atSrt or onPth
  --- first node: idBW = MaxBW
  ---(
  crl < TB : Table | links: LS, REST' >
      < O : Node | reservationMap: RM,
	               sink: SINK, REST >  --- SINK=CAP
      {T, reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O' to O}
    =>
	  < TB : Table | links: LS, REST' >
	  < O : Node | reservationMap: insert(RID,
	               		[P,s PTR,FIRST,LAST,
	                     INDEX |-> < MINBW, MAXBW, (if atSrt(s PTR,FIRST) 
						 	then min(MAXBW,cap(ing(O,P,LS))) else min(min(MAXBW,cap(ing(O,P,LS))),prevIdeal(ACCBW)) fi),
						 	MAXT, min(ACCBW (AVAIL ; IDEAL)) >], RM),
				   sink: SINK, REST > 
				
	  (if atEnd(s PTR,LAST)   --- deal with a segment of only one node
	     then [mDelay, reply(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW (AVAIL ; IDEAL)) from O to O', drop?]            
		 else [mDelay, reserve(RID,INDEX,s s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW (AVAIL ; IDEAL)) from O to next(O,P), drop?]
	   fi)
	  if (atSrt(s PTR,FIRST) or onPth(s PTR,FIRST,LAST)) /\
         AVAIL := avail(eg(O,P,LS,SINK),O,RM,T,reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW)) /\
         IDEAL := min(min(cap(ing(O,P,LS)),MAXBW),
		 	ideal(ing(O,P,LS),eg(O,P,LS,SINK),LS,O,RM,T,reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW),SINK)) . 	
)



  crl < TB : Table | links: LS, REST' >
      < O : Node | reservationMap: RM,
	               sink: SINK, REST >  --- SINK=CAP
      {T, reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O' to O}
    =>
	  < TB : Table | links: LS, REST' >
	  < O : Node | reservationMap: insert(RID,
	               		[P,s PTR,FIRST,LAST,
	                     INDEX |-> < MINBW, MAXBW, (if atSrt(s PTR,FIRST) 
						 	then min(MAXBW,cap(ing(O,P,LS))) else min(min(MAXBW,cap(ing(O,P,LS))),prevIdeal(ACCBW)) fi),
						 	MAXT, min(ACCBW (AVAIL ; IDEAL)) >], RM),
				   sink: SINK, REST > 
				
	  (if atEnd(s PTR,LAST)   --- deal with a segment of only one node
	     then [mDelay, reply(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW (AVAIL ; IDEAL)) from O to O', drop?]            
		 else [mDelay, reserve(RID,INDEX,s s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW (AVAIL ; IDEAL)) from O to next(O,P), drop?]
	   fi)
	  if (atSrt(s PTR,FIRST) or onPth(s PTR,FIRST,LAST)) /\
         AVAIL := avail(eg(O,P,LS,SINK),O,RM,T,reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW)) /\
         IDEAL := min(min(cap(ing(O,P,LS)),MAXBW),
		 	ideal(ing(O,P,LS),eg(O,P,LS,SINK),LS,O,RM,T,reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW),SINK)) . 	
			
			
			
			

  --- ideally provided
  --- also deal with if the current node O is the first on a path
  *** "delta *" encoded in initial states
  --- ingress, all ingress interfaces, egress, all egress interfaces, current node, reservation map, current time, incoming reservation msg
  op ideal : Link Link Links Address ReservationMap Float Content Float -> Float .
  eq ideal(INL,EL,LS,O,RM,GT,CONT,SINK) 
   = (if first(CONT) == ptr(CONT)
        then reqRatioStart(O,rid(CONT),INL,EL,LS,res(filter(O,RM,CONT,cap(INL)),rid(CONT)),filter(O,RM,CONT,cap(INL)),GT,SINK) *
             linkRatioStart(O,INL,EL,LS,filter(O,RM,CONT,cap(INL)),GT,SINK) 
        else reqRatioTransit(O,rid(CONT),INL,EL,LS,res(filter(O,RM,CONT,cap(INL)),rid(CONT)),filter(O,RM,CONT,cap(INL)),GT,SINK) *
             linkRatioTransit(O,INL,EL,LS,filter(O,RM,CONT,cap(INL)),GT,SINK)
      fi) * 
     tubeRatio(O,INL,EL,LS,filter(O,RM,CONT,cap(INL)),GT,SINK) * 
	 cap(EL) .  
	 

  --- current node, rid, ingress, reservation map, current time
  --- also deal with if the current node O is the first
  op reqRatioStart : Address ReservationId Link Link Links Reservation ReservationMap Float Float -> Float .
  eq reqRatioStart(O,RID,INL,EL,LS,RES,RM,GT,SINK)
  =  adjIdDem(O,INL,EL,LS,RES,RM,GT,SINK) / startDem(O,INL,EL,LS,RM,GT,SINK) .
   
  op reqRatioTransit : Address ReservationId Link Link Links Reservation ReservationMap Float Float  -> Float .
  eq reqRatioTransit(O,RID,INL,EL,LS,RES,RM,GT,SINK)
  =  adjIdDem(O,INL,EL,LS,RES,RM,GT,SINK) / transitDem(O,INL,EL,LS,RM,GT,SINK) .
  
		 
  --- current node, ingress, all ingress interfaces, all egress interfaces, reservation map, current time
  op startDem : Address Link Link Links ReservationMap Float Float -> Float .
  eq startDem(O,< O' O N CAP >,EL,LS,(RID |-> [(AL ; O' ; O ; AL'),FIRST,FIRST,LAST,VM],RM),GT,SINK)
   = startDem(O,< O' O N CAP >,EL,LS,RM,GT,SINK) + 
     adjIdDem(O,< O' O N CAP >,EL,LS,(RID |-> [(AL ; O' ; O ; AL'),FIRST,FIRST,LAST,VM]),(RID |-> [(AL ; O' ; O ; AL'),FIRST,FIRST,LAST,VM],RM),GT,SINK) .
  eq startDem(O,INL,EL,LS,(RID |-> [P,PTR,FIRST,LAST,VM],RM),GT,SINK)
   = startDem(O,INL,EL,LS,RM,GT,SINK) [owise] .
  eq startDem(O,INL,EL,LS,empty,GT,SINK) = 0.0 .  
  
  
  --- current node, ingress, all ingress interfaces, all egress interfaces, reservation map, current time
  op transitDem : Address Link Link Links ReservationMap Float Float -> Float .
 ceq transitDem(O,< O' O N CAP >,EL,LS,(RID |-> [(AL ; O' ; O ; AL'),PTR,FIRST,LAST,VM],RM),GT,SINK)
  =  transitDem(O,< O' O N CAP >,EL,LS,RM,GT,SINK) + 
     adjIdDem(O,< O' O N CAP >,EL,LS,(RID |-> [(AL ; O' ; O ; AL'),PTR,FIRST,LAST,VM]),(RID |-> [(AL ; O' ; O ; AL'),PTR,FIRST,LAST,VM],RM),GT,SINK) 
  if PTR > FIRST .
  eq transitDem(O,INL,EL,LS,(RID |-> [P,PTR,FIRST,LAST,VM],RM),GT,SINK)
  =  transitDem(O,INL,EL,LS,RM,GT,SINK) [owise] .
  eq transitDem(O,INL,EL,LS,empty,GT,SINK) = 0.0 .
  
  
  --- for startDem
  ---??? also for transitDem: IN is not needed
  --- current node, all ingress interfaces, all egress interfaces, matching reservation, reservation map, current time
  op adjIdDem : Address Link Link Links Reservation ReservationMap Float Float -> Float .
*** Wrong! Shouldn't be EL! Should be RID's egress
  ---(
  eq adjIdDem(O,INL,EL,LS,(RID |-> [P,PTR,FIRST,LAST,VM]),RM,GT)
  =  egScalFctr(O,src(P),EL,LS,RM,GT) 
  	 	* min(idBW(VM,GT),min(cap(INL),cap(EL))) .	
  )
  
  eq adjIdDem(O,INL,EL,(< O O' N CAP > ;; LS),(RID |-> [(AL ; O ; O' ; AL'),PTR,FIRST,LAST,VM]),RM,GT,SINK)
  =  egScalFctr(O,src(AL ; O ; O' ; AL'),< O O' N CAP >,(< O O' N CAP > ;; LS),RM,GT) 
  	 	* min(idBW(VM,GT),min(cap(INL),CAP)) .	  
  eq adjIdDem(O,INL,EL,LS,(RID |-> [(AL ; O),PTR,FIRST,LAST,VM]),RM,GT,SINK)
  =  egScalFctr(O,src(AL ; O),< O null 0 SINK >,LS,RM,GT) 
  	 	* min(idBW(VM,GT),min(cap(INL),SINK)) .	 
		

  --- current node, source, all ingress interfaces, egress, all egress interfaces, reservation map, current time
  op egScalFctr : Address Address Link Links ReservationMap Float -> Float .
  eq egScalFctr(O,SRC,EL,LS,RM,GT) 
  =  min(cap(EL),egDem(O,SRC,EL,LS,RM,GT)) / egDem(O,SRC,EL,LS,RM,GT) .  
  
  --- egress demand of source s on engress e
  --- the aggregate over its requested demands with egress demand e
  --- Note that it is ALL reservations under the above condition
  --- current node, source, all ingress interfaces, egress, all egress interfaces, reservation map, current time
  op egDem : Address Address Link Links ReservationMap Float -> Float .
  eq egDem(O,SRC,< O O' N CAP >,LS,(RID |-> [(SRC ; P ; O ; O' ; P'),PTR,FIRST,LAST,VM],RM),GT) 
   = egDem(O,SRC,< O O' N CAP >,LS,RM,GT) 
       + reqDem(O,(RID |-> [(SRC ; P ; O ; O' ; P'),PTR,FIRST,LAST,VM]),ing(O,(SRC ; P ; O ; O' ; P'),LS),< O O' N CAP >,LS,GT) .
  *** dest 
  eq egDem(O,SRC,< O null N CAP >,LS,(RID |-> [(SRC ; P ; O),PTR,FIRST,LAST,VM],RM),GT) 
   = egDem(O,SRC,< O null N CAP >,LS,RM,GT) 
       + reqDem(O,(RID |-> [(SRC ; P ; O),PTR,FIRST,LAST,VM]),ing(O,(SRC ; P ; O),LS),< O null N CAP >,LS,GT) .	   	   
  eq egDem(O,SRC,EL,LS,(RID |-> [P,PTR,FIRST,LAST,VM],RM),GT) 
   = egDem(O,SRC,EL,LS,RM,GT) [owise] .
  eq egDem(O,SRC,EL,LS,empty,GT) = 0.0 .

  
  --- current node, reservation, ingress, all ingress interfaces, egress, all egress interfaces, current time
  op reqDem : Address Reservation Link Link Links Float -> Float .
  eq reqDem(O,(RID |-> [P,PTR,FIRST,LAST,VM]),INL,EL,LS,GT) = min(demBW(VM,GT),min(cap(INL),cap(EL))) .	
  
  --- maximum of a reservation's currently valid versions' maxBW
  op demBW : VersionMap Float -> Float . 
  op $demBW : VersionMap Float Float -> Float .
  eq demBW(VM,GT) = $demBW(VM,GT,0.0) .
  eq $demBW((INDEX |-> < MINBW,MAXBW,IDBW,EXP,RESBW >,VM),GT,FL)
   = if MINBW <= RESBW and EXP >= GT
       then $demBW(VM,GT,max(MAXBW,FL))
       else $demBW(VM,GT,FL) fi .
  eq $demBW(empty,GT,FL) = FL .
	
  --- maximum of a reservation's currently valid versions' idealBW
  op idBW : VersionMap Float -> Float . 
  op $idBW : VersionMap Float Float -> Float .
  eq idBW(VM,GT) = $idBW(VM,GT,0.0) .
  eq $idBW((INDEX |-> < MINBW,MAXBW,IDBW,EXP,RESBW >,VM),GT,FL)
   = if MINBW <= RESBW and EXP >= GT
       then $idBW(VM,GT,max(IDBW,FL))
       else $idBW(VM,GT,FL) fi .
  eq $idBW(empty,GT,FL) = FL .
  	
	
  --- current node, ingress, all ingress interfaces, all egress interfaces, reservation map, current time
  --- current node: either start, or transit
  op linkRatioStart : Address Link Link Links ReservationMap Float Float -> Float .
  eq linkRatioStart(O,INL,EL,LS,RM,GT,SINK)
  =  min(cap(INL),startDem(O,INL,EL,LS,RM,GT,SINK)) /
     (min(cap(INL),startDem(O,INL,EL,LS,RM,GT,SINK)) + min(cap(INL),transitDem(O,INL,EL,LS,RM,GT,SINK))) .
 
 
  op linkRatioTransit : Address Link Link Links ReservationMap Float Float -> Float .
  eq linkRatioTransit(O,INL,EL,LS,RM,GT,SINK)
  =  min(cap(INL),transitDem(O,INL,EL,LS,RM,GT,SINK)) /
     (min(cap(INL),startDem(O,INL,EL,LS,RM,GT,SINK)) + min(cap(INL),transitDem(O,INL,EL,LS,RM,GT,SINK))) .		 


  --- current node, ingress, all ingress interfaces of the node, egress, reservation map, current time
  op tubeRatio : Address Link Link Links ReservationMap Float Float -> Float .  
  eq tubeRatio(O,INL,EL,LS,RM,GT,SINK) = min(cap(INL),tubeDem(O,INL,EL,LS,RM,GT,SINK)) / aggrTubeDem(O,EL,LS,RM,GT,SINK) .
  
  --- current node, all ingress interfaces of the node, egress, all egress interfaces, reservation map, current time
  op aggrTubeDem : Address Link Links ReservationMap Float Float -> Float . 
  op $aggrTubeDem : Address Links Link Links ReservationMap Float Float -> Float . 
  eq aggrTubeDem(O,EL,LS,RM,GT,SINK)
   = $aggrTubeDem(O,allIns(O,LS),EL,LS,RM,GT,SINK) .  
  eq $aggrTubeDem(O,(< O' O N CAP > ;; LS'),EL,LS,RM,GT,SINK)
   = min(CAP,tubeDem(O,< O' O N CAP >,EL,LS,RM,GT,SINK)) + $aggrTubeDem(O,LS',EL,LS,RM,GT,SINK) .  
  eq $aggrTubeDem(O,ept,EL,LS,RM,GT,SINK) = 0.0 .
  
  
  op allIns : Address Links -> Links .
  eq allIns(O,(< O' O N CAP > ;; LS)) = < O' O N CAP > ;; allIns(O,LS) .
  eq allIns(O,(L ;; LS)) = allIns(O,LS) [owise] .
  eq allIns(O,ept) = ept .
  
  
  --- for a single reservation 
  --- node, reservation, ingress, egress, reservation map, current time
  op adjReqDem : Address Reservation Link Link Links ReservationMap Float Float -> Float .
  eq adjReqDem(O,RES,INL,EL,LS,RM,GT,SINK)
   = min(inScalFctr(O,resSr(RES),INL,LS,RM,GT,SINK),egScalFctr(O,resSr(RES),EL,LS,RM,GT)) * reqDem(O,RES,INL,EL,LS,GT) .

   
  op resSr : Reservation -> Address .
  eq resSr(RID |-> [(O ; P),PTR,FIRST,LAST,VM]) = O .
  

  --- current node, source of the reservation, ingress, all ingress interfaces, all egress interfaces, reservation map, current time
  op inScalFctr : Address Address Link Links ReservationMap Float Float -> Float .
  eq inScalFctr(O,SRC,INL,LS,RM,GT,SINK)
  =  min(cap(INL),inDem(O,SRC,INL,LS,RM,GT,SINK)) / inDem(O,SRC,INL,LS,RM,GT,SINK) .


  --- current node, source, ingress, all ingress interfaces, all egress interfaces, reservation map, current time
  op inDem : Address Address Link Links ReservationMap Float Float -> Float .
  *** at least one node between SRC and 1st
  eq inDem(O,SRC,< O' O N CAP >,LS,(RID |-> [(SRC ; P ; O' ; O ; P'),PTR,FIRST,LAST,VM],RM),GT,SINK)
  =  inDem(O,SRC,< O' O N CAP >,LS,RM,GT,SINK) 
       + reqDem(O,(RID |-> [(SRC ; P ; O' ; O ; P'),PTR,FIRST,LAST,VM]),< O' O N CAP >,eg(O,(SRC ; P ; O' ; O ; P'),LS,SINK),LS,GT) .
  *** no node between SRC and 1st
  eq inDem(O,SRC,< SRC O N CAP >,LS,(RID |-> [(SRC ; O ; P'),PTR,FIRST,LAST,VM],RM),GT,SINK)
  =  inDem(O,SRC,< SRC O N CAP >,LS,RM,GT,SINK) 
       + reqDem(O,(RID |-> [(SRC ; O ; P'),PTR,FIRST,LAST,VM]),< SRC O N CAP >,eg(O,(SRC ; O ; P'),LS,SINK),LS,GT) .	   
  eq inDem(O,SRC,INL,LS,(RID |-> [P,PTR,FIRST,LAST,VM],RM),GT,SINK) 
   = inDem(O,SRC,INL,LS,RM,GT,SINK) [owise] .
  eq inDem(O,SRC,INL,LS,empty,GT,SINK) = 0.0 .

  
  
  --- node, ingress, egress, reservation map, current time
  op tubeDem : Address Link Link Links ReservationMap Float Float -> Float .
  op $tubeDem : Address Link Link Links ReservationMap ReservationMap Float Float -> Float .
  eq tubeDem(O,INL,EL,LS,RM,GT,SINK) = $tubeDem(O,INL,EL,LS,RM,RM,GT,SINK) .
 ceq $tubeDem(O,INL,EL,LS,(RID |-> [P,PTR,FIRST,LAST,VM],RM),RM',GT,SINK)
  =  adjReqDem(O,(RID |-> [P,PTR,FIRST,LAST,VM]),INL,EL,LS,RM',GT,SINK) + $tubeDem(O,INL,EL,LS,RM,RM',GT,SINK)
     if sameInAndE(INL,EL,P) .  
  eq $tubeDem(O,INL,EL,LS,(RID |-> [P,PTR,FIRST,LAST,VM],RM),RM',GT,SINK) 
  =  $tubeDem(O,INL,EL,LS,RM,RM',GT,SINK) [owise] .
  eq $tubeDem(O,INL,EL,LS,empty,RM',GT,SINK) = 0.0 .  
  

  op sameInAndE : Link Link AddrList -> Bool .
  eq sameInAndE(< O' O N CAP >,< O O'' N' CAP' >,(P ; O' ; O ; O'' ; P')) = true .
  eq sameInAndE(< O' O N CAP >,< O null N' CAP' >,(P ; O' ; O)) = true . 
  eq sameInAndE(INL,EL,P) = false [owise] .
		 

  --- ideal bandwidth computed by the previous AS
  op prevIdeal : AccBW -> Float .
  eq prevIdeal((ACCBW (FL1 ; FL2))) = FL2 .
  --- if ACCBW is nil
  eq prevIdeal(ACCBW) = undefined [owise] .		 
  
  --- how much bandwidth could be reserved on the entire path
  op finBW : Float AccBW -> Float .
  eq finBW(MAXBW,ACCBW) = min(MAXBW,min(ACCBW)) .

  eq min(MAXBW,undefined) = undefined .
  
  op min : AccBW -> Float .
  op $min : AccBW Float -> Float .
  --- minimum of empty 
  eq min(ept) = undefined .
  eq min(ACCBW) = $min(ACCBW,Infinity) [owise] .
  eq $min(((FL1 ; FL2) ACCBW),FL3) = $min(ACCBW,min(FL3,min(FL1,FL2))) .
  eq $min(ept,FL3) = FL3 .
		 
  --- available bandwidth
  --- 4th argument Float is current global time
  op avail : Link Address ReservationMap Float Content -> Float .
  eq avail(< O O' N CAP >,O,RM,GT,CONT) = CAP - delta * aggrAlloc(filterAvail(O,RM,CONT),< O O' N CAP >,GT) .

  op filterAvail : Address ReservationMap Content -> ReservationMap .
  --- if there is already RID 
  eq filterAvail(O,(RID |-> [P',PTR',FIRST',LAST',VM],RM),reserve(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW))
   = filterAvail(O,RM,reserve(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW)) .
  eq filterAvail(O,RM,CONT) = $filter(O,RM) [owise] .  
    
   --- current node, current reservation map, incoming msg 
   op filter : Address ReservationMap Content Float -> ReservationMap .
   op $filter : Address ReservationMap -> ReservationMap .
   --- if there is already RID in RM
   eq filter(O,(RID |-> [P',PTR',FIRST',LAST',VM],RM),reserve(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW),CAP)
    = $filter(O,(RID |-> [P,PTR,FIRST,LAST,INDEX |-> < MINBW, MAXBW, (if atSrt(PTR,FIRST) then min(CAP,MAXBW) else min(prevIdeal(ACCBW),min(CAP,MAXBW)) fi), MAXT,MINBW >],RM)) .
   --- owise 
   eq filter(O,RM,reserve(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW),CAP)
    = $filter(O,insert(RID,[P,PTR,FIRST,LAST,INDEX |-> < MINBW, MAXBW, (if atSrt(PTR,FIRST) then min(CAP,MAXBW) else min(prevIdeal(ACCBW),min(CAP,MAXBW)) fi), MAXT,MINBW >],RM)) [owise] .

  ceq $filter(O,(RID |-> [P,PTR,FIRST,LAST,VM],RM)) 
    = $filter(O,RM), RID |-> [P,PTR,FIRST,LAST,VM] if FIRST <= PTR and PTR <= LAST .
   eq $filter(O,(RID |-> [P,PTR,FIRST,LAST,VM],RM)) = $filter(O,RM) [owise] .
   eq $filter(O,empty) = empty .
  
  
  --- aggregated allocated bandwidth of all current valid reservations
  --- with the same egress interface 
  --- 3rd argument Float is current global time
  op aggrAlloc : ReservationMap Link Float -> Float .
  eq aggrAlloc((RID |-> [(AL ; O ; O' ; AL'),PTR,FIRST,LAST,VM],RM),< O O' N CAP >,GT)
   = allocBW(VM,GT) + aggrAlloc(RM,< O O' N CAP >,GT) .   
  --- O is dest
  eq aggrAlloc((RID |-> [(AL ; O),PTR,FIRST,LAST,VM],RM),< O null 0 SINK >,GT)
   = allocBW(VM,GT) + aggrAlloc(RM,< O null 0 SINK >,GT) .     
  eq aggrAlloc((RID |-> [P,PTR,FIRST,LAST,VM],RM),L,GT)
   = aggrAlloc(RM,L,GT) [owise] .
  eq aggrAlloc(empty,L,GT) = 0.0 .
  

  --- maximum of a reservation's currently valid versions' resBW
  op allocBW : VersionMap Float -> Float .
  op $allocBW : VersionMap Float Float -> Float .
  eq allocBW(VM,GT) = $allocBW(VM,GT,0.0) .
  eq $allocBW((INDEX |-> < MINBW,MAXBW,IDBW,EXP,RESBW >,VM),GT,FL) 
   = if MINBW <= RESBW and EXP >= GT  --- EXP means maxT+GT where GT is the time when the reservation starts
       then $allocBW(VM,GT,max(RESBW,FL))
       else $allocBW(VM,GT,FL) fi .
  eq $allocBW(empty,GT,FL) = FL .
  

  --- 5. TRN
  --- atEnd
  crl < TB : Table | links: LS, REST' >
      < O : Node | reservationMap: RM,
                   sink: SINK, REST >
      {T, reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O' to O}
    =>
	  < TB : Table | links: LS, REST' >
      < O : Node | reservationMap: insert(RID,
               	   		[P,s PTR,FIRST,LAST,
                     	 INDEX |-> < MINBW, MAXBW, prevIdeal(ACCBW), MAXT, 
                                     finBW(MAXBW,(ACCBW (AVAIL ; IDEAL))) >],RM),
                   sink: SINK, REST >
      [mDelay, reply(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW (AVAIL ; IDEAL)) from O to O', drop?]            
      if atEnd(s PTR,LAST) /\ (not atSrt(s PTR,FIRST)) /\
         AVAIL := avail(eg(O,P,LS,SINK),O,RM,T,reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW)) /\
         IDEAL := min(min(cap(ing(O,P,LS)),MAXBW),
		 	ideal(ing(O,P,LS),eg(O,P,LS,SINK),LS,O,RM,T,reserve(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW),SINK)) .
  
	
  --- 6. UPT
  --- onPth or (atSrt and not atSrc) 
 crl < O : Node | reservationMap: RM, REST >
     {T, reply(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O' to O}
   =>
     < O : Node | reservationMap: update(RID,INDEX,min(min(ACCBW),resbw(RM,RID,INDEX)),RM), REST >
     [mDelay, reply(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O to prev(O,P), drop?]
	 if ((atSrt(s PTR,FIRST) and (not atSrc(s PTR))) or onPth(s PTR,FIRST,LAST)) .  
 
 
  ---update(RID,INDEX,new-resBW,RM)
  op update : ReservationId Nat Float ReservationMap -> ReservationMap .
  eq update(RID,INDEX,RESBW',(RID |-> [P,PTR,FIRST,LAST,
       (INDEX |-> < MINBW,MAXBW,IDBW,EXP,RESBW >,VM)],RM)) 
     = RID |-> [P,PTR,FIRST,LAST,
       (INDEX |-> < MINBW,MAXBW,IDBW,EXP,RESBW' >,VM)],RM .
  eq update(RID,INDEX,RESBW',RM) = RM [owise] .
  

  op resbw : ReservationMap ReservationId Nat -> Float .
  eq resbw((RID |-> [P,PTR,FIRST,LAST,
       (INDEX |-> < MINBW,MAXBW,IDBW,EXP,RESBW >,VM)],RM),RID,INDEX) = RESBW . 
	   
	   
  --- 7. BWD
  --- onWay
 crl < O : Node | reservationMap: RM, REST >
     {T, reply(RID,INDEX,s PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O' to O}
   =>
     < O : Node | reservationMap: update(RID,INDEX,min(ACCBW),RM), REST >
     [mDelay, reply(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O to prev(O,P), drop?]
	 if onWay(s PTR,FIRST) .
  
  --- 8. FIN
  --- atSrc
 crl < O : Node | reservationMap: RM, REST >
     {T, reply(RID,INDEX,PTR,FIRST,LAST,P,MINBW,MAXBW,MAXT,ACCBW) from O' to O}
   =>
     < O : Node | reservationMap: update(RID,INDEX,min(ACCBW),RM), REST >
	 if atSrc(PTR) .	 
	 

  --- 15. RST
  --- remove expired or unsuccessful reservations
  rl [reset-rmv-existed] :
     {T, reset(RID,INDEX) to O}
     < O : Node | reservationMap: RM, REST >
   => 
	 < O : Node | reservationMap: remove(RID,INDEX,RM), REST > .

  --- delete the corresponding version from the reservation map
  op remove : ReservationId Nat ReservationMap -> ReservationMap .
  eq remove(RID,INDEX,(RID |-> [P,PTR,FIRST,LAST,(INDEX |-> VR,VM)],RM)) 
     = RID |-> [P,PTR,FIRST,LAST,VM],RM .
  eq remove(RID,INDEX,RM) = RM [owise] .	  
	  
  --- if enabled, eagerly fired after 5. 6. 7. or 8.
 crl [reset-less-reserved] :
     < O : Node | reservationMap: (RID |-> [P,PTR,FIRST,LAST,
	 					(INDEX |-> < MINBW, MAXBW, IDBW, EXPT, RESBW >, VM)],RM), REST >
   => 
	 < O : Node | reservationMap: (RID |-> [P,PTR,FIRST,LAST,VM],RM), REST >	  
	 if RESBW < MINBW .

 ceq eagerEnabled(< O : Node | reservationMap: (RID |-> [P,PTR,FIRST,LAST,
						(INDEX |-> < MINBW, MAXBW, IDBW, EXPT, RESBW >, VM)],RM), REST > CONF)
   = true if RESBW < MINBW .
   

  --- take a snapshot of 'rewBW' for each reservation every 'ssDelay' time units
  eq step(AC {GT | [ T , M1, 0 ] ; SL}) = { T , M1 } AC {T | SL} [owise] .   
  eq step(AC  < M : Monitor | snapshots: RS, REST > {GT | [ T, snapshot to M, 0] ; SL}) 
   = AC < M : Monitor | snapshots: add(T,RS,AC), REST > [ssDelay, snapshot to M, drop?] {T | SL} .
	 
  op add : Float Map{ReservationId,Snapshots} ActorConfig -> Map{ReservationId,Snapshots} .  
  op $add : Float Map{ReservationId,Snapshots} ActorConfig Map{ReservationId,Snapshots} -> Map{ReservationId,Snapshots} .
  
  
  eq add(T,RS,AC) = $add(T,RS,AC,empty) .
  
  eq $add(T,(RID |-> SS,RS),< O : Node | reservationMap: (RID |-> [(O ; P),PTR,FIRST,LAST,VM],RM), REST > AC,RS')
   = $add(T,RS,< O : Node | reservationMap: (RID |-> [(O ; P),PTR,FIRST,LAST,VM],RM), REST > AC,(RS',RID |-> (SS ;; < T latestIndex(VM) dest(O ; P) >))) .  
     --- matching O indicates O is the source
  eq $add(T,empty,AC,RS') = RS' .
       
  op latestIndex : VersionMap -> Float .
  eq latestIndex(VM) = $latestIndex(toList(VM)) . 
  
  op $latestIndex : VerRecordList -> Float .
  eq $latestIndex(VRL ;; < INDEX ; undefined >) = $latestIndex(VRL) .
  eq $latestIndex(VRL ;; < INDEX ; RESBW >) = RESBW [owise] .
  eq $latestIndex(nil) = undefined .
  
  op toList : VersionMap -> VerRecordList .
  op $toList : VersionMap VerRecordList -> VerRecordList .
  eq toList(VM) = $toList(VM,nil) .
  eq $toList((INDEX |-> < MINBW, MAXBW, IDBW, EXPT, RESBW >,VM),VRL)
   = $toList(VM,sort(< INDEX ; RESBW >,VRL)) .
  eq $toList(empty,VRL) = VRL .
  
  op sort : VerRecordEle VerRecordList -> VerRecordList .
  eq sort(< INDEX ; RESBW >,(< INDEX' ; RESBW' > ;; VRL))
   = if INDEX > INDEX' then < INDEX' ; RESBW' > ;; sort(< INDEX ; RESBW >,VRL)
       else < INDEX ; RESBW > ;; < INDEX' ; RESBW' > ;; VRL fi .
  eq sort(< INDEX ; RESBW >,nil) = < INDEX ; RESBW > .
  
endm