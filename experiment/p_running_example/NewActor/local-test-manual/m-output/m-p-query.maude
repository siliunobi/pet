load ../apmaude

mod SORTS is
  inc SCHEDULING .
  pr NAT .
  
  sorts Query Queries Key Value Timestamp Data Oids Id .
  subsort Data < Payload .
  subsort Nat < Timestamp .
  subsort Nat < Value .
  subsort Query < Queries < Payload .
  subsort Oid < Oids .
  subsort Nat < Id .

  op <_,_> : Value Timestamp -> Data [ctor] .
  op null : -> Data .
  
  op read : Id Key -> Query .
  
  op ept : -> Queries .
  op _::_ : Queries Queries -> Queries [assoc id: ept] .

  op empty : -> Oids .
  op _;_ : Oids Oids -> Oids [assoc comm id: empty] .  
  
  op reply : Id Data -> Payload .
endm
view Key from TRIV to SORTS is sort Elt to Key . endv
view Data from TRIV to SORTS is sort Elt to Data . endv
view Oids from TRIV to SORTS is sort Elt to Oids . endv
view Id from TRIV to SORTS is sort Elt to Id . endv

mod OBJS is
  inc SORTS .
  pr MAP{Key,Data} .
  pr MAP{Key,Oids} .
  pr MAP{Id,Data} .
  
  ops Client Server : -> ObjType .
  
  op queries:_ : Queries -> Attribute .
  op waiting:_ : Oids  -> Attribute .
  op replicas:_ : Map{Key,Oids} -> Attribute .  
  op results:_ : Map{Id,Data} -> Attribute .
  op database:_ : Map{Key,Data} -> Attribute .
endm

---(
mod QUERY is
  inc OBJS .
  
  vars O O' TB : Oid .  vars QS QS' : Queries .
  var OS : Oids .  var R : Map{Key,Oids} .
  vars AS AS' : Attributes .  var K : Key .
  var DB : Map{Key,Data} .  vars V V' : Value .
  var P : Payload .  vars DAT DAT' : Data .  
  vars TS TS' : Timestamp .  var ID : Id .
  var RS : Map{Id,Data} .
  

  rl [req] :
     (to O : QS')
     < O : Client | queries: QS, AS > 
  =>
     < O : Client | queries: (QS :: QS'), AS > .
  

 crl [issue] :
     < O : Client | queries: (read(ID,K) :: QS), waiting: empty,
	                replicas: R, results: RS, AS > 
  => 
     < O : Client | queries: (read(ID,K) :: QS), waiting: (R[K]),
	                replicas: R, results: insert(ID,null,RS), AS > 
     (propagate read(ID,K) to R[K] from O)
	 if not $hasMapping(RS,ID) .

  op propagate_to_from_ : Payload Oids Oid -> Msgs . 
  eq propagate P to (O ; OS) from O' = (propagate P to OS from O') (to O from O' : P) .
  eq propagate P to empty from O' = null .
   
  rl [reply] :
     (to O from O' : read(ID,K)) 
     < O : Server | database: DB, AS >
  => 
     < O : Server | database: DB, AS > 
     (to O' from O : reply(ID,DB[K])) .
   

  rl [update] :
     (to O from O' : reply(ID,DAT')) 
     < O : Client | waiting: (O' ; OS), results: (RS, ID |-> DAT), AS >
  => 
     < O : Client | waiting: OS, results: (RS, ID |-> latest(DAT,DAT')), AS > .
	 
  op latest : Data Data -> Data .
  eq latest(< V,TS >,null) = < V,TS > .
  eq latest(null,< V,TS >) = < V,TS > .
  eq latest(< V,TS >,< V',TS' >) = if TS >= TS' then < V,TS > else < V',TS' > fi .
   
  rl [finish] :
     < O : Client | queries: (read(ID,K) :: QS), waiting: empty, results: (RS, ID |-> DAT), AS >
  => 
     < O : Client | queries: QS, waiting: empty, results: (RS, ID |-> DAT), AS > .
endm
)

load pi-query
load ../sampling-lib
load events-query

mod M-P-QUERY is
  including BOOL .
  including OBJS .
  including PI-QUERY .
  including EVENTS-QUERY .
  including SAMPLING-LIB .
  op delay-issue : Oid Id Key Queries Map{Key,Oids}Map{Id,Data}Attributes
    MsgList -> DTask .
  op delay-reply : Oid Id Key Oid Map{Key,Data}Attributes MsgList -> DTask .
  op latest : Data Data -> Data .
  op propagate_to_from_ : Payload Oids Oid -> Msgs .
  eq latest(null,< V:Value,TS:Timestamp >)
    = < V:Value,TS:Timestamp > .
  eq latest(< V:Value,TS:Timestamp >,null)
    = < V:Value,TS:Timestamp > .
  eq latest(< V:Value,TS:Timestamp >,< V':Value,TS':Timestamp >)
    = if TS:Timestamp >= TS':Timestamp then < V:Value,TS:Timestamp > else <
    V':Value,TS':Timestamp > fi .
  eq objectEnabled(
< O:Oid : Client | queries:(read(ID:Id,K:Key):: QS:Queries),waiting: empty,
    results:(RS:Map{Id,Data}, ID:Id |-> DAT:Data),AS:Attributes >)
    = true .
  eq propagate P:Payload to empty from O':Oid
    = (null).DMsgs .
  eq propagate P:Payload to O:Oid ; OS:Oids from O':Oid
    = (propagate P:Payload to OS:Oids from O':Oid)to O:Oid from O':Oid :
    P:Payload .
  ceq objectEnabled(
< O:Oid : Client | queries:(read(ID:Id,K:Key):: QS:Queries),waiting: empty,
    replicas: R:Map{Key,Oids},results: RS:Map{Id,Data},AS:Attributes >)
    = true
    if not $hasMapping(RS:Map{Id,Data},ID:Id)= true .
  rl 
{@C:Config delay-issue(O:Oid,ID:Id,K:Key,QS:Queries,R:Map{Key,Oids},RS:Map{Id,
    Data},AS:Attributes,@M:Msg :: @ML:MsgList)|
@T:Float}
    => 
{(@C:Config[@T:Float +(delta-issue(O:Oid,ID:Id,K:Key,QS:Queries,R:Map{Key,
    Oids},RS:Map{Id,Data},AS:Attributes)[sample(lognormal(mSize(K:Key),
    1.0000000000000001e-1))[rand]]),@M:Msg])delay-issue(O:Oid,ID:Id,K:Key,
    QS:Queries,R:Map{Key,Oids},RS:Map{Id,Data},AS:Attributes,@ML:MsgList)|
@T:Float} .
  rl 
{@C:Config delay-reply(O':Oid,ID:Id,K:Key,O:Oid,DB:Map{Key,Data},AS:Attributes,
    @M:Msg :: @ML:MsgList)|
@T:Float}
    => 
{(@C:Config[@T:Float +(delta-reply(O:Oid,O':Oid,ID:Id,K:Key,DB:Map{Key,Data},
    AS:Attributes)[sample(lognormal(mSize(DB:Map{Key,Data}[K:Key]),
    1.0000000000000001e-1))[rand]]),@M:Msg])delay-reply(O':Oid,ID:Id,K:Key,
    O:Oid,DB:Map{Key,Data},AS:Attributes,@ML:MsgList)|
@T:Float} [label delay-reply] .
  rl 
{C:Config delay-init(OBJS:Objects,MSGS:Msgs,M:Msg :: ML:MsgList)|
T:Float}
    => 
{(C:Config[T:Float +(sample(exponential(1.0000000000000001e-1))[rand]),
    M:Msg])delay-init(OBJS:Objects,MSGS:Msgs,ML:MsgList)|
T:Float} [label delay-init-1] .
  rl 
{@OBJS:Objects @DMS:DMsgs
< O:Oid : Client | queries:(read(ID:Id,K:Key):: QS:Queries),waiting: empty,
    results:(RS:Map{Id,Data}, ID:Id |-> DAT:Data),AS:Attributes >
< log : Monitor | events: TES:TimedEvents > |
@T:Float}
    => 
{@OBJS:Objects @DMS:DMsgs
< O:Oid : Client | queries: QS:Queries,waiting: empty,results:(RS:Map{Id,Data},
    ID:Id |-> DAT:Data),AS:Attributes >
< log : Monitor | events:(TES:TimedEvents ; endQuery(ID:Id)@ @T:Float)> |
@T:Float} [label finish.p.m] .
  rl 
{@OBJS:Objects @DMS:DMsgs(to O:Oid : QS':Queries)
< O:Oid : Client | queries: QS:Queries,AS:Attributes > |
@T:Float}
    => 
{@OBJS:Objects @DMS:DMsgs
< O:Oid : Client | queries:(QS:Queries :: QS':Queries),AS:Attributes > |
@T:Float} [label req.p] .
  rl 
{@OBJS:Objects @DMS:DMsgs(to O:Oid from O':Oid : read(ID:Id,K:Key))
< O:Oid : Server | database: DB:Map{Key,Data},AS:Attributes > |
@T:Float}
    => 
{@OBJS:Objects @DMS:DMsgs
< O:Oid : Server | database: DB:Map{Key,Data},AS:Attributes > delay-reply(
    O':Oid,ID:Id,K:Key,O:Oid,DB:Map{Key,Data},AS:Attributes,sort(to O':Oid from
    O:Oid : reply(ID:Id,DB:Map{Key,Data}[K:Key])))|
@T:Float} [label reply.p] .
  rl 
{@OBJS:Objects @DMS:DMsgs(to O:Oid from O':Oid : reply(ID:Id,DAT':Data))
< O:Oid : Client | waiting:(O':Oid ; OS:Oids),results:(RS:Map{Id,Data}, ID:Id
    |-> DAT:Data),AS:Attributes > |
@T:Float}
    => 
{@OBJS:Objects @DMS:DMsgs
< O:Oid : Client | waiting: OS:Oids,results:(RS:Map{Id,Data}, ID:Id |-> latest(
    DAT:Data,DAT':Data)),AS:Attributes > |
@T:Float} [label update.p] .
  rl delay-init(OBJS:Objects,MSGS:Msgs,nil)
    => (null).DMsgs [label delay-init-2] .
  rl delay-issue(O:Oid,ID:Id,K:Key,QS:Queries,R:Map{Key,Oids},RS:Map{Id,Data},
    AS:Attributes,nil)
    => (null).DMsgs [label delay-issue] .
  rl delay-reply(O':Oid,ID:Id,K:Key,O:Oid,DB:Map{Key,Data},AS:Attributes,nil)
    => (null).DMsgs [label delay-reply] .
  crl 
{@OBJS:Objects @DMS:DMsgs
< O:Oid : Client | queries:(read(ID:Id,K:Key):: QS:Queries),waiting: empty,
    replicas: R:Map{Key,Oids},results: RS:Map{Id,Data},AS:Attributes >
< log : Monitor | events: TES:TimedEvents > |
@T:Float}
    => 
{@OBJS:Objects @DMS:DMsgs
< log : Monitor | events:(TES:TimedEvents ; startQuery(ID:Id)@ @T:Float)>
< O:Oid : Client | queries:(read(ID:Id,K:Key):: QS:Queries),waiting:(R:Map{Key,
    Oids}[K:Key]),replicas: R:Map{Key,Oids},results: insert(ID:Id,null,RS:Map{
    Id,Data}),AS:Attributes > delay-issue(O:Oid,ID:Id,K:Key,QS:Queries,R:Map{
    Key,Oids},RS:Map{Id,Data},AS:Attributes,sort(propagate read(ID:Id,K:Key)to
    R:Map{Key,Oids}[K:Key]from O:Oid))|
@T:Float}
    if not $hasMapping(RS:Map{Id,Data},ID:Id)= true [label issue.p.m] .
endm