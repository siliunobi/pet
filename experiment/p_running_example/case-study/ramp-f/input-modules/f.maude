load ../apmaude

mod TXN-SORTS is
  inc SCHEDULING .
  
  sort Version .  --- In RAMP version is a 4-tuple (key,value,timestamp,metadata)
  sorts Key Value Operation LocalVar Expression ConfigList OidList OidSet
        KeyVersion KeyValueVersion ValueVersion Vote Timestamp ReplicaTable Record .
  subsort Config < ConfigList .
  subsort LocalVar < Expression .
  subsort Nat < Expression .
  subsort Oid < OidList .
  subsort Oid < OidSet .
  ***
  subsort Int < Oid .

  --- RID, SQN
  --- ??? initial value: ts(0,0) or eptTS???
  op ts : Oid Int -> Timestamp [ctor] .  --- v_latest default value is -1  
  op eptTS : -> Timestamp [ctor] .

  op noVote : -> Vote [ctor] .
  op vote : Oid Oid Bool -> Vote [ctor] .  --- TID,RID,yes/no
  op _;_ : Vote Vote -> Vote [ctor assoc comm id: noVote] . 
 
  ***
  op none : -> Object .
endm
view Operation from TRIV to TXN-SORTS is sort Elt to Operation . endv
view Version from TRIV to TXN-SORTS is sort Elt to Version . endv
view Key from TRIV to TXN-SORTS is sort Elt to Key . endv
view LocalVar from TRIV to TXN-SORTS is sort Elt to LocalVar . endv
view Value from TRIV to TXN-SORTS is sort Elt to Value . endv
view KeyVersion from TRIV to TXN-SORTS is sort Elt to KeyVersion . endv
view KeyValueVersion from TRIV to TXN-SORTS is sort Elt to KeyValueVersion . endv
view ValueVersion from TRIV to TXN-SORTS is sort Elt to ValueVersion . endv
view Vote from TRIV to TXN-SORTS is sort Elt to Vote . endv
view Timestamp from TRIV to TXN-SORTS is sort Elt to Timestamp . endv

mod TXN-AUX1 is
  pr LIST{Operation} * (sort List{Operation} to OperationList) .
  pr MAP{LocalVar,Value} * (sort Map{LocalVar,Value} to LocalVars) .
  pr MAP{Key,Value} * (sort Map{Key,Value} to WriteSet) .  --- no need for RAMP
  pr LIST{ValueVersion} * (sort List{ValueVersion} to ValueVersionList) .  --- no need for RAMP
  pr SET{Key} * (sort Set{Key} to KeySet) .
  pr MAP{Key,Timestamp} * (sort Map{Key,Timestamp} to KeyTimestamps) .
  pr LIST{Key} * (sort List{Key} to KeyList) .

  op write : Key Expression -> Operation [ctor] .
  op _:=read_ : LocalVar Key -> Operation [ctor] .
  op waitRemote : Key LocalVar -> Operation [ctor] .  --- "internal" state, no need for RAMP

  op _plus_ : Expression Expression -> Expression [ctor] .
  op eval : Expression LocalVars -> Value .

  op emptyTxnList : -> ConfigList [ctor] .
  op _;;_ : ConfigList ConfigList -> ConfigList [ctor assoc id: emptyTxnList] .

  op emptyOidList : -> OidList [ctor] .
  op _;;_ : OidList OidList -> OidList [ctor assoc id: emptyOidList] .

  op empty : -> OidSet [ctor] .
  op _;_ : OidSet OidSet -> OidSet [ctor assoc comm id: empty] .

  var A : Oid .
  var AS : OidSet .  

  op delete : Oid OidSet -> OidSet .
  op delete1 : Oid OidSet -> OidSet .
  eq delete(A, A ; AS) = delete(A, AS) .
  eq delete(A, AS) = AS [owise] .
  eq delete1(A, A ; AS) = AS .
  eq delete1(A, AS) = AS [owise] .

  var K : Key .
  var V : Value .
  var WS : WriteSet .

  op keys : WriteSet -> KeySet .
  eq keys(empty) = empty .
  eq keys((K |-> V,WS)) = K, keys(WS) .
endm
view OidSet from TRIV to TXN-AUX1 is sort Elt to OidSet . endv
view ValueVersionList from TRIV to TXN-AUX1 is sort Elt to ValueVersionList . endv
view OidList from TRIV to TXN-AUX1 is sort Elt to OidList . endv


mod TXN-AUX2 is
  including TXN-AUX1 .

  sort VoteSites .  
  op noVS : -> VoteSites [ctor] .
  op voteSites : Oid OidSet -> VoteSites [ctor] .  --- TID, Set{RID}
  op _;_ : VoteSites VoteSites -> VoteSites [ctor assoc comm id: noVS] .

  sort 1stGets .
  op no1st : -> 1stGets [ctor] .
  op 1st : Oid OidSet -> 1stGets [ctor] .
  op _;_ : 1stGets 1stGets -> 1stGets [ctor assoc comm id: no1st] .

  sort 2ndGets .
  op no2nd : -> 2ndGets [ctor] .
  op 2nd : Oid OidSet -> 2ndGets [ctor] .
  op _;_ : 2ndGets 2ndGets -> 2ndGets [ctor assoc comm id: no2nd] .
endm

mod VALUES-NAT is --- define the sort Value
  including TXN-AUX1 .

  op `[_`] : Nat -> Value [ctor] .     --- to avoid problems with preregularity
  var X : LocalVar .  var VARS : LocalVars .  var N : Nat . vars EXPR1 EXPR2 : Expression .
  op evalAux : Expression LocalVars -> Nat .
  eq eval(EXPR1, VARS) = [evalAux(EXPR1, VARS)] .
  eq evalAux(X, ((X |-> [N]), VARS)) = N .
  eq evalAux(N, VARS) = N .
  eq evalAux(EXPR1 plus EXPR2, VARS) = evalAux(EXPR1, VARS) + evalAux(EXPR2, VARS) .
endm

mod VERSION-RAMP is
  including TXN-SORTS + TXN-AUX1 .
  op version : Key Value Timestamp KeySet -> Version .  --- KeySet concerns MD
  op eptVersion : -> Version .
endm

mod DATASTORE-RAMP is
  pr SET{Version} * (sort Set{Version} to Versions) .
endm


mod OBJS is
  including TXN-SORTS .
  including TXN-AUX2 .
  including DATASTORE-RAMP .
    

  op Replica : -> ObjType .
  op datastore:_ : Versions -> Attribute .  --- initialized on some distributions; version(K,[0],ts(0,0),empty)
  op sqn:_ : Nat -> Attribute .  --- initialized as 0
  op executing:_ : Object -> Attribute .  --- initialized as noActor
---  op submitted:_ : ConfigList -> Attribute .  ---??? no need for RAMP
  op committed:_ : ConfigList -> Attribute .  --- init: emptyTxnList
---  op aborted:_ : ConfigList -> Attribute .  --- no need for RAMP

  op gotTxns:_ : ConfigList -> Attribute .  --- ??? for abstracting client away
---  op votes:_ : Vote -> Attribute .  --- no need for RAMP
  op voteSites:_ : VoteSites -> Attribute .  --- init: noVS
  op latestCommit:_ : KeyTimestamps -> Attribute .  ---??? init: empty; different from original RAMP spec
  op 1stGetSites:_ : 1stGets -> Attribute .  --- init: no1st
  op 2ndGetSites:_ : 2ndGets -> Attribute .  --- init: no2nd
  op commitSites:_ : VoteSites -> Attribute .  --- init: noVS


  op Txn : -> ObjType .
  op operations:_ : OperationList -> Attribute .  --- initialized on some distributions
---  op destination:_ : Address -> Attribute .  --- since we have "gotTxns"
  op readSet:_ : Versions -> Attribute .  --- init: empty
---  op writeSet:_ : WriteSet -> Attribute .  --- no need for RAMP
  op localVars:_ : LocalVars -> Attribute .  --- init depending on keys the initialized ops concern
---  op txnSQN:_ : Nat -> Attribute .  --- no need for RAMP
  op latest:_ : KeyTimestamps -> Attribute .  --- initialized as empty


  *** Replica Table ***
  op Table : -> ObjType .
  op table:_ : ReplicaTable -> Attribute .
  
  *** Msg ***
  op prepare-reply : Oid Bool Oid -> Payload . --- TID, yes/no, RID
  op get : Oid Key Timestamp Oid -> Payload .
  op prepare : Oid Version Oid -> Payload .
  op commit : Oid Timestamp Oid -> Payload .
  op committed : Oid Oid -> Payload .
  op response1 : Oid Version Oid -> Payload .
  op response2 : Oid Version Oid -> Payload .
  op start : -> Payload .
  op commit-reads : -> Payload .
endm


mod NAMES is
  inc TXN-AUX1 .
  inc VERSION-RAMP + VALUES-NAT .
  
  sort KeyVar .
  sort KeyVars .
  subsort KeyVar < KeyVars .
  
  vars KS KS' : KeyList .
  var K : Key .
  var VARS : LocalVars .
  var VAR : LocalVar .
  vars KVARS KVARS' : KeyVars .
  vars N KEYS : Nat .

  
  op noKeyVar : -> KeyVars [ctor] .
  op <_`,_> : Key LocalVar -> KeyVar [ctor] .
  op _;_ : KeyVars KeyVars -> KeyVars [ctor assoc id: noKeyVar] .

  op key : KeyVar -> Key .
  op lvar : KeyVar -> LocalVar .
  eq key(< K,VAR >) = K .
  eq lvar(< K,VAR >) = VAR .

  op size : KeyVars -> Nat .
  op $size : KeyVars Nat -> Nat .
  eq size(KVARS) = $size(KVARS,0) .
  eq $size((< K,VAR > ; KVARS),N) = $size(KVARS,N + 1) .
  eq $size(noKeyVar,N) = N .

  op delete : KeyVar KeyVars -> KeyVars .
  eq delete(< K,VAR >,(KVARS ; < K,VAR > ; KVARS')) = delete(< K,VAR >,(KVARS ; KVARS')) .
  eq delete(< K,VAR >,KVARS) = KVARS [owise] .
  
  op nth : NzNat KeyList -> Key .
  eq nth(1,(K KS)) = K .
  eq nth(s N,(K KS)) = nth(N,KS) . 

  op nth : NzNat KeyVars -> KeyVar .
  eq nth(1,(< K,VAR > ; KVARS)) = < K,VAR > .
  eq nth(s N,(< K,VAR > ; KVARS)) = nth(N,KVARS) .

  op keys : Nat KeyList -> KeyList .
  eq keys(s KEYS, (K KS)) = K keys(KEYS,KS) .
  eq keys(0,KS) = nil .
  eq keys(KEYS,nil) = nil .

  op kvars : Nat KeyVars -> KeyVars .
  eq kvars(s KEYS, (< K,VAR > ; KVARS)) = < K,VAR > ; kvars(KEYS,KVARS) .
  eq kvars(0,KVARS) = noKeyVar .
  eq kvars(KEYS,noKeyVar) = noKeyVar .
  
  ops k1l  k2l  k3l  k4l  k5l  k6l  k7l  k8l  k9l  k10l
      k11l k12l k13l k14l k15l k16l k17l k18l k19l k20l
      k21l k22l k23l k24l k25l k26l k27l k28l k29l k30l
      k31l k32l k33l k34l k35l k36l k37l k38l k39l k40l
      k41l k42l k43l k44l k45l k46l k47l k48l k49l k50l
      k51l k52l k53l k54l k55l k56l k57l k58l k59l k60l
      k61l k62l k63l k64l k65l k66l k67l k68l k69l k70l
      k71l k72l k73l k74l k75l k76l k77l k78l k79l k80l
      k81l k82l k83l k84l k85l k86l k87l k88l k89l k90l
      k91l k92l k93l k94l k95l k96l k97l k98l k99l k100l 
      k101l k102l k103l k104l k105l k106l k107l k108l k109l k110l 
      k111l k112l k113l k114l k115l k116l k117l k118l k119l k120l 
      k121l k122l k123l k124l k125l k126l k127l k128l k129l k130l 
      k131l k132l k133l k134l k135l k136l k137l k138l k139l k140l 
      k141l k142l k143l k144l k145l k146l k147l k148l k149l k150l 
      k151l k152l k153l k154l k155l k156l k157l k158l k159l k160l 
      k161l k162l k163l k164l k165l k166l k167l k168l k169l k170l 
      k171l k172l k173l k174l k175l k176l k177l k178l k179l k180l 
      k181l k182l k183l k184l k185l k186l k187l k188l k189l k190l 
      k191l k192l k193l k194l k195l k196l k197l k198l k199l k200l 
k201l k202l k203l k204l k205l k206l k207l k208l k209l k210l 
k211l k212l k213l k214l k215l k216l k217l k218l k219l k220l 
k221l k222l k223l k224l k225l k226l k227l k228l k229l k230l 
k231l k232l k233l k234l k235l k236l k237l k238l k239l k240l 
k241l k242l k243l k244l k245l k246l k247l k248l k249l k250l 
k251l k252l k253l k254l k255l k256l k257l k258l k259l k260l 
k261l k262l k263l k264l k265l k266l k267l k268l k269l k270l 
k271l k272l k273l k274l k275l k276l k277l k278l k279l k280l 
k281l k282l k283l k284l k285l k286l k287l k288l k289l k290l 
k291l k292l k293l k294l k295l k296l k297l k298l k299l k300l 
k301l k302l k303l k304l k305l k306l k307l k308l k309l k310l 
k311l k312l k313l k314l k315l k316l k317l k318l k319l k320l 
k321l k322l k323l k324l k325l k326l k327l k328l k329l k330l 
k331l k332l k333l k334l k335l k336l k337l k338l k339l k340l 
k341l k342l k343l k344l k345l k346l k347l k348l k349l k350l 
k351l k352l k353l k354l k355l k356l k357l k358l k359l k360l 
k361l k362l k363l k364l k365l k366l k367l k368l k369l k370l 
k371l k372l k373l k374l k375l k376l k377l k378l k379l k380l 
k381l k382l k383l k384l k385l k386l k387l k388l k389l k390l 
k391l k392l k393l k394l k395l k396l k397l k398l k399l k400l 
k401l k402l k403l k404l k405l k406l k407l k408l k409l k410l 
k411l k412l k413l k414l k415l k416l k417l k418l k419l k420l 
k421l k422l k423l k424l k425l k426l k427l k428l k429l k430l 
k431l k432l k433l k434l k435l k436l k437l k438l k439l k440l 
k441l k442l k443l k444l k445l k446l k447l k448l k449l k450l 
k451l k452l k453l k454l k455l k456l k457l k458l k459l k460l 
k461l k462l k463l k464l k465l k466l k467l k468l k469l k470l 
k471l k472l k473l k474l k475l k476l k477l k478l k479l k480l 
k481l k482l k483l k484l k485l k486l k487l k488l k489l k490l 
k491l k492l k493l k494l k495l k496l k497l k498l k499l k500l 
k501l k502l k503l k504l k505l k506l k507l k508l k509l k510l 
k511l k512l k513l k514l k515l k516l k517l k518l k519l k520l 
k521l k522l k523l k524l k525l k526l k527l k528l k529l k530l 
k531l k532l k533l k534l k535l k536l k537l k538l k539l k540l 
k541l k542l k543l k544l k545l k546l k547l k548l k549l k550l 
k551l k552l k553l k554l k555l k556l k557l k558l k559l k560l 
k561l k562l k563l k564l k565l k566l k567l k568l k569l k570l 
k571l k572l k573l k574l k575l k576l k577l k578l k579l k580l 
k581l k582l k583l k584l k585l k586l k587l k588l k589l k590l 
k591l k592l k593l k594l k595l k596l k597l k598l k599l k600l 
k601l k602l k603l k604l k605l k606l k607l k608l k609l k610l 
k611l k612l k613l k614l k615l k616l k617l k618l k619l k620l 
k621l k622l k623l k624l k625l k626l k627l k628l k629l k630l 
k631l k632l k633l k634l k635l k636l k637l k638l k639l k640l 
k641l k642l k643l k644l k645l k646l k647l k648l k649l k650l 
k651l k652l k653l k654l k655l k656l k657l k658l k659l k660l 
k661l k662l k663l k664l k665l k666l k667l k668l k669l k670l 
k671l k672l k673l k674l k675l k676l k677l k678l k679l k680l 
k681l k682l k683l k684l k685l k686l k687l k688l k689l k690l 
k691l k692l k693l k694l k695l k696l k697l k698l k699l k700l 
k701l k702l k703l k704l k705l k706l k707l k708l k709l k710l 
k711l k712l k713l k714l k715l k716l k717l k718l k719l k720l 
k721l k722l k723l k724l k725l k726l k727l k728l k729l k730l 
k731l k732l k733l k734l k735l k736l k737l k738l k739l k740l 
k741l k742l k743l k744l k745l k746l k747l k748l k749l k750l 
k751l k752l k753l k754l k755l k756l k757l k758l k759l k760l 
k761l k762l k763l k764l k765l k766l k767l k768l k769l k770l 
k771l k772l k773l k774l k775l k776l k777l k778l k779l k780l 
k781l k782l k783l k784l k785l k786l k787l k788l k789l k790l 
k791l k792l k793l k794l k795l k796l k797l k798l k799l k800l 
k801l k802l k803l k804l k805l k806l k807l k808l k809l k810l 
k811l k812l k813l k814l k815l k816l k817l k818l k819l k820l 
k821l k822l k823l k824l k825l k826l k827l k828l k829l k830l 
k831l k832l k833l k834l k835l k836l k837l k838l k839l k840l 
k841l k842l k843l k844l k845l k846l k847l k848l k849l k850l 
k851l k852l k853l k854l k855l k856l k857l k858l k859l k860l 
k861l k862l k863l k864l k865l k866l k867l k868l k869l k870l 
k871l k872l k873l k874l k875l k876l k877l k878l k879l k880l 
k881l k882l k883l k884l k885l k886l k887l k888l k889l k890l 
k891l k892l k893l k894l k895l k896l k897l k898l k899l k900l 
k901l k902l k903l k904l k905l k906l k907l k908l k909l k910l 
k911l k912l k913l k914l k915l k916l k917l k918l k919l k920l 
k921l k922l k923l k924l k925l k926l k927l k928l k929l k930l 
k931l k932l k933l k934l k935l k936l k937l k938l k939l k940l 
k941l k942l k943l k944l k945l k946l k947l k948l k949l k950l 
k951l k952l k953l k954l k955l k956l k957l k958l k959l k960l 
k961l k962l k963l k964l k965l k966l k967l k968l k969l k970l 
k971l k972l k973l k974l k975l k976l k977l k978l k979l k980l 
k981l k982l k983l k984l k985l k986l k987l k988l k989l k990l 
k991l k992l k993l k994l k995l k996l k997l k998l k999l k1000l : -> LocalVar .


  ops k1  k2  k3  k4  k5  k6  k7  k8  k9  k10
      k11 k12 k13 k14 k15 k16 k17 k18 k19 k20
      k21 k22 k23 k24 k25 k26 k27 k28 k29 k30
      k31 k32 k33 k34 k35 k36 k37 k38 k39 k40
      k41 k42 k43 k44 k45 k46 k47 k48 k49 k50
      k51 k52 k53 k54 k55 k56 k57 k58 k59 k60
      k61 k62 k63 k64 k65 k66 k67 k68 k69 k70
      k71 k72 k73 k74 k75 k76 k77 k78 k79 k80
      k81 k82 k83 k84 k85 k86 k87 k88 k89 k90
      k91 k92 k93 k94 k95 k96 k97 k98 k99 k100 
      k101 k102 k103 k104 k105 k106 k107 k108 k109 k110 
      k111 k112 k113 k114 k115 k116 k117 k118 k119 k120 
      k121 k122 k123 k124 k125 k126 k127 k128 k129 k130 
      k131 k132 k133 k134 k135 k136 k137 k138 k139 k140 
      k141 k142 k143 k144 k145 k146 k147 k148 k149 k150 
      k151 k152 k153 k154 k155 k156 k157 k158 k159 k160 
      k161 k162 k163 k164 k165 k166 k167 k168 k169 k170 
      k171 k172 k173 k174 k175 k176 k177 k178 k179 k180 
      k181 k182 k183 k184 k185 k186 k187 k188 k189 k190 
      k191 k192 k193 k194 k195 k196 k197 k198 k199 k200
k201 k202 k203 k204 k205 k206 k207 k208 k209 k210 
k211 k212 k213 k214 k215 k216 k217 k218 k219 k220 
k221 k222 k223 k224 k225 k226 k227 k228 k229 k230 
k231 k232 k233 k234 k235 k236 k237 k238 k239 k240 
k241 k242 k243 k244 k245 k246 k247 k248 k249 k250 
k251 k252 k253 k254 k255 k256 k257 k258 k259 k260 
k261 k262 k263 k264 k265 k266 k267 k268 k269 k270 
k271 k272 k273 k274 k275 k276 k277 k278 k279 k280 
k281 k282 k283 k284 k285 k286 k287 k288 k289 k290 
k291 k292 k293 k294 k295 k296 k297 k298 k299 k300 
k301 k302 k303 k304 k305 k306 k307 k308 k309 k310 
k311 k312 k313 k314 k315 k316 k317 k318 k319 k320 
k321 k322 k323 k324 k325 k326 k327 k328 k329 k330 
k331 k332 k333 k334 k335 k336 k337 k338 k339 k340 
k341 k342 k343 k344 k345 k346 k347 k348 k349 k350 
k351 k352 k353 k354 k355 k356 k357 k358 k359 k360 
k361 k362 k363 k364 k365 k366 k367 k368 k369 k370 
k371 k372 k373 k374 k375 k376 k377 k378 k379 k380 
k381 k382 k383 k384 k385 k386 k387 k388 k389 k390 
k391 k392 k393 k394 k395 k396 k397 k398 k399 k400 
k401 k402 k403 k404 k405 k406 k407 k408 k409 k410 
k411 k412 k413 k414 k415 k416 k417 k418 k419 k420 
k421 k422 k423 k424 k425 k426 k427 k428 k429 k430 
k431 k432 k433 k434 k435 k436 k437 k438 k439 k440 
k441 k442 k443 k444 k445 k446 k447 k448 k449 k450 
k451 k452 k453 k454 k455 k456 k457 k458 k459 k460 
k461 k462 k463 k464 k465 k466 k467 k468 k469 k470 
k471 k472 k473 k474 k475 k476 k477 k478 k479 k480 
k481 k482 k483 k484 k485 k486 k487 k488 k489 k490 
k491 k492 k493 k494 k495 k496 k497 k498 k499 k500 
k501 k502 k503 k504 k505 k506 k507 k508 k509 k510 
k511 k512 k513 k514 k515 k516 k517 k518 k519 k520 
k521 k522 k523 k524 k525 k526 k527 k528 k529 k530 
k531 k532 k533 k534 k535 k536 k537 k538 k539 k540 
k541 k542 k543 k544 k545 k546 k547 k548 k549 k550 
k551 k552 k553 k554 k555 k556 k557 k558 k559 k560 
k561 k562 k563 k564 k565 k566 k567 k568 k569 k570 
k571 k572 k573 k574 k575 k576 k577 k578 k579 k580 
k581 k582 k583 k584 k585 k586 k587 k588 k589 k590 
k591 k592 k593 k594 k595 k596 k597 k598 k599 k600 
k601 k602 k603 k604 k605 k606 k607 k608 k609 k610 
k611 k612 k613 k614 k615 k616 k617 k618 k619 k620 
k621 k622 k623 k624 k625 k626 k627 k628 k629 k630 
k631 k632 k633 k634 k635 k636 k637 k638 k639 k640 
k641 k642 k643 k644 k645 k646 k647 k648 k649 k650 
k651 k652 k653 k654 k655 k656 k657 k658 k659 k660 
k661 k662 k663 k664 k665 k666 k667 k668 k669 k670 
k671 k672 k673 k674 k675 k676 k677 k678 k679 k680 
k681 k682 k683 k684 k685 k686 k687 k688 k689 k690 
k691 k692 k693 k694 k695 k696 k697 k698 k699 k700 
k701 k702 k703 k704 k705 k706 k707 k708 k709 k710 
k711 k712 k713 k714 k715 k716 k717 k718 k719 k720 
k721 k722 k723 k724 k725 k726 k727 k728 k729 k730 
k731 k732 k733 k734 k735 k736 k737 k738 k739 k740 
k741 k742 k743 k744 k745 k746 k747 k748 k749 k750 
k751 k752 k753 k754 k755 k756 k757 k758 k759 k760 
k761 k762 k763 k764 k765 k766 k767 k768 k769 k770 
k771 k772 k773 k774 k775 k776 k777 k778 k779 k780 
k781 k782 k783 k784 k785 k786 k787 k788 k789 k790 
k791 k792 k793 k794 k795 k796 k797 k798 k799 k800 
k801 k802 k803 k804 k805 k806 k807 k808 k809 k810 
k811 k812 k813 k814 k815 k816 k817 k818 k819 k820 
k821 k822 k823 k824 k825 k826 k827 k828 k829 k830 
k831 k832 k833 k834 k835 k836 k837 k838 k839 k840 
k841 k842 k843 k844 k845 k846 k847 k848 k849 k850 
k851 k852 k853 k854 k855 k856 k857 k858 k859 k860 
k861 k862 k863 k864 k865 k866 k867 k868 k869 k870 
k871 k872 k873 k874 k875 k876 k877 k878 k879 k880 
k881 k882 k883 k884 k885 k886 k887 k888 k889 k890 
k891 k892 k893 k894 k895 k896 k897 k898 k899 k900 
k901 k902 k903 k904 k905 k906 k907 k908 k909 k910 
k911 k912 k913 k914 k915 k916 k917 k918 k919 k920 
k921 k922 k923 k924 k925 k926 k927 k928 k929 k930 
k931 k932 k933 k934 k935 k936 k937 k938 k939 k940 
k941 k942 k943 k944 k945 k946 k947 k948 k949 k950 
k951 k952 k953 k954 k955 k956 k957 k958 k959 k960 
k961 k962 k963 k964 k965 k966 k967 k968 k969 k970 
k971 k972 k973 k974 k975 k976 k977 k978 k979 k980 
k981 k982 k983 k984 k985 k986 k987 k988 k989 k990 
k991 k992 k993 k994 k995 k996 k997 k998 k999 k1000 : -> Key .

  op keyVars : -> KeyVars .
 eq keyVars = < k1,k1l > ; < k2,k2l > ; < k3,k3l > ; < k4,k4l > ; < k5,k5l > ; 
               < k6,k6l > ; < k7,k7l > ; < k8,k8l > ; < k9,k9l > ; < k10,k10l > ;
               < k11,k11l > ; < k12,k12l > ; < k13,k13l > ; < k14,k14l > ; < k15,k15l > ; 
               < k16,k16l > ; < k17,k17l > ; < k18,k18l > ; < k19,k19l > ; < k20,k20l > ; 
               < k21,k21l > ; < k22,k22l > ; < k23,k23l > ; < k24,k24l > ; < k25,k25l > ; 
               < k26,k26l > ; < k27,k27l > ; < k28,k28l > ; < k29,k29l > ; < k30,k30l > ; 
               < k31,k31l > ; < k32,k32l > ; < k33,k33l > ; < k34,k34l > ; < k35,k35l > ; 
               < k36,k36l > ; < k37,k37l > ; < k38,k38l > ; < k39,k39l > ; < k40,k40l > ; 
               < k41,k41l > ; < k42,k42l > ; < k43,k43l > ; < k44,k44l > ; < k45,k45l > ; 
               < k46,k46l > ; < k47,k47l > ; < k48,k48l > ; < k49,k49l > ; < k50,k50l > ; 
               < k51,k51l > ; < k52,k52l > ; < k53,k53l > ; < k54,k54l > ; < k55,k55l > ; 
               < k56,k56l > ; < k57,k57l > ; < k58,k58l > ; < k59,k59l > ; < k60,k60l > ; 
               < k61,k61l > ; < k62,k62l > ; < k63,k63l > ; < k64,k64l > ; < k65,k65l > ; 
               < k66,k66l > ; < k67,k67l > ; < k68,k68l > ; < k69,k69l > ; < k70,k70l > ; 
               < k71,k71l > ; < k72,k72l > ; < k73,k73l > ; < k74,k74l > ; < k75,k75l > ; 
               < k76,k76l > ; < k77,k77l > ; < k78,k78l > ; < k79,k79l > ; < k80,k80l > ; 
               < k81,k81l > ; < k82,k82l > ; < k83,k83l > ; < k84,k84l > ; < k85,k85l > ; 
               < k86,k86l > ; < k87,k87l > ; < k88,k88l > ; < k89,k89l > ; < k90,k90l > ; 
               < k91,k91l > ; < k92,k92l > ; < k93,k93l > ; < k94,k94l > ; < k95,k95l > ; 
               < k96,k96l > ; < k97,k97l > ; < k98,k98l > ; < k99,k99l > ; < k100,k100l > ;
               < k101, k101l > ; < k102, k102l > ; < k103, k103l > ; < k104, k104l > ;
               < k105, k105l > ; < k106, k106l > ; < k107, k107l > ; < k108, k108l > ;
               < k109, k109l > ; < k110, k110l > ; < k111, k111l > ; < k112, k112l > ;
               < k113, k113l > ; < k114, k114l > ; < k115, k115l > ; < k116, k116l > ;
               < k117, k117l > ; < k118, k118l > ; < k119, k119l > ; < k120, k120l > ;
               < k121, k121l > ; < k122, k122l > ; < k123, k123l > ; < k124, k124l > ;
               < k125, k125l > ; < k126, k126l > ; < k127, k127l > ; < k128, k128l > ;
               < k129, k129l > ; < k130, k130l > ; < k131, k131l > ; < k132, k132l > ;
               < k133, k133l > ; < k134, k134l > ; < k135, k135l > ; < k136, k136l > ;
               < k137, k137l > ; < k138, k138l > ; < k139, k139l > ; < k140, k140l > ;
               < k141, k141l > ; < k142, k142l > ; < k143, k143l > ; < k144, k144l > ;
               < k145, k145l > ; < k146, k146l > ; < k147, k147l > ; < k148, k148l > ;
               < k149, k149l > ; < k150, k150l > ; < k151, k151l > ; < k152, k152l > ;
               < k153, k153l > ; < k154, k154l > ; < k155, k155l > ; < k156, k156l > ;
               < k157, k157l > ; < k158, k158l > ; < k159, k159l > ; < k160, k160l > ;
               < k161, k161l > ; < k162, k162l > ; < k163, k163l > ; < k164, k164l > ;
               < k165, k165l > ; < k166, k166l > ; < k167, k167l > ; < k168, k168l > ;
               < k169, k169l > ; < k170, k170l > ; < k171, k171l > ; < k172, k172l > ;
               < k173, k173l > ; < k174, k174l > ; < k175, k175l > ; < k176, k176l > ;
               < k177, k177l > ; < k178, k178l > ; < k179, k179l > ; < k180, k180l > ;
               < k181, k181l > ; < k182, k182l > ; < k183, k183l > ; < k184, k184l > ;
               < k185, k185l > ; < k186, k186l > ; < k187, k187l > ; < k188, k188l > ;
               < k189, k189l > ; < k190, k190l > ; < k191, k191l > ; < k192, k192l > ;
               < k193, k193l > ; < k194, k194l > ; < k195, k195l > ; < k196, k196l > ;
               < k197, k197l > ; < k198, k198l > ; < k199, k199l > ; < k200, k200l > ;
< k201, k201l > ; < k202, k202l > ; < k203, k203l > ; < k204, k204l > ; 
< k205, k205l > ; < k206, k206l > ; < k207, k207l > ; < k208, k208l > ; 
< k209, k209l > ; < k210, k210l > ; < k211, k211l > ; < k212, k212l > ; 
< k213, k213l > ; < k214, k214l > ; < k215, k215l > ; < k216, k216l > ; 
< k217, k217l > ; < k218, k218l > ; < k219, k219l > ; < k220, k220l > ; 
< k221, k221l > ; < k222, k222l > ; < k223, k223l > ; < k224, k224l > ; 
< k225, k225l > ; < k226, k226l > ; < k227, k227l > ; < k228, k228l > ; 
< k229, k229l > ; < k230, k230l > ; < k231, k231l > ; < k232, k232l > ; 
< k233, k233l > ; < k234, k234l > ; < k235, k235l > ; < k236, k236l > ; 
< k237, k237l > ; < k238, k238l > ; < k239, k239l > ; < k240, k240l > ; 
< k241, k241l > ; < k242, k242l > ; < k243, k243l > ; < k244, k244l > ; 
< k245, k245l > ; < k246, k246l > ; < k247, k247l > ; < k248, k248l > ; 
< k249, k249l > ; < k250, k250l > ; < k251, k251l > ; < k252, k252l > ; 
< k253, k253l > ; < k254, k254l > ; < k255, k255l > ; < k256, k256l > ; 
< k257, k257l > ; < k258, k258l > ; < k259, k259l > ; < k260, k260l > ; 
< k261, k261l > ; < k262, k262l > ; < k263, k263l > ; < k264, k264l > ; 
< k265, k265l > ; < k266, k266l > ; < k267, k267l > ; < k268, k268l > ; 
< k269, k269l > ; < k270, k270l > ; < k271, k271l > ; < k272, k272l > ; 
< k273, k273l > ; < k274, k274l > ; < k275, k275l > ; < k276, k276l > ; 
< k277, k277l > ; < k278, k278l > ; < k279, k279l > ; < k280, k280l > ; 
< k281, k281l > ; < k282, k282l > ; < k283, k283l > ; < k284, k284l > ; 
< k285, k285l > ; < k286, k286l > ; < k287, k287l > ; < k288, k288l > ; 
< k289, k289l > ; < k290, k290l > ; < k291, k291l > ; < k292, k292l > ; 
< k293, k293l > ; < k294, k294l > ; < k295, k295l > ; < k296, k296l > ; 
< k297, k297l > ; < k298, k298l > ; < k299, k299l > ; < k300, k300l > ; 
< k301, k301l > ; < k302, k302l > ; < k303, k303l > ; < k304, k304l > ; 
< k305, k305l > ; < k306, k306l > ; < k307, k307l > ; < k308, k308l > ; 
< k309, k309l > ; < k310, k310l > ; < k311, k311l > ; < k312, k312l > ; 
< k313, k313l > ; < k314, k314l > ; < k315, k315l > ; < k316, k316l > ; 
< k317, k317l > ; < k318, k318l > ; < k319, k319l > ; < k320, k320l > ; 
< k321, k321l > ; < k322, k322l > ; < k323, k323l > ; < k324, k324l > ; 
< k325, k325l > ; < k326, k326l > ; < k327, k327l > ; < k328, k328l > ; 
< k329, k329l > ; < k330, k330l > ; < k331, k331l > ; < k332, k332l > ; 
< k333, k333l > ; < k334, k334l > ; < k335, k335l > ; < k336, k336l > ; 
< k337, k337l > ; < k338, k338l > ; < k339, k339l > ; < k340, k340l > ; 
< k341, k341l > ; < k342, k342l > ; < k343, k343l > ; < k344, k344l > ; 
< k345, k345l > ; < k346, k346l > ; < k347, k347l > ; < k348, k348l > ; 
< k349, k349l > ; < k350, k350l > ; < k351, k351l > ; < k352, k352l > ; 
< k353, k353l > ; < k354, k354l > ; < k355, k355l > ; < k356, k356l > ; 
< k357, k357l > ; < k358, k358l > ; < k359, k359l > ; < k360, k360l > ; 
< k361, k361l > ; < k362, k362l > ; < k363, k363l > ; < k364, k364l > ; 
< k365, k365l > ; < k366, k366l > ; < k367, k367l > ; < k368, k368l > ; 
< k369, k369l > ; < k370, k370l > ; < k371, k371l > ; < k372, k372l > ; 
< k373, k373l > ; < k374, k374l > ; < k375, k375l > ; < k376, k376l > ; 
< k377, k377l > ; < k378, k378l > ; < k379, k379l > ; < k380, k380l > ; 
< k381, k381l > ; < k382, k382l > ; < k383, k383l > ; < k384, k384l > ; 
< k385, k385l > ; < k386, k386l > ; < k387, k387l > ; < k388, k388l > ; 
< k389, k389l > ; < k390, k390l > ; < k391, k391l > ; < k392, k392l > ; 
< k393, k393l > ; < k394, k394l > ; < k395, k395l > ; < k396, k396l > ; 
< k397, k397l > ; < k398, k398l > ; < k399, k399l > ; < k400, k400l > ; 
< k401, k401l > ; < k402, k402l > ; < k403, k403l > ; < k404, k404l > ; 
< k405, k405l > ; < k406, k406l > ; < k407, k407l > ; < k408, k408l > ; 
< k409, k409l > ; < k410, k410l > ; < k411, k411l > ; < k412, k412l > ; 
< k413, k413l > ; < k414, k414l > ; < k415, k415l > ; < k416, k416l > ; 
< k417, k417l > ; < k418, k418l > ; < k419, k419l > ; < k420, k420l > ; 
< k421, k421l > ; < k422, k422l > ; < k423, k423l > ; < k424, k424l > ; 
< k425, k425l > ; < k426, k426l > ; < k427, k427l > ; < k428, k428l > ; 
< k429, k429l > ; < k430, k430l > ; < k431, k431l > ; < k432, k432l > ; 
< k433, k433l > ; < k434, k434l > ; < k435, k435l > ; < k436, k436l > ; 
< k437, k437l > ; < k438, k438l > ; < k439, k439l > ; < k440, k440l > ; 
< k441, k441l > ; < k442, k442l > ; < k443, k443l > ; < k444, k444l > ; 
< k445, k445l > ; < k446, k446l > ; < k447, k447l > ; < k448, k448l > ; 
< k449, k449l > ; < k450, k450l > ; < k451, k451l > ; < k452, k452l > ; 
< k453, k453l > ; < k454, k454l > ; < k455, k455l > ; < k456, k456l > ; 
< k457, k457l > ; < k458, k458l > ; < k459, k459l > ; < k460, k460l > ; 
< k461, k461l > ; < k462, k462l > ; < k463, k463l > ; < k464, k464l > ; 
< k465, k465l > ; < k466, k466l > ; < k467, k467l > ; < k468, k468l > ; 
< k469, k469l > ; < k470, k470l > ; < k471, k471l > ; < k472, k472l > ; 
< k473, k473l > ; < k474, k474l > ; < k475, k475l > ; < k476, k476l > ; 
< k477, k477l > ; < k478, k478l > ; < k479, k479l > ; < k480, k480l > ; 
< k481, k481l > ; < k482, k482l > ; < k483, k483l > ; < k484, k484l > ; 
< k485, k485l > ; < k486, k486l > ; < k487, k487l > ; < k488, k488l > ; 
< k489, k489l > ; < k490, k490l > ; < k491, k491l > ; < k492, k492l > ; 
< k493, k493l > ; < k494, k494l > ; < k495, k495l > ; < k496, k496l > ; 
< k497, k497l > ; < k498, k498l > ; < k499, k499l > ; < k500, k500l > ; 
< k501, k501l > ; < k502, k502l > ; < k503, k503l > ; < k504, k504l > ; 
< k505, k505l > ; < k506, k506l > ; < k507, k507l > ; < k508, k508l > ; 
< k509, k509l > ; < k510, k510l > ; < k511, k511l > ; < k512, k512l > ; 
< k513, k513l > ; < k514, k514l > ; < k515, k515l > ; < k516, k516l > ; 
< k517, k517l > ; < k518, k518l > ; < k519, k519l > ; < k520, k520l > ; 
< k521, k521l > ; < k522, k522l > ; < k523, k523l > ; < k524, k524l > ; 
< k525, k525l > ; < k526, k526l > ; < k527, k527l > ; < k528, k528l > ; 
< k529, k529l > ; < k530, k530l > ; < k531, k531l > ; < k532, k532l > ; 
< k533, k533l > ; < k534, k534l > ; < k535, k535l > ; < k536, k536l > ; 
< k537, k537l > ; < k538, k538l > ; < k539, k539l > ; < k540, k540l > ; 
< k541, k541l > ; < k542, k542l > ; < k543, k543l > ; < k544, k544l > ; 
< k545, k545l > ; < k546, k546l > ; < k547, k547l > ; < k548, k548l > ; 
< k549, k549l > ; < k550, k550l > ; < k551, k551l > ; < k552, k552l > ; 
< k553, k553l > ; < k554, k554l > ; < k555, k555l > ; < k556, k556l > ; 
< k557, k557l > ; < k558, k558l > ; < k559, k559l > ; < k560, k560l > ; 
< k561, k561l > ; < k562, k562l > ; < k563, k563l > ; < k564, k564l > ; 
< k565, k565l > ; < k566, k566l > ; < k567, k567l > ; < k568, k568l > ; 
< k569, k569l > ; < k570, k570l > ; < k571, k571l > ; < k572, k572l > ; 
< k573, k573l > ; < k574, k574l > ; < k575, k575l > ; < k576, k576l > ; 
< k577, k577l > ; < k578, k578l > ; < k579, k579l > ; < k580, k580l > ; 
< k581, k581l > ; < k582, k582l > ; < k583, k583l > ; < k584, k584l > ; 
< k585, k585l > ; < k586, k586l > ; < k587, k587l > ; < k588, k588l > ; 
< k589, k589l > ; < k590, k590l > ; < k591, k591l > ; < k592, k592l > ; 
< k593, k593l > ; < k594, k594l > ; < k595, k595l > ; < k596, k596l > ; 
< k597, k597l > ; < k598, k598l > ; < k599, k599l > ; < k600, k600l > ; 
< k601, k601l > ; < k602, k602l > ; < k603, k603l > ; < k604, k604l > ; 
< k605, k605l > ; < k606, k606l > ; < k607, k607l > ; < k608, k608l > ; 
< k609, k609l > ; < k610, k610l > ; < k611, k611l > ; < k612, k612l > ; 
< k613, k613l > ; < k614, k614l > ; < k615, k615l > ; < k616, k616l > ; 
< k617, k617l > ; < k618, k618l > ; < k619, k619l > ; < k620, k620l > ; 
< k621, k621l > ; < k622, k622l > ; < k623, k623l > ; < k624, k624l > ; 
< k625, k625l > ; < k626, k626l > ; < k627, k627l > ; < k628, k628l > ; 
< k629, k629l > ; < k630, k630l > ; < k631, k631l > ; < k632, k632l > ; 
< k633, k633l > ; < k634, k634l > ; < k635, k635l > ; < k636, k636l > ; 
< k637, k637l > ; < k638, k638l > ; < k639, k639l > ; < k640, k640l > ; 
< k641, k641l > ; < k642, k642l > ; < k643, k643l > ; < k644, k644l > ; 
< k645, k645l > ; < k646, k646l > ; < k647, k647l > ; < k648, k648l > ; 
< k649, k649l > ; < k650, k650l > ; < k651, k651l > ; < k652, k652l > ; 
< k653, k653l > ; < k654, k654l > ; < k655, k655l > ; < k656, k656l > ; 
< k657, k657l > ; < k658, k658l > ; < k659, k659l > ; < k660, k660l > ; 
< k661, k661l > ; < k662, k662l > ; < k663, k663l > ; < k664, k664l > ; 
< k665, k665l > ; < k666, k666l > ; < k667, k667l > ; < k668, k668l > ; 
< k669, k669l > ; < k670, k670l > ; < k671, k671l > ; < k672, k672l > ; 
< k673, k673l > ; < k674, k674l > ; < k675, k675l > ; < k676, k676l > ; 
< k677, k677l > ; < k678, k678l > ; < k679, k679l > ; < k680, k680l > ; 
< k681, k681l > ; < k682, k682l > ; < k683, k683l > ; < k684, k684l > ; 
< k685, k685l > ; < k686, k686l > ; < k687, k687l > ; < k688, k688l > ; 
< k689, k689l > ; < k690, k690l > ; < k691, k691l > ; < k692, k692l > ; 
< k693, k693l > ; < k694, k694l > ; < k695, k695l > ; < k696, k696l > ; 
< k697, k697l > ; < k698, k698l > ; < k699, k699l > ; < k700, k700l > ; 
< k701, k701l > ; < k702, k702l > ; < k703, k703l > ; < k704, k704l > ; 
< k705, k705l > ; < k706, k706l > ; < k707, k707l > ; < k708, k708l > ; 
< k709, k709l > ; < k710, k710l > ; < k711, k711l > ; < k712, k712l > ; 
< k713, k713l > ; < k714, k714l > ; < k715, k715l > ; < k716, k716l > ; 
< k717, k717l > ; < k718, k718l > ; < k719, k719l > ; < k720, k720l > ; 
< k721, k721l > ; < k722, k722l > ; < k723, k723l > ; < k724, k724l > ; 
< k725, k725l > ; < k726, k726l > ; < k727, k727l > ; < k728, k728l > ; 
< k729, k729l > ; < k730, k730l > ; < k731, k731l > ; < k732, k732l > ; 
< k733, k733l > ; < k734, k734l > ; < k735, k735l > ; < k736, k736l > ; 
< k737, k737l > ; < k738, k738l > ; < k739, k739l > ; < k740, k740l > ; 
< k741, k741l > ; < k742, k742l > ; < k743, k743l > ; < k744, k744l > ; 
< k745, k745l > ; < k746, k746l > ; < k747, k747l > ; < k748, k748l > ; 
< k749, k749l > ; < k750, k750l > ; < k751, k751l > ; < k752, k752l > ; 
< k753, k753l > ; < k754, k754l > ; < k755, k755l > ; < k756, k756l > ; 
< k757, k757l > ; < k758, k758l > ; < k759, k759l > ; < k760, k760l > ; 
< k761, k761l > ; < k762, k762l > ; < k763, k763l > ; < k764, k764l > ; 
< k765, k765l > ; < k766, k766l > ; < k767, k767l > ; < k768, k768l > ; 
< k769, k769l > ; < k770, k770l > ; < k771, k771l > ; < k772, k772l > ; 
< k773, k773l > ; < k774, k774l > ; < k775, k775l > ; < k776, k776l > ; 
< k777, k777l > ; < k778, k778l > ; < k779, k779l > ; < k780, k780l > ; 
< k781, k781l > ; < k782, k782l > ; < k783, k783l > ; < k784, k784l > ; 
< k785, k785l > ; < k786, k786l > ; < k787, k787l > ; < k788, k788l > ; 
< k789, k789l > ; < k790, k790l > ; < k791, k791l > ; < k792, k792l > ; 
< k793, k793l > ; < k794, k794l > ; < k795, k795l > ; < k796, k796l > ; 
< k797, k797l > ; < k798, k798l > ; < k799, k799l > ; < k800, k800l > ; 
< k801, k801l > ; < k802, k802l > ; < k803, k803l > ; < k804, k804l > ; 
< k805, k805l > ; < k806, k806l > ; < k807, k807l > ; < k808, k808l > ; 
< k809, k809l > ; < k810, k810l > ; < k811, k811l > ; < k812, k812l > ; 
< k813, k813l > ; < k814, k814l > ; < k815, k815l > ; < k816, k816l > ; 
< k817, k817l > ; < k818, k818l > ; < k819, k819l > ; < k820, k820l > ; 
< k821, k821l > ; < k822, k822l > ; < k823, k823l > ; < k824, k824l > ; 
< k825, k825l > ; < k826, k826l > ; < k827, k827l > ; < k828, k828l > ; 
< k829, k829l > ; < k830, k830l > ; < k831, k831l > ; < k832, k832l > ; 
< k833, k833l > ; < k834, k834l > ; < k835, k835l > ; < k836, k836l > ; 
< k837, k837l > ; < k838, k838l > ; < k839, k839l > ; < k840, k840l > ; 
< k841, k841l > ; < k842, k842l > ; < k843, k843l > ; < k844, k844l > ; 
< k845, k845l > ; < k846, k846l > ; < k847, k847l > ; < k848, k848l > ; 
< k849, k849l > ; < k850, k850l > ; < k851, k851l > ; < k852, k852l > ; 
< k853, k853l > ; < k854, k854l > ; < k855, k855l > ; < k856, k856l > ; 
< k857, k857l > ; < k858, k858l > ; < k859, k859l > ; < k860, k860l > ; 
< k861, k861l > ; < k862, k862l > ; < k863, k863l > ; < k864, k864l > ; 
< k865, k865l > ; < k866, k866l > ; < k867, k867l > ; < k868, k868l > ; 
< k869, k869l > ; < k870, k870l > ; < k871, k871l > ; < k872, k872l > ; 
< k873, k873l > ; < k874, k874l > ; < k875, k875l > ; < k876, k876l > ; 
< k877, k877l > ; < k878, k878l > ; < k879, k879l > ; < k880, k880l > ; 
< k881, k881l > ; < k882, k882l > ; < k883, k883l > ; < k884, k884l > ; 
< k885, k885l > ; < k886, k886l > ; < k887, k887l > ; < k888, k888l > ; 
< k889, k889l > ; < k890, k890l > ; < k891, k891l > ; < k892, k892l > ; 
< k893, k893l > ; < k894, k894l > ; < k895, k895l > ; < k896, k896l > ; 
< k897, k897l > ; < k898, k898l > ; < k899, k899l > ; < k900, k900l > ; 
< k901, k901l > ; < k902, k902l > ; < k903, k903l > ; < k904, k904l > ; 
< k905, k905l > ; < k906, k906l > ; < k907, k907l > ; < k908, k908l > ; 
< k909, k909l > ; < k910, k910l > ; < k911, k911l > ; < k912, k912l > ; 
< k913, k913l > ; < k914, k914l > ; < k915, k915l > ; < k916, k916l > ; 
< k917, k917l > ; < k918, k918l > ; < k919, k919l > ; < k920, k920l > ; 
< k921, k921l > ; < k922, k922l > ; < k923, k923l > ; < k924, k924l > ; 
< k925, k925l > ; < k926, k926l > ; < k927, k927l > ; < k928, k928l > ; 
< k929, k929l > ; < k930, k930l > ; < k931, k931l > ; < k932, k932l > ; 
< k933, k933l > ; < k934, k934l > ; < k935, k935l > ; < k936, k936l > ; 
< k937, k937l > ; < k938, k938l > ; < k939, k939l > ; < k940, k940l > ; 
< k941, k941l > ; < k942, k942l > ; < k943, k943l > ; < k944, k944l > ; 
< k945, k945l > ; < k946, k946l > ; < k947, k947l > ; < k948, k948l > ; 
< k949, k949l > ; < k950, k950l > ; < k951, k951l > ; < k952, k952l > ; 
< k953, k953l > ; < k954, k954l > ; < k955, k955l > ; < k956, k956l > ; 
< k957, k957l > ; < k958, k958l > ; < k959, k959l > ; < k960, k960l > ; 
< k961, k961l > ; < k962, k962l > ; < k963, k963l > ; < k964, k964l > ; 
< k965, k965l > ; < k966, k966l > ; < k967, k967l > ; < k968, k968l > ; 
< k969, k969l > ; < k970, k970l > ; < k971, k971l > ; < k972, k972l > ; 
< k973, k973l > ; < k974, k974l > ; < k975, k975l > ; < k976, k976l > ; 
< k977, k977l > ; < k978, k978l > ; < k979, k979l > ; < k980, k980l > ; 
< k981, k981l > ; < k982, k982l > ; < k983, k983l > ; < k984, k984l > ; 
< k985, k985l > ; < k986, k986l > ; < k987, k987l > ; < k988, k988l > ; 
< k989, k989l > ; < k990, k990l > ; < k991, k991l > ; < k992, k992l > ; 
< k993, k993l > ; < k994, k994l > ; < k995, k995l > ; < k996, k996l > ; 
< k997, k997l > ; < k998, k998l > ; < k999, k999l > ; < k1000, k1000l > .
endm

mod MSG-STRING-CONVERSION is
  pr NAMES .
  pr STRING .
  pr META-LEVEL .
  pr CONVERSION .

  vars S S' S'' : String .
  var  CONT : Payload .
  var N : Nat .
  var  Q : Qid .
  vars QIL QIL' : QidList .

  op qidListString : QidList -> String .
  op qidListString : QidList String -> String .

  eq qidListString(QIL) = qidListString(QIL, "") .
  eq qidListString(nil, S) = S .
  eq qidListString(Q QIL, S) = qidListString(QIL, S + string(Q) + " ") .

  op msg2string : Payload -> String .
  eq msg2string(CONT) = qidListString(metaPrettyPrint(upModule('NAMES, false), upTerm(CONT), none)) .
endm

---rew float(length(msg2string(prepare(19 . 1, version(k11,[569],ts(19,2),k7),19)))) .
---rew float(length(msg2string(start))) .

mod REPLICA-TABLE is
  including TXN-AUX1 .

  sort KeyReplicas .

  op emptyTable : -> KeyReplicas [ctor] .
---  op replicatingSites : Key OidSet -> KeyReplicas [ctor] .
  op replicatingSites : Key OidList -> KeyReplicas [ctor] .  --- head of list is preferred site
  op _;;_ : KeyReplicas KeyReplicas -> KeyReplicas [ctor assoc comm id: emptyTable] .


  var RT : KeyReplicas .
  var K : Key .
  var KS : KeySet .
  vars RID RID' : Oid .
  var RIDS : OidSet .
  vars RIDSS RIDSS' : OidList .
  var WS : WriteSet .
  var V : Value .

  op replicas : WriteSet KeyReplicas -> OidSet .
  eq replicas(empty,RT) = empty .
  eq replicas((K |-> V,WS), replicatingSites(K,RIDSS) ;; RT) =
       makeSet(RIDSS) ; replicas(WS,RT) .
  eq replicas(WS,RT) = empty [owise] .

  op allServers : KeyReplicas -> OidSet .
  eq allServers(replicatingSites(K,RIDSS) ;; RT) = 
       makeSet(RIDSS) ; allServers(RT) .
  eq allServers(emptyTable) = empty . 
  
  op makeSet : OidList -> OidSet .
  eq makeSet((RID ;; RIDSS)) = RID ; makeSet(RIDSS) .
  eq makeSet(emptyOidList) = empty .

  op preferredSite : Key KeyReplicas -> Oid .
  eq preferredSite(K,(replicatingSites(K,(RID ;; RIDSS)) ;; RT)) = RID .

  op allPreferredSites : WriteSet KeyReplicas -> OidSet .
  eq allPreferredSites((K |-> V,WS), replicatingSites(K,(RID ;; RIDSS)) ;; RT) =
       RID ; allPreferredSites(WS,RT) .
  eq allPreferredSites(empty,RT) = empty .
  eq allPreferredSites(WS,RT) = empty [owise] .

  op `[_`] : KeyReplicas -> ReplicaTable [ctor] .

  op replicas : WriteSet ReplicaTable -> OidSet .
  eq replicas(WS, [RT]) = replicas(WS, RT) .
  op preferredSite : Key ReplicaTable -> Oid .
  eq preferredSite(K,[RT]) = preferredSite(K,RT) .
  op allServers : ReplicaTable -> OidSet .
  eq allServers([RT]) = allServers(RT) .
  op allPreferredSites : WriteSet ReplicaTable -> OidSet .
  eq allPreferredSites(WS,[RT]) = allPreferredSites(WS,RT) .

  op localReplica : Key Oid ReplicaTable -> Bool .
  op localReplica : Key Oid KeyReplicas -> Bool .
  eq localReplica(K,RID,[RT]) = localReplica(K,RID,RT) .
  eq localReplica(K,RID,replicatingSites(K, RIDSS ;; RID ;; RIDSS') ;; RT) = true .
  eq localReplica(K,RID,RT) = false [owise] .

  op allLocalPreferred : WriteSet Oid ReplicaTable -> Bool .
  op allLocalPreferred : WriteSet Oid KeyReplicas -> Bool .
  eq allLocalPreferred(WS,RID,[RT]) = allLocalPreferred(WS,RID,RT) .
 ceq allLocalPreferred((K |-> V,WS),RID,replicatingSites(K,RID' ;; RIDSS) ;; RT) = false
       if RID =/= RID' .
  eq allLocalPreferred(WS,RID,RT) = true [owise] .

  op _in_ : Oid OidList -> Bool .
  eq RID in (RIDSS ;; RID ;; RIDSS') = true .
  eq RID in RIDSS = false [owise] .

  op locRepWS : WriteSet Oid ReplicaTable -> WriteSet .
  op locRepWS : WriteSet Oid KeyReplicas -> WriteSet .
  eq locRepWS(WS,RID,[RT]) = locRepWS(WS,RID,RT) .
  eq locRepWS((K |-> V,WS),RID,replicatingSites(K,RIDSS ;; RID ;; RIDSS') ;; RT) =
       K |-> V, locRepWS(WS,RID,RT) .
  eq locRepWS(WS,RID,RT) = empty [owise] .
endm


mod F is
  including OBJS .
  including REPLICA-TABLE .
  including VERSION-RAMP .
  including VALUES-NAT .
  
  vars RID TID RID' TABLE M : Oid .
  var RIDS : OidSet .
  vars AS AS' : Attributes .
  vars TXNS TXNS' : ConfigList .
  var K : Key .
  var X : LocalVar .
  var REPLICA-TABLE : ReplicaTable .
  vars OPS OPS' OPS'' : OperationList .
  vars V V' : Value .
  var WS : WriteSet .
  vars VARS VARS' : LocalVars .
  vars RS DS RS' WRITES WRITES' READS : Versions .
  vars LC VL VL' : KeyTimestamps .
  var VERSION : Version .
  vars TS TS' : Timestamp .
  vars MD MD' KS : KeySet .
  var VS : Versions .
  vars SQN SQN' TXNSQN : Int .
  var EXPR : Expression .
  var RT : KeyReplicas .
  vars 1STGETS 1STGETS' : 1stGets .
  vars 2NDGETS 2NDGETS' : 2ndGets .
  vars VSTS CMTS VSTS' CMTS' : VoteSites .
  vars T T1 : Float .
  var FLAG : Bool .
  vars RECORD RECORD' : Record .
 
 
  ---??? simply consume "start" if no txn needs to start
  rl [receiving-start-when-no-txn-to-start] :
     < RID : Replica | gotTxns: emptyTxnList, AS >
     (to RID : start)
   =>
     < RID : Replica | gotTxns: emptyTxnList, AS > . 


  --- "gotTxns" abstracts "client" away
 crl [start-ro-or-rw-txn] :
     (to RID : start)

     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | gotTxns: (< TID : Txn | operations: OPS,
                                               latest: empty, AS > ;; TXNS),
                       executing: none,
                       1stGetSites: 1STGETS, AS' >
   =>

     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | gotTxns: TXNS,
                       executing: < TID : Txn | operations: OPS,
                                                latest: vl(OPS), AS >,  --- initialize "v_latest"
                       1stGetSites: (1STGETS ; 1st(TID,1stSites(OPS,RID,REPLICA-TABLE))), AS' >
     genGets(OPS,RID,TID,REPLICA-TABLE) 
     if (not write-only(OPS)) .  

  op write-only : OperationList -> Bool .
  eq write-only((OPS (X :=read K) OPS')) = false .
  eq write-only(OPS) = true [owise] .		

  op genGets : OperationList Oid Oid ReplicaTable -> Msgs .
  eq genGets(((X :=read K) OPS),RID,TID,REPLICA-TABLE) = 
       genGets(OPS,RID,TID,REPLICA-TABLE)
       if localReplica(K,RID,REPLICA-TABLE)
         then (to RID from RID : get(TID,K,eptTS,RID))  --- eptTS denotes "empty" in line 25
         else (to preferredSite(K,REPLICA-TABLE) from RID : get(TID,K,eptTS,RID))
       fi .
  eq genGets((write(K,EXPR) OPS),RID,TID,REPLICA-TABLE) =
       genGets(OPS,RID,TID,REPLICA-TABLE) .
  eq genGets(nil,RID,TID,REPLICA-TABLE) = null .	
  
  op 1stSites : OperationList Oid ReplicaTable -> OidSet .
  eq 1stSites(((X :=read K) OPS),RID,REPLICA-TABLE) =
       if localReplica(K,RID,REPLICA-TABLE)
         then RID ; 1stSites(OPS,RID,REPLICA-TABLE) 
         else preferredSite(K,REPLICA-TABLE) ; 1stSites(OPS,RID,REPLICA-TABLE)
       fi .
  eq 1stSites((write(K,EXPR) OPS),RID,REPLICA-TABLE) =
       1stSites(OPS,RID,REPLICA-TABLE) .
  eq 1stSites(nil,RID,REPLICA-TABLE) = empty .	
  
  op vl : OperationList -> KeyTimestamps .
  eq vl((write(K,EXPR) OPS)) = vl(OPS) .
  eq vl(((X :=read K) OPS)) = K |-> ts(-1,-1), vl(OPS) .
  eq vl(nil) = empty .
  
  
   ---!!! RAMP doesn't need "txnSQN" as ROLA does because "sqn" could only be updated at the beginning of the txn
  crl [start-wo-txn] :
      (to RID : start)

      < TABLE : Table | table: REPLICA-TABLE >
      < RID : Replica | gotTxns: (< TID : Txn | operations: OPS,
                                                localVars: VARS, AS > ;; TXNS),
                        executing: none,
                        sqn: SQN,
                        voteSites: VSTS, AS' >
    =>

      < TABLE : Table | table: REPLICA-TABLE >
      < RID : Replica | gotTxns: TXNS,
                        executing: < TID : Txn | operations: OPS,
                                                 localVars: VARS, AS >,
                        sqn: (SQN + 1),
                        voteSites: (VSTS ; voteSites(TID,prepareSites(OPS,RID,REPLICA-TABLE))), AS' >
      genPuts(OPS,RID,TID,(SQN + 1),VARS,REPLICA-TABLE)
      if write-only(OPS) .
	  
	  
  op prepareSites : OperationList Oid ReplicaTable -> OidSet .
  eq prepareSites((write(K,EXPR) OPS),RID,REPLICA-TABLE) =
       if localReplica(K,RID,REPLICA-TABLE)
         then RID ; prepareSites(OPS,RID,REPLICA-TABLE)
         else preferredSite(K,REPLICA-TABLE) ; prepareSites(OPS,RID,REPLICA-TABLE)
       fi .
  eq prepareSites(((X :=read K) OPS),RID,REPLICA-TABLE) =
       prepareSites(OPS,RID,REPLICA-TABLE) .
  eq prepareSites(nil,RID,REPLICA-TABLE) = empty .
  
  
  op genPuts : OperationList Oid Oid Nat LocalVars ReplicaTable -> Msgs .
  op $genPuts : OperationList Oid Oid Nat LocalVars ReplicaTable OperationList -> Msgs .
  eq genPuts(OPS,RID,TID,SQN,VARS,REPLICA-TABLE) = $genPuts(OPS,RID,TID,SQN,VARS,REPLICA-TABLE,OPS) .
  eq $genPuts((write(K,EXPR) OPS),RID,TID,SQN,VARS,REPLICA-TABLE,(OPS' write(K,EXPR) OPS'')) =
       $genPuts(OPS,RID,TID,SQN,VARS,REPLICA-TABLE,(OPS' write(K,EXPR) OPS''))
       if localReplica(K,RID,REPLICA-TABLE)
         then (to RID from RID : prepare(TID,version(K,eval(EXPR,VARS),ts(RID,SQN),md(OPS' OPS'')),RID))
         else (to preferredSite(K,REPLICA-TABLE) from RID : prepare(TID,version(K,eval(EXPR,VARS),ts(RID,SQN),md(OPS' OPS'')),RID)) 
       fi .
  eq $genPuts(((X :=read K) OPS),RID,TID,SQN,VARS,REPLICA-TABLE,OPS') = 
       $genPuts(OPS,RID,TID,SQN,VARS,REPLICA-TABLE,OPS') .  --- deal with rw-txns
  eq $genPuts(nil,RID,TID,SQN,VARS,REPLICA-TABLE,OPS') = null .  
  --- Note that when initializing write-only txns EXPR should be Value, e.g., [0]
  --- That is, VARS is useless to genPuts in write-only txns
  
  op md : OperationList -> KeySet .
  eq md((write(K,EXPR) OPS)) = K, md(OPS) .
  eq md(((X :=read K) OPS)) = md(OPS) .
  eq md(nil) = empty .
  
  
  rl [receive-prepare] :
     < RID : Replica | datastore: VS, AS' >
     (to RID from RID' : prepare(TID,VERSION,RID'))
   =>
     < RID : Replica | datastore: (VS,VERSION), AS' >
	 (to RID' from RID : prepare-reply(TID,true,RID)) .  --- always "true" in RAMP
	 
	 
 crl [receive-prepare-reply-1] :
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: OPS, AS >,
                       voteSites: VSTS,
                       sqn: SQN,
                       commitSites: CMTS, AS' >
     (to RID from RID' : prepare-reply(TID,FLAG,RID'))  --- FLAG is always true in RAMP
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: OPS, AS >,
                       voteSites: remove(TID,RID',VSTS),
                       sqn: SQN,
                       commitSites: (CMTS ; voteSites(TID,prepareSites(OPS,RID,REPLICA-TABLE))), AS' >
     genCommits(TID,SQN,prepareSites(OPS,RID,REPLICA-TABLE),RID)

   if remove(TID,RID',VSTS)[TID] == empty .   --- as of now, commitSites == prepareSites
   

  op genCommits : Oid Nat OidSet Oid -> Msgs .
  eq genCommits(TID,SQN,(RID' ; RIDS),RID) =
       genCommits(TID,SQN,RIDS,RID)
	   (to RID' from RID : commit(TID,ts(RID,SQN),RID)) .
  eq genCommits(TID,SQN,empty,RID) = null .	  

  op remove : Oid Oid VoteSites -> VoteSites .
  eq remove(TID,RID,(voteSites(TID,(RID ; RIDS)) ; VSTS)) =
       voteSites(TID,RIDS) ; VSTS .
  eq remove(TID,RID,VSTS) = VSTS [owise] .	  
  
  op _`[_`] : VoteSites Oid -> OidSet .
  eq (voteSites(TID,RIDS) ; VSTS)[TID] = RIDS .
  

 crl [receive-prepare-reply-2] :

     < RID : Replica | executing: < TID : Txn | operations: OPS, AS >,
                       voteSites: VSTS,
                       sqn: SQN,
                       commitSites: CMTS, AS' >
     (to RID from RID' : prepare-reply(TID,FLAG,RID'))  --- FLAG is always true in RAMP
   =>

	 < RID : Replica | executing: < TID : Txn | operations: OPS, AS >,
	                   voteSites: remove(TID,RID',VSTS),
	                   sqn: SQN,
					   commitSites: CMTS, AS' >

   if remove(TID,RID',VSTS)[TID] =/= empty .   --- as of now, commitSites == prepareSites  


  rl [receive-commit] :
     < RID : Replica | datastore: VS,
                       latestCommit: LC, AS' >  --- "latestCommit" initialized as K |-> ts(0,0) ???
                                                --- not necessarily, because "maxts" deals with when K is not in latestCommit
     (to RID from RID' : commit(TID,ts(RID',SQN),RID'))
   =>
     < RID : Replica | datastore: VS,
                       latestCommit: cmt(LC,VS,ts(RID',SQN)), AS' >
     (to RID' from RID : committed(TID,RID)) .
	 

  op cmt : KeyTimestamps Versions Timestamp -> KeyTimestamps .
  eq cmt(LC,VS,TS) = $cmt(LC,keyFilter(VS,TS),TS) .
  op $cmt : KeyTimestamps KeySet Timestamp -> KeyTimestamps .
  eq $cmt(LC,(K,KS),TS) = $cmt(insert(K,maxts(LC,K,TS),LC),KS,TS) .
  eq $cmt(LC,empty,TS) = LC .
  
  op keyFilter : Versions Timestamp -> KeySet . 
  eq keyFilter((version(K,V,TS,MD),VS),TS) = K, keyFilter(VS,TS) .
  eq keyFilter(VS,TS) = empty [owise] .

  op maxts : KeyTimestamps Key Timestamp -> Timestamp .
  eq maxts(LC,K,TS) = if $hasMapping(LC,K)
                        then if LC[K] less-than TS
                               then TS
                               else LC[K]
                             fi
                        else TS
                      fi .

  op _less-than_ : Timestamp Timestamp -> Bool .
  eq ts(RID,SQN) less-than ts(RID',SQN') =
       if SQN < SQN'
         then true
         else if SQN == SQN' and RID < RID'
                then true
                else false
              fi
       fi .
	   

 crl [receive-committed-1] :

     < RID : Replica | executing: < TID : Txn | AS >,
                       committed: TXNS,
                       commitSites: CMTS, AS' >
     (to RID from RID' : committed(TID,RID'))
   =>
     < RID : Replica | executing: none,
                       committed: (TXNS ;; < TID : Txn | AS >),
                       commitSites: remove(TID,RID',CMTS), AS' >
     (to RID : start)  ---??? "start"

     if remove(TID,RID',CMTS)[TID] == empty .
	 
	 
 crl [receive-committed-2] :

     < RID : Replica | executing: < TID : Txn | AS >,
                       committed: TXNS,
                       commitSites: CMTS, AS' >
     (to RID from RID' : committed(TID,RID'))
   =>
     < RID : Replica | executing: < TID : Txn | AS >,
                       committed: TXNS,
                       commitSites: remove(TID,RID',CMTS), AS' >

     if remove(TID,RID',CMTS)[TID] =/= empty .
	 
	 
 crl [receive-get-1] :
     < RID : Replica | datastore: VS,
                       latestCommit: LC, AS' >
     (to RID from RID' : get(TID,K,TS,RID'))
   =>
     < RID : Replica | datastore: VS,
                       latestCommit: LC, AS' >
	 (to RID' from RID : response1(TID,vmatch(K,VS,LC),RID))
	 if TS == eptTS .			   
					   
 crl [receive-get-2] :
     < RID : Replica | datastore: VS,
                       latestCommit: LC, AS' >
     (to RID from RID' : get(TID,K,TS,RID'))
   =>
     < RID : Replica | datastore: VS,
                       latestCommit: LC, AS' >
	 (to RID' from RID : response2(TID,vmatch(K,VS,TS),RID))
	 if TS =/= eptTS .						   


  op vmatch : Key Versions KeyTimestamps -> Version .
  op vmatch : Key Versions Timestamp -> Version .
  eq vmatch(K,(version(K,V,TS,MD),VS),(K |-> TS,LC)) = version(K,V,TS,MD) .
  eq vmatch(K,VS,LC) = version(K,[0],ts(0,0),empty) [owise] .  
  --- ??? deal with "K not in LC", namely, the first txn has reads
  eq vmatch(K,(version(K,V,TS,MD),VS),TS) = version(K,V,TS,MD) .
  eq vmatch(K,VS,TS) = version(K,[0],ts(0,0),empty) [owise] .  
  --- this should never apply since the 2nd-round read will fetch the version which has been prepared
  
  
 crl [receive-response1-1] :

     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: (OPS (X :=read K) OPS'),
                                                readSet: RS,
                                                localVars: VARS,
                                                latest: VL, AS >,
                       1stGetSites: 1STGETS,
                       2ndGetSites: 2NDGETS, AS' >
     (to RID from RID' : response1(TID,version(K,V,TS,MD),RID'))
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: (OPS (X :=read K) OPS'),
                                                readSet: (RS, version(K,V,TS,MD)),
                                                localVars: insert(X,V,VARS),  --- useless for read-only txns
                                                latest: lat(VL,MD,TS), AS >,
                       1stGetSites: remove(TID,RID',1STGETS),
                       2ndGetSites: (2NDGETS ; 2nd(TID,2ndSites(lat(VL,MD,TS),(RS, version(K,V,TS,MD)),RID,REPLICA-TABLE))), AS' >
      gen2ndGets(TID,lat(VL,MD,TS),(RS, version(K,V,TS,MD)),RID,REPLICA-TABLE)

     if remove(TID,RID',1STGETS)[TID] == empty .


  op lat : KeyTimestamps KeySet Timestamp -> KeyTimestamps .
  eq lat(VL,(K,MD),TS) = lat(insert(K,maxts(VL,K,TS),VL),MD,TS) .
  eq lat(VL,empty,TS) = VL .
  
  
  op 2ndSites : KeyTimestamps Versions Oid ReplicaTable -> OidSet .
  eq 2ndSites((K |-> TS',VL),(version(K,V,TS,MD),RS),RID,REPLICA-TABLE) =
       2ndSites((K |-> TS',VL),RS,RID,REPLICA-TABLE) ;
       (if TS less-than TS'
          then if localReplica(K,RID,REPLICA-TABLE)
                 then RID
                 else preferredSite(K,REPLICA-TABLE)
               fi
          else empty
        fi) .
  eq 2ndSites(VL,RS,RID,REPLICA-TABLE) = empty [owise] .  --- if K is not in VL
  eq 2ndSites(VL,empty,RID,REPLICA-TABLE) = empty .	 
  
  
  op gen2ndGets : Oid KeyTimestamps Versions Oid ReplicaTable -> Msgs .
  eq gen2ndGets(TID,(K |-> TS',VL),(version(K,V,TS,MD),RS),RID,REPLICA-TABLE) = 
       gen2ndGets(TID,(K |-> TS',VL),RS,RID,REPLICA-TABLE)
       if TS less-than TS'
         then if localReplica(K,RID,REPLICA-TABLE)
                then (to RID from RID : get(TID,K,TS',RID)) 
                else (to preferredSite(K,REPLICA-TABLE) from RID : get(TID,K,TS',RID))
              fi
         else null
       fi .
  eq gen2ndGets(TID,VL,RS,RID,REPLICA-TABLE) = null [owise] .  --- if K is not in VL
  eq gen2ndGets(TID,VL,empty,RID,REPLICA-TABLE) = null .		
  
  op remove : Oid Oid 1stGets -> 1stGets .
  eq remove(TID,RID,(1st(TID,(RID ; RIDS)) ; 1STGETS)) =
       1st(TID,RIDS) ; 1STGETS .
  eq remove(TID,RID,1STGETS) = 1STGETS [owise] .

  op remove : Oid Oid 2ndGets -> 2ndGets .
  eq remove(TID,RID,(2nd(TID,(RID ; RIDS)) ; 2NDGETS)) =
       2nd(TID,RIDS) ; 2NDGETS .
  eq remove(TID,RID,2NDGETS) = 2NDGETS [owise] .
  
  
  op _`[_`] : 1stGets Oid -> OidSet .
  eq (1st(TID,RIDS) ; 1STGETS)[TID] = RIDS . 

  op _`[_`] : 2ndGets Oid -> OidSet .
  eq (2nd(TID,RIDS) ; 2NDGETS)[TID] = RIDS .
  
  
 crl [receive-response1-2] :

     < RID : Replica | executing: < TID : Txn | operations: (OPS (X :=read K) OPS'),
                                                readSet: RS,
                                                localVars: VARS,
                                                latest: VL, AS >,
                       1stGetSites: 1STGETS,
                       2ndGetSites: 2NDGETS, AS' >
     (to RID from RID' : response1(TID,version(K,V,TS,MD),RID'))
   =>
	 < RID : Replica | executing: < TID : Txn | operations: (OPS (X :=read K) OPS'),
	                                                        readSet: (RS, version(K,V,TS,MD)),
	                                                        localVars: insert(X,V,VARS),  --- useless for read-only txns
	                                                        latest: lat(VL,MD,TS), AS >,
	                   1stGetSites: remove(TID,RID',1STGETS),
	                   2ndGetSites: 2NDGETS, AS' >

     if remove(TID,RID',1STGETS)[TID] =/= empty .
	 
	 
  rl [receive-response2] :
     < RID : Replica | executing: < TID : Txn | operations: (OPS (X :=read K) OPS'),
                                                readSet: (RS,version(K,V',TS',MD')),
                                                localVars: VARS, AS >,
                       2ndGetSites: 2NDGETS, AS' >
     (to RID from RID' : response2(TID,version(K,V,TS,MD),RID'))
   => 
     < RID : Replica | executing: < TID : Txn | operations: (OPS (X :=read K) OPS'),
                                                readSet: (RS,version(K,V,TS,MD)),
                                                localVars: insert(X,V,VARS), AS >,
                       2ndGetSites: remove(TID,RID',2NDGETS), AS' > .
	 
	 
 crl [commit-reads] :
 
     < RID : Replica | executing: < TID : Txn | readSet: RS, AS >,
                       committed: TXNS,
                       1stGetSites: 1STGETS,
                       2ndGetSites: 2NDGETS, AS' >
   =>
     < RID : Replica | executing: none,
                       committed: (TXNS ;; < TID : Txn | readSet: RS, AS >),
                       1stGetSites: delete(TID,1STGETS),
                       2ndGetSites: delete(TID,2NDGETS), AS' >
     (to RID : start)
            
     if 1STGETS[TID] == empty /\
        2NDGETS[TID] == empty .
		

  op delete : Oid 1stGets -> 1stGets .
  eq delete(TID,(1st(TID,RIDS) ; 1STGETS)) = 1STGETS .
  eq delete(TID,1STGETS) = 1STGETS [owise] .

  op delete : Oid 2ndGets -> 2ndGets .
  eq delete(TID,(2nd(TID,RIDS) ; 2NDGETS)) = 2NDGETS .
  eq delete(TID,2NDGETS) = 2NDGETS [owise] .
endm
