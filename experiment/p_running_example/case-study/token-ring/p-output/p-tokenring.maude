load ../apmaude

mod SORTS is
  inc SCHEDULING .
  
  sort MutexState .
  ops outsideCS waitForCS insideCS : -> MutexState [ctor] .
  
  sort OidList .
  subsort Oid < OidList .
  op emptyOidList : -> OidList [ctor] .
  op _;;_ : OidList OidList -> OidList [ctor assoc id: emptyOidList] .
  
  sorts WaitTime WaitTimes .
  subsort WaitTime < WaitTimes .
  op <_`,_> : Oid Float -> WaitTime .
  op empty : -> WaitTimes [ctor] .
  op _;_ : WaitTimes WaitTimes -> WaitTimes [ctor comm assoc id: empty] .    
endm

mod OBJS is
  inc SORTS .
  
  op Node  :              -> ObjType .
  op state:_ : MutexState -> Attribute .
  op next:_  : Oid        -> Attribute .
  
  *** Msgs ***
  op start : -> Payload .
  op token : -> Payload .
endm

load pi-tokenring
load ../sampling-lib

mod P-TOKENRING is
  including BOOL .
  including OBJS .
  including PI-TOKENRING .
  including SAMPLING-LIB .
  op delay-exitCS : Oid Oid Attributes MsgList -> DTask .
  op delay-getToken1 : Oid Oid Oid Attributes MsgList -> DTask .
  eq objectEnabled(
< O:Oid : Node | state: insideCS,next: O':Oid,AS:Attributes >)
    = true .
  rl 
{@C:Config delay-exitCS(O:Oid,O':Oid,AS:Attributes,@M:Msg :: @ML:MsgList)|
@T:Float}
    => 
{(@C:Config[@T:Float +(delta-exitCS(O:Oid,O':Oid,AS:Attributes)[sample(uniform(
    1.0,5.0))[rand]]),@M:Msg])delay-exitCS(O:Oid,O':Oid,AS:Attributes,
    @ML:MsgList)|
@T:Float} .
  rl 
{@C:Config delay-getToken1(O:Oid,O':Oid,O'':Oid,AS:Attributes,@M:Msg ::
    @ML:MsgList)|
@T:Float}
    => 
{(@C:Config[@T:Float +(delta-getToken1(O':Oid,O:Oid,O'':Oid,AS:Attributes)[
    sample(uniform(1.0,5.0))[rand]]),@M:Msg])delay-getToken1(O:Oid,O':Oid,
    O'':Oid,AS:Attributes,@ML:MsgList)|
@T:Float} .
  rl 
{C:Config delay-init(OBJS:Objects,MSGS:Msgs,M:Msg :: ML:MsgList)|
T:Float}
    => 
{(C:Config[T:Float +(sample(exponential(1.0000000000000001e-1))[rand]),
    M:Msg])delay-init(OBJS:Objects,MSGS:Msgs,ML:MsgList)|
T:Float} [label delay-init-1] .
  rl 
{@OBJS:Objects @DMS:DMsgs
< O:Oid : Node | state: insideCS,next: O':Oid,AS:Attributes > |
@T:Float}
    => 
{@OBJS:Objects @DMS:DMsgs
< O:Oid : Node | state: outsideCS,next: O':Oid,AS:Attributes > delay-exitCS(
    O:Oid,O':Oid,AS:Attributes,sort(to O':Oid from O:Oid : token))|
@T:Float} [label exitCS.p] .
  rl 
{@OBJS:Objects @DMS:DMsgs(to O:Oid : start)
< O:Oid : Node | state: outsideCS,AS:Attributes > |
@T:Float}
    => 
{@OBJS:Objects @DMS:DMsgs
< O:Oid : Node | state: waitForCS,AS:Attributes > |
@T:Float} [label wantToEnterCS.p] .
  rl 
{@OBJS:Objects @DMS:DMsgs(to O':Oid from O:Oid : token)
< O':Oid : Node | state: outsideCS,next: O'':Oid,AS:Attributes > |
@T:Float}
    => 
{@OBJS:Objects @DMS:DMsgs
< O':Oid : Node | state: outsideCS,next: O'':Oid,AS:Attributes >
    delay-getToken1(O:Oid,O':Oid,O'':Oid,AS:Attributes,sort(to O'':Oid from
    O':Oid : token))|
@T:Float} [label getToken1.p] .
  rl 
{@OBJS:Objects @DMS:DMsgs(to O':Oid from O:Oid : token)
< O':Oid : Node | state: waitForCS,AS:Attributes > |
@T:Float}
    => 
{@OBJS:Objects @DMS:DMsgs
< O':Oid : Node | state: insideCS,AS:Attributes > |
@T:Float} [label getToken2.p] .
  rl delay-exitCS(O:Oid,O':Oid,AS:Attributes,nil)
    => null [label delay-exitCS] .
  rl delay-getToken1(O:Oid,O':Oid,O'':Oid,AS:Attributes,nil)
    => null [label delay-getToken1] .
  rl delay-init(OBJS:Objects,MSGS:Msgs,nil)
    => null [label delay-init-2] .
endm
