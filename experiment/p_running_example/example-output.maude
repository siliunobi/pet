*** P ***
load sampling-ext

mod SORTS is
  inc SCHEDULING .
  pr NAT .
  
  sorts Query Queries Key Value Oids .
  subsort Nat < Value < Payload .
  subsort Query < Queries < Payload .
  subsort Oid < Oids .

  op read : Key -> Query .
  
  op ept : -> Queries .
  op _::_ : Queries Queries -> Queries [assoc id: ept] .

  op empty : -> Oids .
  op _;_ : Oids Oids -> Oids [assoc comm id: empty] .
endm
view Key from TRIV to SORTS is sort Elt to Key . endv
view Value from TRIV to SORTS is sort Elt to Value . endv
view Oids from TRIV to SORTS is sort Elt to Oids . endv

mod OBJS is
  inc SORTS .
  pr MAP{Key,Value} .
  pr MAP{Key,Oids} .
  
  ops Client Server Table : -> ObjType .
  
  op queries:_ : Queries -> Attribute .
  op waiting:_ : Oids  -> Attribute .
  op read:_    : Value -> Attribute .
  
  op database:_ : Map{Key,Value} -> Attribute .
  
  op replicas:_ : Map{Key,Oids} -> Attribute .
endm

mod PROTOCOL is
  inc OBJS .
  pr SAMPLING-EXT .
  
  vars O O' TB : Oid .  vars QS QS' : Queries .
  var OS : Oids .  var R : Map{Key,Oids} .
  vars AS AS' : Attributes .  var K : Key .
  var D : Map{Key,Value} .  vars V V' : Value .
  var P : Payload .
  
  *** P ***
  *** new variables 
  var @T : Float .  var @OBJS : Objects .
  var @DMS : DMsgs .  var @C : Config .
  var @M : Msg .  var @ML : MsgList .
  
  *** P ***
  rl [req-p] :
      {
     (to O from O' : QS')
     < O : Client | queries: QS, AS > 
    @OBJS @DMS | @T }
  =>
      {
     < O : Client | queries: (QS :: QS'), AS >
    @OBJS @DMS | @T } .
  
  *** P ***
  rl [issue-p] :
      { 
   < O : Client | queries: (read(K) :: QS), waiting: empty, read: 0, replicas: R, AS > 
      @OBJS @DMS | @T }
  => 
      {
     < O : Client | queries: (read(K) :: QS), waiting: (R[K]), read: 0, replicas: R, AS > 
      delay-issue(O,K,QS,R,AS,sort(propagate read(K) to R[K] from O))
      @OBJS @DMS | @T } .  
  
  op propagate_to_from_ : Payload Oids Oid -> Config .
  eq propagate P to (O ; OS) from O' = (propagate P to OS from O') (to O from O' : P) .
  eq propagate P to empty from O' = null .

  *** P ***
  op delay-issue : Oid Key Queries Map{Key,Oids} Attributes MsgList -> DTask .

  rl [delay-issue-1] :
     { delay-issue(O,K,QS,R,AS,(@M :: @ML)) @C | @T }
  =>
     { delay-issue(O,K,QS,R,AS,@ML) @C 
     [@T + u-issue(O,K,QS,R,AS,sample-issue(O,K,QS,R,AS)), @M] | @T } .

  rl [delay-issue-2] : delay-issue(O,K,QS,R,AS,nil) => null .
  

  eq objectEnabled(< O : Client | queries: (read(K) :: QS), waiting: empty, read: 0, replicas: R, AS >)
   = true .


  *** P ***
  rl [reply-p] :
     {
     (to O from O' : read(K)) 
   < O : Server | database: D, AS >
      @OBJS @DMS | @T }
  => 
     {
     < O : Server | database: D, AS > 
      delay-reply(O,O',K,D,AS,sort(to O' from O : D[K]))
      @OBJS @DMS | @T } .  
   
  op delay-reply : Oid Oid Key Map{Key,Value} Attributes MsgList -> DTask .

  rl [delay-reply-1] :
     { delay-reply(O,O',K,D,AS,(@M :: @ML)) @C | @T }
  =>
     { delay-reply(O,O',K,D,AS,@ML) @C 
     [@T + u-reply(O,O',K,D,AS,sample-reply(O,O',K,D,AS)), @M] | @T } .
  
  rl [delay-reply-2] : delay-reply(O,O',K,D,AS,nil) => null .

  
  *** P ***
  rl [update-p] :
     {
     (to O from O' : V') 
   < O : Client | read: V, waiting: (O' ; OS), AS >
    @OBJS @DMS | @T }
  => 
     {
     < O : Client | read: max(V,V'), waiting: OS, AS >
      @OBJS @DMS | @T } .  


  *** P ***
 crl [finish-p] :
     {
     < O : Client | queries: (read(K) :: QS), waiting: empty, read: V, AS >
    @OBJS @DMS | @T }  
  => 
     {
     < O : Client | queries: QS, waiting: empty, read: V, AS >  
      @OBJS @DMS | @T }
   if V =/= 0 .
  
  ceq objectEnabled(< O : Client | queries: (read(K) :: QS), waiting: empty, read: V, AS >)
    = true if V =/= 0 .
endm

mod TEST is
  inc PROTOCOL .
  
  ops u1 u2 c1 c2 s1 s2 s3 : -> Oid . 
  ops k1 k2 k3 : -> Key .
   
  op initial : -> Config .
  eq initial =
       (to c1 from u1 : (read(k1) :: read(k3))) (to c2 from u2 : read(k2))
     < c1 : Client | queries: ept, waiting: empty, read: 0,
                     replicas: (k1 |-> (s1 ; s2), k2 |-> (s2 ; s3), k3 |-> (s1 ; s3)) >
     < c2 : Client | queries: ept, waiting: empty, read: 0,
                     replicas: (k1 |-> (s1 ; s2), k2 |-> (s2 ; s3), k3 |-> (s1 ; s3)) >
     < s1 : Server | database: (k1 |-> 23, k3 |-> 8) >
     < s2 : Server | database: (k1 |-> 10, k2 |-> 7) >
     < s3 : Server | database: (k2 |-> 14, k3 |-> 3) > .
endm