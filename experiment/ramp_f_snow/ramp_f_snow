load replica-table

mod RAMP-F-SNOW is
  including CLIENT-REPLICA .
  including MESSAGE .
  including REPLICA-TABLE .
  including SAMPLER .
  including VERSION-RAMP .
  including VALUES-NAT .

  op ld : -> Delay .  --- local delay 
  op rd : -> Delay .  --- remote delay
  op nd : -> Delay .  --- no delay
  eq nd = 0.0 .

  --- lognormal distribution
  eq ld = sampleLogNormal(0.0,1.0) . --- miu, sigma 
  eq rd = sampleLogNormal(3.0,2.0) .

  --- weibull distribution
---   eq ld = sampleWeibull(5.0,1.0) . 
---   eq rd = sampleWeibull(3.0,300.0) .

  --- or, ld = 0.0
  --- in our model, local delay seems to be local "processing" delay,
  --- which is negligible compared to the distributed data communication
  --- thus, the settings in our experiments could be:
---  eq ld = 0.0 .
---  eq rd = sampleLogNormal(0.0,1.0) .
--- eq rd = sampleWeibull(5.0,1.0) .


  vars RID TID RID' TABLE M : Address .
  var RIDS : AddressSet .
  vars AS AS' : AttributeSet .
  vars TXNS TXNS' : ConfigList .
  vars K K' : Key .
  var KS : KeySet .
  var X : LocalVar .
  var REPLICA-TABLE : ReplicaTable .
  vars OPS OPS' OPS'' : OperationList .
  vars V V' V'' : Value .
  var WS : WriteSet .
  vars VARS VARS' : LocalVars .
  vars RS DS RS' WRITES READS WRITES' : Versions .
  vars LC VL VL' : KeyTimestamps .
  var VERSION : Version .
  vars TS TS' : Timestamp .
  var VS : Versions .
  vars SQN SQN' TXNSQN : Int .
  var EXPR : Expression .
  var RT : KeyReplicas .
  vars 1STGETS 1STGETS' : 1stGets .
  vars 2NDGETS 2NDGETS' : 2ndGets .
  vars VSTS CMTS VSTS' CMTS' : VoteSites .
  vars T T1 : Float .
  var FLAG : Bool .
  vars MD MD' : WriteSet .
  vars RECORD RECORD' : Record .

  op read-only : OperationList -> Bool .
  eq read-only((OPS write(K,EXPR) OPS')) = false .
  eq read-only(OPS) = true [owise] .

  op write-only : OperationList -> Bool .
  eq write-only((OPS (X :=read K) OPS')) = false .
  eq write-only(OPS) = true [owise] .

  op choose : Key Versions KeyTimestamps -> Version .
  eq choose(K,(version(K,V,TS,MD),VS),(K |-> TS,LC)) = version(K,V,TS,MD) .
  eq choose(K,VS,LC) = version(K,[0],ts(0,0),empty) [owise] .  --- if not matched, returned value

  op value : Version -> Value .
  eq value(version(K,V,TS,MD)) = V .

  op genGets : Float OperationList Address Address ReplicaTable -> Config .
  eq genGets(T,((X :=read K) OPS),RID,TID,REPLICA-TABLE) = 
       genGets(T,OPS,RID,TID,REPLICA-TABLE)
       if localReplica(K,RID,REPLICA-TABLE)
         then [ld + T, RID <- get(TID,K,RID)]  --- get does not have ts
         else [rd + T, preferredSite(K,REPLICA-TABLE) <- get(TID,K,RID)]
       fi .
  eq genGets(T,(write(K,EXPR) OPS),RID,TID,REPLICA-TABLE) =
       genGets(T,OPS,RID,TID,REPLICA-TABLE) .
  eq genGets(T,nil,RID,TID,REPLICA-TABLE) = null .

  op 1stSites : OperationList Address ReplicaTable -> AddressSet .
  eq 1stSites(((X :=read K) OPS),RID,REPLICA-TABLE) =
       if localReplica(K,RID,REPLICA-TABLE)
         then RID ; 1stSites(OPS,RID,REPLICA-TABLE) 
         else preferredSite(K,REPLICA-TABLE) ; 1stSites(OPS,RID,REPLICA-TABLE)
       fi .
  eq 1stSites((write(K,EXPR) OPS),RID,REPLICA-TABLE) =
       1stSites(OPS,RID,REPLICA-TABLE) .
  eq 1stSites(nil,RID,REPLICA-TABLE) = empty .

  op prepareSites : OperationList Address ReplicaTable -> AddressSet .
  eq prepareSites((write(K,EXPR) OPS),RID,REPLICA-TABLE) =
       if localReplica(K,RID,REPLICA-TABLE)
         then RID ; prepareSites(OPS,RID,REPLICA-TABLE)
         else preferredSite(K,REPLICA-TABLE) ; prepareSites(OPS,RID,REPLICA-TABLE)
       fi .
  eq prepareSites(((X :=read K) OPS),RID,REPLICA-TABLE) =
       prepareSites(OPS,RID,REPLICA-TABLE) .
  eq prepareSites(nil,RID,REPLICA-TABLE) = empty .

  op genPuts : Float OperationList Address Address Nat LocalVars ReplicaTable -> Config .
  op $genPuts : Float OperationList Address Address Nat LocalVars ReplicaTable OperationList -> Config .
  eq genPuts(T,OPS,RID,TID,SQN,VARS,REPLICA-TABLE) = $genPuts(T,OPS,RID,TID,SQN,VARS,REPLICA-TABLE,OPS) .
  eq $genPuts(T,(write(K,EXPR) OPS),RID,TID,SQN,VARS,REPLICA-TABLE,(OPS' write(K,EXPR) OPS'')) =
       $genPuts(T,OPS,RID,TID,SQN,VARS,REPLICA-TABLE,(OPS' write(K,EXPR) OPS''))
       if localReplica(K,RID,REPLICA-TABLE)
         then [ld + T, RID <- prepare(TID,version(K,eval(EXPR,VARS),ts(RID,SQN),md((OPS' OPS''),VARS)),RID)]
         else [rd + T, preferredSite(K,REPLICA-TABLE) <- prepare(TID,version(K,eval(EXPR,VARS),ts(RID,SQN),md((OPS' OPS''),VARS)),RID)]
       fi .
  eq $genPuts(T,((X :=read K) OPS),RID,TID,SQN,VARS,REPLICA-TABLE,OPS') = 
       $genPuts(T,OPS,RID,TID,SQN,VARS,REPLICA-TABLE,OPS') .  --- deal with rw-txns
  eq $genPuts(T,nil,RID,TID,SQN,VARS,REPLICA-TABLE,OPS') = null .  
  --- Note that when initializing write-only txns EXPR should be Value, e.g., [0]
  --- That is, VARS is useless to genPuts in write-only txns

  ---!!! md is now changed to write set
  op md : OperationList LocalVars -> WriteSet .
  eq md((write(K,EXPR) OPS),VARS) = K |-> eval(EXPR,VARS), md(OPS,VARS) .
  eq md(((X :=read K) OPS),VARS) = md(OPS,VARS) .
  eq md(nil,VARS) = empty .

  op ws : OperationList Address Nat LocalVars -> Versions .
  op $ws : OperationList Address Nat LocalVars OperationList -> Versions .
  eq ws(OPS,RID,SQN,VARS) = $ws(OPS,RID,SQN,VARS,OPS) .
  eq $ws((write(K,EXPR) OPS),RID,SQN,VARS,(OPS' write(K,EXPR) OPS'')) = 
       version(K,eval(EXPR,VARS),ts(RID,SQN),md((OPS' OPS''),VARS)), 
       $ws(OPS,RID,SQN,VARS,(OPS' write(K,EXPR) OPS'')) .
  eq $ws(((X :=read K) OPS),RID,SQN,VARS,OPS') =
       $ws(OPS,RID,SQN,VARS,OPS') .
  eq $ws(nil,RID,SQN,VARS,OPS') = empty .


  op _[_] : VoteSites Address -> AddressSet .
  eq (voteSites(TID,RIDS) ; VSTS)[TID] = RIDS . 

  op remove : Address Address VoteSites -> VoteSites .
  eq remove(TID,RID,(voteSites(TID,(RID ; RIDS)) ; VSTS)) =
       voteSites(TID,RIDS) ; VSTS .
  eq remove(TID,RID,VSTS) = VSTS [owise] .

  op _[_] : 1stGets Address -> AddressSet .
  eq (1st(TID,RIDS) ; 1STGETS)[TID] = RIDS . 

  op _[_] : 2ndGets Address -> AddressSet .
  eq (2nd(TID,RIDS) ; 2NDGETS)[TID] = RIDS . 

  op delete : Address 1stGets -> 1stGets .
  eq delete(TID,(1st(TID,RIDS) ; 1STGETS)) = 1STGETS .
  eq delete(TID,1STGETS) = 1STGETS [owise] .

  op delete : Address 2ndGets -> 2ndGets .
  eq delete(TID,(2nd(TID,RIDS) ; 2NDGETS)) = 2NDGETS .
  eq delete(TID,2NDGETS) = 2NDGETS [owise] .

  op _in_ : Address 1stGets -> Bool .
  op _in_ : Address 2ndGets -> Bool .
  eq TID in (1st(TID,RIDS) ; 1STGETS) = true .
  eq TID in 1STGETS = false [owise] .
  eq TID in (2nd(TID,RIDS) ; 2NDGETS) = true .
  eq TID in 2NDGETS = false [owise] .
  
  op remove : Address Address 1stGets -> 1stGets .
  eq remove(TID,RID,(1st(TID,(RID ; RIDS)) ; 1STGETS)) =
       1st(TID,RIDS) ; 1STGETS .
  eq remove(TID,RID,1STGETS) = 1STGETS [owise] .

  op remove : Address Address 2ndGets -> 2ndGets .
  eq remove(TID,RID,(2nd(TID,(RID ; RIDS)) ; 2NDGETS)) =
       2nd(TID,RIDS) ; 2NDGETS .
  eq remove(TID,RID,2NDGETS) = 2NDGETS [owise] .

  op cmt : KeyTimestamps Versions Timestamp -> KeyTimestamps .
  eq cmt(LC,VS,TS) = $cmt(LC,keyFilter(VS,TS),TS) .
  op $cmt : KeyTimestamps KeySet Timestamp -> KeyTimestamps .
  eq $cmt(LC,(K,KS),TS) = $cmt(insert(K,maxts(LC,K,TS),LC),KS,TS) .
  eq $cmt(LC,empty,TS) = LC .
  
  op keyFilter : Versions Timestamp -> KeySet . 
  eq keyFilter((version(K,V,TS,MD),VS),TS) = K, keyFilter(VS,TS) .
  eq keyFilter(VS,TS) = empty [owise] .

  op maxts : KeyTimestamps Key Timestamp -> Timestamp .
  eq maxts(LC,K,TS) = if $hasMapping(LC,K)
                        then if LC[K] less-than TS
                               then TS
                               else LC[K]
                             fi
                        else TS
                      fi .

  op _less-than_ : Timestamp Timestamp -> Bool .
  eq ts(RID,SQN) less-than ts(RID',SQN') =
       if SQN < SQN'
         then true
         else if SQN == SQN' and RID < RID'
                then true
                else false
              fi
       fi .

  op genCommits : Float Address Nat AddressSet Address -> Config .
  eq genCommits(T,TID,SQN,(RID' ; RIDS),RID) =
       genCommits(T,TID,SQN,RIDS,RID)
       [if RID == RID' then ld + T else rd + T fi, RID' <- commit(TID,ts(RID,SQN),RID)] .
  eq genCommits(T,TID,SQN,empty,RID) = null .

  op vmatch : Key Versions KeyTimestamps -> Version .
  eq vmatch(K,(version(K,V,TS,MD),VS),(K |-> TS,LC)) = version(K,V,TS,MD) .
  eq vmatch(K,VS,LC) = version(K,[0],ts(0,0),empty) [owise] .  

  op lat : KeyTimestamps KeySet Timestamp -> KeyTimestamps .
  eq lat(VL,(K,KS),TS) = lat(insert(K,maxts(VL,K,TS),VL),KS,TS) .
  eq lat(VL,empty,TS) = VL .

  op vl : OperationList -> KeyTimestamps .
  eq vl((write(K,EXPR) OPS)) = vl(OPS) .
  eq vl(((X :=read K) OPS)) = K |-> ts(-1,-1), vl(OPS) .
  eq vl(nil) = empty .

  op keys : WriteSet -> KeySet .
  eq keys((K |-> V,WS)) = K, keys(WS) .
  eq keys(empty) = empty . 

  --- "raConsistent" chooses the RA-consistent version, and updates readSet with it
  op raConsistent : KeyTimestamps Versions -> Versions .
  eq raConsistent((K |-> TS',VL),(version(K,V,TS,MD),version(K',V',TS',(K |-> V'',WS)),RS)) =
       if TS less-than TS'
         then version(K,V'',TS',empty),version(K',V',TS',(K |-> V'',WS)),RS
         else version(K,V,TS,MD),version(K',V',TS',(K |-> V'',WS)),RS
       fi .
  eq raConsistent(VL,RS) = RS [owise] .  --- deal with MD == empty, which could happen when fetched the initial versions

  --- use readSet to update local vars
  op updateVars : OperationList Versions LocalVars -> LocalVars .
  eq updateVars((OPS (X :=read K) OPS'),(RS,version(K,V,TS,MD)),VARS) =
       updateVars((OPS (X :=read K) OPS'),RS,insert(X,V,VARS)) .
  eq updateVars(OPS,empty,VARS) = VARS .



  ---??? simply consume "start" if no txn needs to start
  rl [receiving-start-when-no-txn-to-start] :
     < RID : Replica | gotTxns: emptyTxnList, AS >
     {T, RID <- start}
   =>
     < RID : Replica | gotTxns: emptyTxnList, AS > .

  --- "gotTxns" abstracts "client" away
 crl [start-ro-or-rw-txn] :
     {T, RID <- start}  ---??? "start"
     < M : Monitor | log: RECORD >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | gotTxns: (< TID : Txn | operations: OPS,
                                               latest: empty, AS > ;; TXNS),
                       executing: noActor,
                       1stGetSites: 1STGETS, AS' >
   =>
     < M : Monitor | log: (RECORD ; record(TID,T,0.0,empty,empty,false)) >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | gotTxns: TXNS,
                       executing: < TID : Txn | operations: OPS,
                                                latest: vl(OPS), AS >,  --- initialize "v_latest"
                       1stGetSites: (1STGETS ; 1st(TID,RIDS)), AS' >
     genGets(T,OPS,RID,TID,REPLICA-TABLE) 
     if (not write-only(OPS)) /\
        RIDS := 1stSites(OPS,RID,REPLICA-TABLE) .

  ---!!! RAMP doesn't need "txnSQN" as ROLA does because "sqn" could only be updated at the beginning of the txn
 crl [start-wo-txn] :
     {T, RID <- start}  ---??? "start"
     < M : Monitor | log: RECORD >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | gotTxns: (< TID : Txn | operations: OPS,
                                               localVars: VARS, AS > ;; TXNS),
                       executing: noActor,
                       sqn: SQN,
                       voteSites: VSTS, AS' >
   =>
     < M : Monitor | log: (RECORD ; record(TID,T,0.0,empty,WRITES,false)) >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | gotTxns: TXNS,
                       executing: < TID : Txn | operations: OPS,
                                                localVars: VARS, AS >,
                       sqn: SQN',
                       voteSites: (VSTS ; voteSites(TID,RIDS)), AS' >
     genPuts(T,OPS,RID,TID,SQN',VARS,REPLICA-TABLE)
     if SQN' := SQN + 1 /\
        write-only(OPS) /\
        RIDS := prepareSites(OPS,RID,REPLICA-TABLE) /\
        WRITES := ws(OPS,RID,SQN',VARS) .

  rl [receive-prepare] :
     < RID : Replica | datastore: VS, AS' >
     {T, RID <- prepare(TID,VERSION,RID')}
   =>
     < RID : Replica | datastore: (VS,VERSION), AS' >
     [if RID == RID' then ld + T else rd + T fi, RID' <- prepare-reply(TID,true,RID)] .  --- always "true" in RAMP

 crl [receive-prepare-reply] :
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: OPS, AS >,
                       voteSites: VSTS,
                       sqn: SQN,
                       commitSites: CMTS, AS' >
     {T, RID <- prepare-reply(TID,FLAG,RID')}  --- FLAG is always true in RAMP
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     if VSTS'[TID] == empty  --- all votes received
       then < RID : Replica | executing: < TID : Txn | operations: OPS, AS >,
                              voteSites: VSTS',
                              sqn: SQN,
                              commitSites: (CMTS ; voteSites(TID,RIDS)), AS' >
            genCommits(T,TID,SQN,RIDS,RID)
       else < RID : Replica | executing: < TID : Txn | operations: OPS, AS >,
                              voteSites: VSTS',
                              sqn: SQN,
                              commitSites: CMTS, AS' >
     fi 
   if VSTS' := remove(TID,RID',VSTS) /\
      RIDS := prepareSites(OPS,RID,REPLICA-TABLE) .  --- as of now, commitSites == prepareSites

  rl [receive-commit] :
     < RID : Replica | datastore: VS,
                       latestCommit: LC, AS' >  --- "latestCommit" initialized as K |-> ts(0,0) ???
                                                --- not necessarily, because "maxts" deals with when K is not in latestCommit
     {T, RID <- commit(TID,ts(RID',SQN),RID')}
   =>
     < RID : Replica | datastore: VS,
                       latestCommit: cmt(LC,VS,ts(RID',SQN)), AS' >
     [if RID == RID' then ld + T else rd + T fi, RID' <- committed(TID,RID)] .

 crl [receive-committed] :
     < M : Monitor | log: (RECORD ; record(TID,T1,0.0,READS,WRITES,false) ; RECORD') >
     < RID : Replica | executing: < TID : Txn | AS >,
                       committed: TXNS,
                       commitSites: CMTS, AS' >
     {T, RID <- committed(TID,RID')}
   =>
     if CMTS'[TID] == empty  --- all "committed" received
       then < M : Monitor | log: (RECORD ; record(TID,T1,T,READS,WRITES,true) ; RECORD') >
            < RID : Replica | executing: noActor,
                              committed: (TXNS ;; < TID : Txn | AS >),
                              commitSites: CMTS', AS' >
            [nd, RID <- start]  ---??? "start"
       else < M : Monitor | log: (RECORD ; record(TID,T1,0.0,READS,WRITES,false) ; RECORD') >
            < RID : Replica | executing: < TID : Txn | AS >,
                              committed: TXNS,
                              commitSites: CMTS', AS' >
     fi
     if CMTS' := remove(TID,RID',CMTS) .
  
  --- incoming get does not have ts in RAMP-SNOW
  rl [receive-get] :
     < RID : Replica | datastore: VS,
                       latestCommit: LC, AS' >
     {T, RID <- get(TID,K,RID')}
   =>
     < RID : Replica | datastore: VS,
                       latestCommit: LC, AS' >
     [if RID == RID' then ld + T else rd + T fi, 
      RID' <- response(TID,vmatch(K,VS,LC),RID)] .


 crl [receive-response] :
     < RID : Replica | executing: < TID : Txn | operations: (OPS (X :=read K) OPS'),
                                                readSet: RS,
                                                localVars: VARS,
                                                latest: VL, AS >,
                       1stGetSites: 1STGETS, AS' >
     {T, RID <- response(TID,version(K,V,TS,MD),RID')}
   =>
     < RID : Replica | executing: < TID : Txn | operations: (OPS (X :=read K) OPS'),
                                                readSet: RS',
                                                localVars: insert(X,V,VARS),  --- useless for read-only txns
                                                latest: VL', AS >,
                       1stGetSites: 1STGETS', AS' >
     if 1STGETS'[TID] == empty
       then [nd, RID <- commit-reads] else null fi 
     if 1STGETS' := remove(TID,RID',1STGETS) /\
        RS' := RS, version(K,V,TS,MD) /\
        VL' := lat(VL,keys(MD),TS) .

  
  --- RAMP deals with rw-txns in a different way than Walter, 
  --- that is, all reads are sent out at the beginning of the txn
  --- so "writeSet" not needed: no read-your-write-in-the-same-txn
 crl [commit-reads] :  
     < M : Monitor | log: (RECORD ; record(TID,T1,0.0,READS,WRITES,false) ; RECORD') >
     < TABLE : Table | table: REPLICA-TABLE >
     < RID : Replica | executing: < TID : Txn | operations: OPS,
                                                localVars: VARS,
                                                readSet: RS,
                                                latest: VL, AS >,
                       committed: TXNS,
                       1stGetSites: 1STGETS,
                       sqn: SQN,
                       voteSites: VSTS, AS' >
     {T, RID <- commit-reads}
   =>
     < TABLE : Table | table: REPLICA-TABLE >
     if read-only(OPS)
       then < M : Monitor | log: (RECORD ; record(TID,T1,T,RS',WRITES,true) ; RECORD') >
            < RID : Replica | executing: noActor,
                              committed: (TXNS ;; < TID : Txn | operations: OPS,
                                                                localVars: VARS',
                                                                readSet: RS',
                                                                latest: VL, AS >),
                              1stGetSites: delete(TID,1STGETS),
                              sqn: SQN,
                              voteSites: VSTS, AS' >
            [nd, RID <- start]  ---??? "start"
       else < M : Monitor | log: (RECORD ; record(TID,T1,0.0,RS',WRITES',false) ; RECORD') >
            < RID : Replica | executing: < TID : Txn | operations: OPS,
                                                       localVars: VARS',
                                                       readSet: RS',
                                                       latest: VL, AS >,
                              committed: TXNS,
                              1stGetSites: delete(TID,1STGETS),
                              sqn: SQN',
                              voteSites: (VSTS ; voteSites(TID,RIDS)), AS' >
            genPuts(T,OPS,RID,TID,SQN',VARS',REPLICA-TABLE)
     fi 
     if RS' := raConsistent(VL,RS) /\
        VARS' := updateVars(OPS,RS',VARS) /\
        SQN' := SQN + 1 /\
        RIDS := prepareSites(OPS,RID,REPLICA-TABLE) /\
        WRITES' := ws(OPS,RID,SQN',VARS') .         
endm
