load initial-states-smc

mod ANALYSIS is
  inc INITIAL-STATES .
---  inc CONSISTENCY .

  eq LIMIT = 1.0e+10000000 .

  op initConfig : -> Config .
  eq initConfig = run(initState,LIMIT) .

  eq initState = init(nbOfRoTxns,nbOfWoTxns,nbOfRwTxns,
      nbOfCls,nbOfServs,nbOfKeys,nbOfRepls,
      nbOfOpsPerRoTxn,nbOfOpsPerWoTxn,nbOfOpsPerRwTxn,kad) . 


  --- Init parameters 
  eq nbOfRoTxns = 2 .  
  eq nbOfWoTxns = 0 .  
  eq nbOfRwTxns = 0 .
  eq nbOfOpsPerRoTxn = 2 .
  eq nbOfOpsPerWoTxn = 0 .
  eq nbOfOpsPerRwTxn = 0 .  --- must be even number
  eq nbOfCls = 4 .
  eq nbOfServs  = 2 .  
  eq nbOfKeys = 2 .  
  eq nbOfRepls = 1 .
  eq kad = zipf .
  eq delay = sampleLogNormal(3.0,2.0) .


  --- Metrics
  var LOG : Log .
  vars TID RID M : Address .
  vars GT GT' T N : Float .
  vars RS WS : Set{KeyVersion} .
  vars VT VT' : VectorTime .
  var FLAG : Bool .
  var C : Config .

  op totalRunTime : Log -> Float .
  op trt : Log Float -> Float .


  eq totalRunTime(LOG) = trt(LOG,0.0) .
  eq trt((TID |-> 
      < RID |-> GT ; (RID |-> GT',VT) ; true ; RS ; WS >,LOG),T) = 
       if GT' > T
         then trt(LOG,GT')
         else trt(LOG,T)
       fi .
  eq trt((TID |-> 
      < VT ; VT' ; false ; RS ; WS >,LOG),T) = 
       trt(LOG,T) .
  eq trt(empty,T) = T .


  --- Throughput
  op throughput : Log -> Float .
  eq throughput(LOG) = committedNumber(LOG) 
                     / totalRunTime(LOG) .

  op committedNumber : Log -> Float .
  op $committedNumber : Log Float -> Float .

  eq committedNumber(LOG) = $committedNumber(LOG,0.0) .
  eq $committedNumber((TID |-> 
      < VT ; VT' ; true ; RS ; WS >,LOG),N) 
      = $committedNumber(LOG,N + 1.0) .
  eq $committedNumber((TID |-> 
      < VT ; VT' ; false ; RS ; WS >,LOG),N) 
      = $committedNumber(LOG,N) .
  eq $committedNumber(empty,N) = N .


  --- Avg latency
  op avgLatency : Log -> Float .
  eq avgLatency(LOG) = totalLatency(LOG) 
                     / committedNumber(LOG) .

  op totalLatency : Log -> Float .
  op $totalLatency : Log Float -> Float .
  
  eq totalLatency(LOG) = $totalLatency(LOG,0.0) .
  eq $totalLatency((TID |-> 
      < RID |-> GT ; (RID |-> GT',VT) ; true ; RS ; WS >,LOG),T) 
      = $totalLatency(LOG,T + GT' - GT) .
  eq $totalLatency((TID |-> 
      < VT ; VT' ; false ; RS ; WS >,LOG),T) 
      = $totalLatency(LOG,T) .
  eq $totalLatency(empty,T) = T .


  --- Commit ratio
  op cmtRatio : Log -> Float .
  eq cmtRatio(LOG) = committedNumber(LOG) 
                   / totalNumber(LOG) .

  op totalNumber : Log -> Float .
  op $totalNumber : Log Float -> Float .
  eq totalNumber(LOG) = $totalNumber(LOG,0.0) .
  eq $totalNumber((TID |-> < VT ; VT' ; FLAG ; RS ; WS >,LOG),N) 
     = $totalNumber(LOG,N + 1.0) .
  eq $totalNumber(empty,N) = N .  


  --- PVESTA interfaces
  eq val(0,< M : Monitor | log: LOG > C) = throughput(LOG) .
  eq val(1,< M : Monitor | log: LOG > C) = avgLatency(LOG) .
  eq val(2,< M : Monitor | log: LOG > C) = cmtRatio(LOG) .
endm



set clear rules off .
rewrite initConfig .


---(
search [1] init($1, $2, $3, $4, $5, $6, $7, $8, $9) =>! < M:Address : Monitor | log: LOG:Log, AS:AttributeSet > C:Config 
  such that not $0(LOG:Log) .
)

